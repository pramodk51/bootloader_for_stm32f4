
app1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .fw_header    0000000c  08020000  08020000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  1 .isr_vector   000001ac  08020400  08020400  00010400  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         0000445c  080205b0  080205b0  000105b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000000d8  08024a0c  08024a0c  00014a0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM.extab    00000000  08024ae4  08024ae4  00020070  2**0
                  CONTENTS
  5 .ARM          00000008  08024ae4  08024ae4  00014ae4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .preinit_array 00000000  08024aec  08024aec  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  7 .init_array   00000004  08024aec  08024aec  00014aec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .fini_array   00000004  08024af0  08024af0  00014af0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .data         00000070  20000000  08024af4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          000004c0  20000070  08024b64  00020070  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000530  08024b64  00020530  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000ce4d  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_abbrev 00001d20  00000000  00000000  0002ceed  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00000ad0  00000000  00000000  0002ec10  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000009e8  00000000  00000000  0002f6e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  00024c75  00000000  00000000  000300c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   00008b16  00000000  00000000  00054d3d  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    000dc785  00000000  00000000  0005d853  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  00139fd8  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000033a8  00000000  00000000  0013a054  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080205b0 <__do_global_dtors_aux>:
 80205b0:	b510      	push	{r4, lr}
 80205b2:	4c05      	ldr	r4, [pc, #20]	; (80205c8 <__do_global_dtors_aux+0x18>)
 80205b4:	7823      	ldrb	r3, [r4, #0]
 80205b6:	b933      	cbnz	r3, 80205c6 <__do_global_dtors_aux+0x16>
 80205b8:	4b04      	ldr	r3, [pc, #16]	; (80205cc <__do_global_dtors_aux+0x1c>)
 80205ba:	b113      	cbz	r3, 80205c2 <__do_global_dtors_aux+0x12>
 80205bc:	4804      	ldr	r0, [pc, #16]	; (80205d0 <__do_global_dtors_aux+0x20>)
 80205be:	f3af 8000 	nop.w
 80205c2:	2301      	movs	r3, #1
 80205c4:	7023      	strb	r3, [r4, #0]
 80205c6:	bd10      	pop	{r4, pc}
 80205c8:	20000070 	.word	0x20000070
 80205cc:	00000000 	.word	0x00000000
 80205d0:	080249f4 	.word	0x080249f4

080205d4 <frame_dummy>:
 80205d4:	b508      	push	{r3, lr}
 80205d6:	4b03      	ldr	r3, [pc, #12]	; (80205e4 <frame_dummy+0x10>)
 80205d8:	b11b      	cbz	r3, 80205e2 <frame_dummy+0xe>
 80205da:	4903      	ldr	r1, [pc, #12]	; (80205e8 <frame_dummy+0x14>)
 80205dc:	4803      	ldr	r0, [pc, #12]	; (80205ec <frame_dummy+0x18>)
 80205de:	f3af 8000 	nop.w
 80205e2:	bd08      	pop	{r3, pc}
 80205e4:	00000000 	.word	0x00000000
 80205e8:	20000074 	.word	0x20000074
 80205ec:	080249f4 	.word	0x080249f4

080205f0 <memchr>:
 80205f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80205f4:	2a10      	cmp	r2, #16
 80205f6:	db2b      	blt.n	8020650 <memchr+0x60>
 80205f8:	f010 0f07 	tst.w	r0, #7
 80205fc:	d008      	beq.n	8020610 <memchr+0x20>
 80205fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8020602:	3a01      	subs	r2, #1
 8020604:	428b      	cmp	r3, r1
 8020606:	d02d      	beq.n	8020664 <memchr+0x74>
 8020608:	f010 0f07 	tst.w	r0, #7
 802060c:	b342      	cbz	r2, 8020660 <memchr+0x70>
 802060e:	d1f6      	bne.n	80205fe <memchr+0xe>
 8020610:	b4f0      	push	{r4, r5, r6, r7}
 8020612:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8020616:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 802061a:	f022 0407 	bic.w	r4, r2, #7
 802061e:	f07f 0700 	mvns.w	r7, #0
 8020622:	2300      	movs	r3, #0
 8020624:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8020628:	3c08      	subs	r4, #8
 802062a:	ea85 0501 	eor.w	r5, r5, r1
 802062e:	ea86 0601 	eor.w	r6, r6, r1
 8020632:	fa85 f547 	uadd8	r5, r5, r7
 8020636:	faa3 f587 	sel	r5, r3, r7
 802063a:	fa86 f647 	uadd8	r6, r6, r7
 802063e:	faa5 f687 	sel	r6, r5, r7
 8020642:	b98e      	cbnz	r6, 8020668 <memchr+0x78>
 8020644:	d1ee      	bne.n	8020624 <memchr+0x34>
 8020646:	bcf0      	pop	{r4, r5, r6, r7}
 8020648:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 802064c:	f002 0207 	and.w	r2, r2, #7
 8020650:	b132      	cbz	r2, 8020660 <memchr+0x70>
 8020652:	f810 3b01 	ldrb.w	r3, [r0], #1
 8020656:	3a01      	subs	r2, #1
 8020658:	ea83 0301 	eor.w	r3, r3, r1
 802065c:	b113      	cbz	r3, 8020664 <memchr+0x74>
 802065e:	d1f8      	bne.n	8020652 <memchr+0x62>
 8020660:	2000      	movs	r0, #0
 8020662:	4770      	bx	lr
 8020664:	3801      	subs	r0, #1
 8020666:	4770      	bx	lr
 8020668:	2d00      	cmp	r5, #0
 802066a:	bf06      	itte	eq
 802066c:	4635      	moveq	r5, r6
 802066e:	3803      	subeq	r0, #3
 8020670:	3807      	subne	r0, #7
 8020672:	f015 0f01 	tst.w	r5, #1
 8020676:	d107      	bne.n	8020688 <memchr+0x98>
 8020678:	3001      	adds	r0, #1
 802067a:	f415 7f80 	tst.w	r5, #256	; 0x100
 802067e:	bf02      	ittt	eq
 8020680:	3001      	addeq	r0, #1
 8020682:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8020686:	3001      	addeq	r0, #1
 8020688:	bcf0      	pop	{r4, r5, r6, r7}
 802068a:	3801      	subs	r0, #1
 802068c:	4770      	bx	lr
 802068e:	bf00      	nop

08020690 <__aeabi_uldivmod>:
 8020690:	b953      	cbnz	r3, 80206a8 <__aeabi_uldivmod+0x18>
 8020692:	b94a      	cbnz	r2, 80206a8 <__aeabi_uldivmod+0x18>
 8020694:	2900      	cmp	r1, #0
 8020696:	bf08      	it	eq
 8020698:	2800      	cmpeq	r0, #0
 802069a:	bf1c      	itt	ne
 802069c:	f04f 31ff 	movne.w	r1, #4294967295
 80206a0:	f04f 30ff 	movne.w	r0, #4294967295
 80206a4:	f000 b972 	b.w	802098c <__aeabi_idiv0>
 80206a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80206ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80206b0:	f000 f806 	bl	80206c0 <__udivmoddi4>
 80206b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80206b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80206bc:	b004      	add	sp, #16
 80206be:	4770      	bx	lr

080206c0 <__udivmoddi4>:
 80206c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80206c4:	9e08      	ldr	r6, [sp, #32]
 80206c6:	4604      	mov	r4, r0
 80206c8:	4688      	mov	r8, r1
 80206ca:	2b00      	cmp	r3, #0
 80206cc:	d14b      	bne.n	8020766 <__udivmoddi4+0xa6>
 80206ce:	428a      	cmp	r2, r1
 80206d0:	4615      	mov	r5, r2
 80206d2:	d967      	bls.n	80207a4 <__udivmoddi4+0xe4>
 80206d4:	fab2 f282 	clz	r2, r2
 80206d8:	b14a      	cbz	r2, 80206ee <__udivmoddi4+0x2e>
 80206da:	f1c2 0720 	rsb	r7, r2, #32
 80206de:	fa01 f302 	lsl.w	r3, r1, r2
 80206e2:	fa20 f707 	lsr.w	r7, r0, r7
 80206e6:	4095      	lsls	r5, r2
 80206e8:	ea47 0803 	orr.w	r8, r7, r3
 80206ec:	4094      	lsls	r4, r2
 80206ee:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80206f2:	0c23      	lsrs	r3, r4, #16
 80206f4:	fbb8 f7fe 	udiv	r7, r8, lr
 80206f8:	fa1f fc85 	uxth.w	ip, r5
 80206fc:	fb0e 8817 	mls	r8, lr, r7, r8
 8020700:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8020704:	fb07 f10c 	mul.w	r1, r7, ip
 8020708:	4299      	cmp	r1, r3
 802070a:	d909      	bls.n	8020720 <__udivmoddi4+0x60>
 802070c:	18eb      	adds	r3, r5, r3
 802070e:	f107 30ff 	add.w	r0, r7, #4294967295
 8020712:	f080 811b 	bcs.w	802094c <__udivmoddi4+0x28c>
 8020716:	4299      	cmp	r1, r3
 8020718:	f240 8118 	bls.w	802094c <__udivmoddi4+0x28c>
 802071c:	3f02      	subs	r7, #2
 802071e:	442b      	add	r3, r5
 8020720:	1a5b      	subs	r3, r3, r1
 8020722:	b2a4      	uxth	r4, r4
 8020724:	fbb3 f0fe 	udiv	r0, r3, lr
 8020728:	fb0e 3310 	mls	r3, lr, r0, r3
 802072c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8020730:	fb00 fc0c 	mul.w	ip, r0, ip
 8020734:	45a4      	cmp	ip, r4
 8020736:	d909      	bls.n	802074c <__udivmoddi4+0x8c>
 8020738:	192c      	adds	r4, r5, r4
 802073a:	f100 33ff 	add.w	r3, r0, #4294967295
 802073e:	f080 8107 	bcs.w	8020950 <__udivmoddi4+0x290>
 8020742:	45a4      	cmp	ip, r4
 8020744:	f240 8104 	bls.w	8020950 <__udivmoddi4+0x290>
 8020748:	3802      	subs	r0, #2
 802074a:	442c      	add	r4, r5
 802074c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8020750:	eba4 040c 	sub.w	r4, r4, ip
 8020754:	2700      	movs	r7, #0
 8020756:	b11e      	cbz	r6, 8020760 <__udivmoddi4+0xa0>
 8020758:	40d4      	lsrs	r4, r2
 802075a:	2300      	movs	r3, #0
 802075c:	e9c6 4300 	strd	r4, r3, [r6]
 8020760:	4639      	mov	r1, r7
 8020762:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8020766:	428b      	cmp	r3, r1
 8020768:	d909      	bls.n	802077e <__udivmoddi4+0xbe>
 802076a:	2e00      	cmp	r6, #0
 802076c:	f000 80eb 	beq.w	8020946 <__udivmoddi4+0x286>
 8020770:	2700      	movs	r7, #0
 8020772:	e9c6 0100 	strd	r0, r1, [r6]
 8020776:	4638      	mov	r0, r7
 8020778:	4639      	mov	r1, r7
 802077a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802077e:	fab3 f783 	clz	r7, r3
 8020782:	2f00      	cmp	r7, #0
 8020784:	d147      	bne.n	8020816 <__udivmoddi4+0x156>
 8020786:	428b      	cmp	r3, r1
 8020788:	d302      	bcc.n	8020790 <__udivmoddi4+0xd0>
 802078a:	4282      	cmp	r2, r0
 802078c:	f200 80fa 	bhi.w	8020984 <__udivmoddi4+0x2c4>
 8020790:	1a84      	subs	r4, r0, r2
 8020792:	eb61 0303 	sbc.w	r3, r1, r3
 8020796:	2001      	movs	r0, #1
 8020798:	4698      	mov	r8, r3
 802079a:	2e00      	cmp	r6, #0
 802079c:	d0e0      	beq.n	8020760 <__udivmoddi4+0xa0>
 802079e:	e9c6 4800 	strd	r4, r8, [r6]
 80207a2:	e7dd      	b.n	8020760 <__udivmoddi4+0xa0>
 80207a4:	b902      	cbnz	r2, 80207a8 <__udivmoddi4+0xe8>
 80207a6:	deff      	udf	#255	; 0xff
 80207a8:	fab2 f282 	clz	r2, r2
 80207ac:	2a00      	cmp	r2, #0
 80207ae:	f040 808f 	bne.w	80208d0 <__udivmoddi4+0x210>
 80207b2:	1b49      	subs	r1, r1, r5
 80207b4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80207b8:	fa1f f885 	uxth.w	r8, r5
 80207bc:	2701      	movs	r7, #1
 80207be:	fbb1 fcfe 	udiv	ip, r1, lr
 80207c2:	0c23      	lsrs	r3, r4, #16
 80207c4:	fb0e 111c 	mls	r1, lr, ip, r1
 80207c8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80207cc:	fb08 f10c 	mul.w	r1, r8, ip
 80207d0:	4299      	cmp	r1, r3
 80207d2:	d907      	bls.n	80207e4 <__udivmoddi4+0x124>
 80207d4:	18eb      	adds	r3, r5, r3
 80207d6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80207da:	d202      	bcs.n	80207e2 <__udivmoddi4+0x122>
 80207dc:	4299      	cmp	r1, r3
 80207de:	f200 80cd 	bhi.w	802097c <__udivmoddi4+0x2bc>
 80207e2:	4684      	mov	ip, r0
 80207e4:	1a59      	subs	r1, r3, r1
 80207e6:	b2a3      	uxth	r3, r4
 80207e8:	fbb1 f0fe 	udiv	r0, r1, lr
 80207ec:	fb0e 1410 	mls	r4, lr, r0, r1
 80207f0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80207f4:	fb08 f800 	mul.w	r8, r8, r0
 80207f8:	45a0      	cmp	r8, r4
 80207fa:	d907      	bls.n	802080c <__udivmoddi4+0x14c>
 80207fc:	192c      	adds	r4, r5, r4
 80207fe:	f100 33ff 	add.w	r3, r0, #4294967295
 8020802:	d202      	bcs.n	802080a <__udivmoddi4+0x14a>
 8020804:	45a0      	cmp	r8, r4
 8020806:	f200 80b6 	bhi.w	8020976 <__udivmoddi4+0x2b6>
 802080a:	4618      	mov	r0, r3
 802080c:	eba4 0408 	sub.w	r4, r4, r8
 8020810:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8020814:	e79f      	b.n	8020756 <__udivmoddi4+0x96>
 8020816:	f1c7 0c20 	rsb	ip, r7, #32
 802081a:	40bb      	lsls	r3, r7
 802081c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8020820:	ea4e 0e03 	orr.w	lr, lr, r3
 8020824:	fa01 f407 	lsl.w	r4, r1, r7
 8020828:	fa20 f50c 	lsr.w	r5, r0, ip
 802082c:	fa21 f30c 	lsr.w	r3, r1, ip
 8020830:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8020834:	4325      	orrs	r5, r4
 8020836:	fbb3 f9f8 	udiv	r9, r3, r8
 802083a:	0c2c      	lsrs	r4, r5, #16
 802083c:	fb08 3319 	mls	r3, r8, r9, r3
 8020840:	fa1f fa8e 	uxth.w	sl, lr
 8020844:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8020848:	fb09 f40a 	mul.w	r4, r9, sl
 802084c:	429c      	cmp	r4, r3
 802084e:	fa02 f207 	lsl.w	r2, r2, r7
 8020852:	fa00 f107 	lsl.w	r1, r0, r7
 8020856:	d90b      	bls.n	8020870 <__udivmoddi4+0x1b0>
 8020858:	eb1e 0303 	adds.w	r3, lr, r3
 802085c:	f109 30ff 	add.w	r0, r9, #4294967295
 8020860:	f080 8087 	bcs.w	8020972 <__udivmoddi4+0x2b2>
 8020864:	429c      	cmp	r4, r3
 8020866:	f240 8084 	bls.w	8020972 <__udivmoddi4+0x2b2>
 802086a:	f1a9 0902 	sub.w	r9, r9, #2
 802086e:	4473      	add	r3, lr
 8020870:	1b1b      	subs	r3, r3, r4
 8020872:	b2ad      	uxth	r5, r5
 8020874:	fbb3 f0f8 	udiv	r0, r3, r8
 8020878:	fb08 3310 	mls	r3, r8, r0, r3
 802087c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8020880:	fb00 fa0a 	mul.w	sl, r0, sl
 8020884:	45a2      	cmp	sl, r4
 8020886:	d908      	bls.n	802089a <__udivmoddi4+0x1da>
 8020888:	eb1e 0404 	adds.w	r4, lr, r4
 802088c:	f100 33ff 	add.w	r3, r0, #4294967295
 8020890:	d26b      	bcs.n	802096a <__udivmoddi4+0x2aa>
 8020892:	45a2      	cmp	sl, r4
 8020894:	d969      	bls.n	802096a <__udivmoddi4+0x2aa>
 8020896:	3802      	subs	r0, #2
 8020898:	4474      	add	r4, lr
 802089a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 802089e:	fba0 8902 	umull	r8, r9, r0, r2
 80208a2:	eba4 040a 	sub.w	r4, r4, sl
 80208a6:	454c      	cmp	r4, r9
 80208a8:	46c2      	mov	sl, r8
 80208aa:	464b      	mov	r3, r9
 80208ac:	d354      	bcc.n	8020958 <__udivmoddi4+0x298>
 80208ae:	d051      	beq.n	8020954 <__udivmoddi4+0x294>
 80208b0:	2e00      	cmp	r6, #0
 80208b2:	d069      	beq.n	8020988 <__udivmoddi4+0x2c8>
 80208b4:	ebb1 050a 	subs.w	r5, r1, sl
 80208b8:	eb64 0403 	sbc.w	r4, r4, r3
 80208bc:	fa04 fc0c 	lsl.w	ip, r4, ip
 80208c0:	40fd      	lsrs	r5, r7
 80208c2:	40fc      	lsrs	r4, r7
 80208c4:	ea4c 0505 	orr.w	r5, ip, r5
 80208c8:	e9c6 5400 	strd	r5, r4, [r6]
 80208cc:	2700      	movs	r7, #0
 80208ce:	e747      	b.n	8020760 <__udivmoddi4+0xa0>
 80208d0:	f1c2 0320 	rsb	r3, r2, #32
 80208d4:	fa20 f703 	lsr.w	r7, r0, r3
 80208d8:	4095      	lsls	r5, r2
 80208da:	fa01 f002 	lsl.w	r0, r1, r2
 80208de:	fa21 f303 	lsr.w	r3, r1, r3
 80208e2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80208e6:	4338      	orrs	r0, r7
 80208e8:	0c01      	lsrs	r1, r0, #16
 80208ea:	fbb3 f7fe 	udiv	r7, r3, lr
 80208ee:	fa1f f885 	uxth.w	r8, r5
 80208f2:	fb0e 3317 	mls	r3, lr, r7, r3
 80208f6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80208fa:	fb07 f308 	mul.w	r3, r7, r8
 80208fe:	428b      	cmp	r3, r1
 8020900:	fa04 f402 	lsl.w	r4, r4, r2
 8020904:	d907      	bls.n	8020916 <__udivmoddi4+0x256>
 8020906:	1869      	adds	r1, r5, r1
 8020908:	f107 3cff 	add.w	ip, r7, #4294967295
 802090c:	d22f      	bcs.n	802096e <__udivmoddi4+0x2ae>
 802090e:	428b      	cmp	r3, r1
 8020910:	d92d      	bls.n	802096e <__udivmoddi4+0x2ae>
 8020912:	3f02      	subs	r7, #2
 8020914:	4429      	add	r1, r5
 8020916:	1acb      	subs	r3, r1, r3
 8020918:	b281      	uxth	r1, r0
 802091a:	fbb3 f0fe 	udiv	r0, r3, lr
 802091e:	fb0e 3310 	mls	r3, lr, r0, r3
 8020922:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8020926:	fb00 f308 	mul.w	r3, r0, r8
 802092a:	428b      	cmp	r3, r1
 802092c:	d907      	bls.n	802093e <__udivmoddi4+0x27e>
 802092e:	1869      	adds	r1, r5, r1
 8020930:	f100 3cff 	add.w	ip, r0, #4294967295
 8020934:	d217      	bcs.n	8020966 <__udivmoddi4+0x2a6>
 8020936:	428b      	cmp	r3, r1
 8020938:	d915      	bls.n	8020966 <__udivmoddi4+0x2a6>
 802093a:	3802      	subs	r0, #2
 802093c:	4429      	add	r1, r5
 802093e:	1ac9      	subs	r1, r1, r3
 8020940:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8020944:	e73b      	b.n	80207be <__udivmoddi4+0xfe>
 8020946:	4637      	mov	r7, r6
 8020948:	4630      	mov	r0, r6
 802094a:	e709      	b.n	8020760 <__udivmoddi4+0xa0>
 802094c:	4607      	mov	r7, r0
 802094e:	e6e7      	b.n	8020720 <__udivmoddi4+0x60>
 8020950:	4618      	mov	r0, r3
 8020952:	e6fb      	b.n	802074c <__udivmoddi4+0x8c>
 8020954:	4541      	cmp	r1, r8
 8020956:	d2ab      	bcs.n	80208b0 <__udivmoddi4+0x1f0>
 8020958:	ebb8 0a02 	subs.w	sl, r8, r2
 802095c:	eb69 020e 	sbc.w	r2, r9, lr
 8020960:	3801      	subs	r0, #1
 8020962:	4613      	mov	r3, r2
 8020964:	e7a4      	b.n	80208b0 <__udivmoddi4+0x1f0>
 8020966:	4660      	mov	r0, ip
 8020968:	e7e9      	b.n	802093e <__udivmoddi4+0x27e>
 802096a:	4618      	mov	r0, r3
 802096c:	e795      	b.n	802089a <__udivmoddi4+0x1da>
 802096e:	4667      	mov	r7, ip
 8020970:	e7d1      	b.n	8020916 <__udivmoddi4+0x256>
 8020972:	4681      	mov	r9, r0
 8020974:	e77c      	b.n	8020870 <__udivmoddi4+0x1b0>
 8020976:	3802      	subs	r0, #2
 8020978:	442c      	add	r4, r5
 802097a:	e747      	b.n	802080c <__udivmoddi4+0x14c>
 802097c:	f1ac 0c02 	sub.w	ip, ip, #2
 8020980:	442b      	add	r3, r5
 8020982:	e72f      	b.n	80207e4 <__udivmoddi4+0x124>
 8020984:	4638      	mov	r0, r7
 8020986:	e708      	b.n	802079a <__udivmoddi4+0xda>
 8020988:	4637      	mov	r7, r6
 802098a:	e6e9      	b.n	8020760 <__udivmoddi4+0xa0>

0802098c <__aeabi_idiv0>:
 802098c:	4770      	bx	lr
 802098e:	bf00      	nop

08020990 <__io_putchar>:
#ifdef __GNUC__
# define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
#else
# define PUTCHAR_PROTOTYPE int fputc(int ch, FILE * f)
# endif
PUTCHAR_PROTOTYPE {
 8020990:	b580      	push	{r7, lr}
 8020992:	b082      	sub	sp, #8
 8020994:	af00      	add	r7, sp, #0
 8020996:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit( & huart3, (uint8_t * ) & ch, 1, 10);
 8020998:	1d39      	adds	r1, r7, #4
 802099a:	230a      	movs	r3, #10
 802099c:	2201      	movs	r2, #1
 802099e:	4804      	ldr	r0, [pc, #16]	; (80209b0 <__io_putchar+0x20>)
 80209a0:	f002 f9fd 	bl	8022d9e <HAL_UART_Transmit>
  return ch;
 80209a4:	687b      	ldr	r3, [r7, #4]
}
 80209a6:	4618      	mov	r0, r3
 80209a8:	3708      	adds	r7, #8
 80209aa:	46bd      	mov	sp, r7
 80209ac:	bd80      	pop	{r7, pc}
 80209ae:	bf00      	nop
 80209b0:	20000098 	.word	0x20000098

080209b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80209b4:	b580      	push	{r7, lr}
 80209b6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80209b8:	f000 fc7a 	bl	80212b0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80209bc:	f000 f828 	bl	8020a10 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80209c0:	f000 f928 	bl	8020c14 <MX_GPIO_Init>
  MX_ETH_Init();
 80209c4:	f000 f88e 	bl	8020ae4 <MX_ETH_Init>
  MX_USART3_UART_Init();
 80209c8:	f000 f8cc 	bl	8020b64 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80209cc:	f000 f8f4 	bl	8020bb8 <MX_USB_OTG_FS_PCD_Init>
  /* USER CODE BEGIN 2 */

  printf("App STARTED - version %d - CRC 0x%lx\n",
         image_hdr.image_version,
 80209d0:	4b0c      	ldr	r3, [pc, #48]	; (8020a04 <main+0x50>)
 80209d2:	885b      	ldrh	r3, [r3, #2]
  printf("App STARTED - version %d - CRC 0x%lx\n",
 80209d4:	4619      	mov	r1, r3
 80209d6:	4b0b      	ldr	r3, [pc, #44]	; (8020a04 <main+0x50>)
 80209d8:	689b      	ldr	r3, [r3, #8]
 80209da:	461a      	mov	r2, r3
 80209dc:	480a      	ldr	r0, [pc, #40]	; (8020a08 <main+0x54>)
 80209de:	f003 f925 	bl	8023c2c <iprintf>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  HAL_GPIO_WritePin(GPIOB, LD1_Pin, GPIO_PIN_RESET);
 80209e2:	2200      	movs	r2, #0
 80209e4:	2101      	movs	r1, #1
 80209e6:	4809      	ldr	r0, [pc, #36]	; (8020a0c <main+0x58>)
 80209e8:	f001 fbf4 	bl	80221d4 <HAL_GPIO_WritePin>
	  HAL_Delay(200);
 80209ec:	20c8      	movs	r0, #200	; 0xc8
 80209ee:	f000 fcd1 	bl	8021394 <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOB, LD1_Pin, GPIO_PIN_SET);
 80209f2:	2201      	movs	r2, #1
 80209f4:	2101      	movs	r1, #1
 80209f6:	4805      	ldr	r0, [pc, #20]	; (8020a0c <main+0x58>)
 80209f8:	f001 fbec 	bl	80221d4 <HAL_GPIO_WritePin>
	  HAL_Delay(200);
 80209fc:	20c8      	movs	r0, #200	; 0xc8
 80209fe:	f000 fcc9 	bl	8021394 <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOB, LD1_Pin, GPIO_PIN_RESET);
 8020a02:	e7ee      	b.n	80209e2 <main+0x2e>
 8020a04:	08020000 	.word	0x08020000
 8020a08:	08024a0c 	.word	0x08024a0c
 8020a0c:	40020400 	.word	0x40020400

08020a10 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8020a10:	b580      	push	{r7, lr}
 8020a12:	b094      	sub	sp, #80	; 0x50
 8020a14:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8020a16:	f107 0320 	add.w	r3, r7, #32
 8020a1a:	2230      	movs	r2, #48	; 0x30
 8020a1c:	2100      	movs	r1, #0
 8020a1e:	4618      	mov	r0, r3
 8020a20:	f003 f8fc 	bl	8023c1c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8020a24:	f107 030c 	add.w	r3, r7, #12
 8020a28:	2200      	movs	r2, #0
 8020a2a:	601a      	str	r2, [r3, #0]
 8020a2c:	605a      	str	r2, [r3, #4]
 8020a2e:	609a      	str	r2, [r3, #8]
 8020a30:	60da      	str	r2, [r3, #12]
 8020a32:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8020a34:	2300      	movs	r3, #0
 8020a36:	60bb      	str	r3, [r7, #8]
 8020a38:	4b28      	ldr	r3, [pc, #160]	; (8020adc <SystemClock_Config+0xcc>)
 8020a3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8020a3c:	4a27      	ldr	r2, [pc, #156]	; (8020adc <SystemClock_Config+0xcc>)
 8020a3e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8020a42:	6413      	str	r3, [r2, #64]	; 0x40
 8020a44:	4b25      	ldr	r3, [pc, #148]	; (8020adc <SystemClock_Config+0xcc>)
 8020a46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8020a48:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8020a4c:	60bb      	str	r3, [r7, #8]
 8020a4e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8020a50:	2300      	movs	r3, #0
 8020a52:	607b      	str	r3, [r7, #4]
 8020a54:	4b22      	ldr	r3, [pc, #136]	; (8020ae0 <SystemClock_Config+0xd0>)
 8020a56:	681b      	ldr	r3, [r3, #0]
 8020a58:	4a21      	ldr	r2, [pc, #132]	; (8020ae0 <SystemClock_Config+0xd0>)
 8020a5a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8020a5e:	6013      	str	r3, [r2, #0]
 8020a60:	4b1f      	ldr	r3, [pc, #124]	; (8020ae0 <SystemClock_Config+0xd0>)
 8020a62:	681b      	ldr	r3, [r3, #0]
 8020a64:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8020a68:	607b      	str	r3, [r7, #4]
 8020a6a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8020a6c:	2301      	movs	r3, #1
 8020a6e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8020a70:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8020a74:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8020a76:	2302      	movs	r3, #2
 8020a78:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8020a7a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8020a7e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8020a80:	2304      	movs	r3, #4
 8020a82:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8020a84:	23a8      	movs	r3, #168	; 0xa8
 8020a86:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8020a88:	2302      	movs	r3, #2
 8020a8a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8020a8c:	2307      	movs	r3, #7
 8020a8e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8020a90:	f107 0320 	add.w	r3, r7, #32
 8020a94:	4618      	mov	r0, r3
 8020a96:	f001 fcd3 	bl	8022440 <HAL_RCC_OscConfig>
 8020a9a:	4603      	mov	r3, r0
 8020a9c:	2b00      	cmp	r3, #0
 8020a9e:	d001      	beq.n	8020aa4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8020aa0:	f000 f966 	bl	8020d70 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8020aa4:	230f      	movs	r3, #15
 8020aa6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8020aa8:	2302      	movs	r3, #2
 8020aaa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8020aac:	2300      	movs	r3, #0
 8020aae:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8020ab0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8020ab4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8020ab6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8020aba:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8020abc:	f107 030c 	add.w	r3, r7, #12
 8020ac0:	2105      	movs	r1, #5
 8020ac2:	4618      	mov	r0, r3
 8020ac4:	f001 ff2c 	bl	8022920 <HAL_RCC_ClockConfig>
 8020ac8:	4603      	mov	r3, r0
 8020aca:	2b00      	cmp	r3, #0
 8020acc:	d001      	beq.n	8020ad2 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8020ace:	f000 f94f 	bl	8020d70 <Error_Handler>
  }
}
 8020ad2:	bf00      	nop
 8020ad4:	3750      	adds	r7, #80	; 0x50
 8020ad6:	46bd      	mov	sp, r7
 8020ad8:	bd80      	pop	{r7, pc}
 8020ada:	bf00      	nop
 8020adc:	40023800 	.word	0x40023800
 8020ae0:	40007000 	.word	0x40007000

08020ae4 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8020ae4:	b580      	push	{r7, lr}
 8020ae6:	af00      	add	r7, sp, #0
  /* USER CODE END ETH_Init 0 */

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8020ae8:	4b1c      	ldr	r3, [pc, #112]	; (8020b5c <MX_ETH_Init+0x78>)
 8020aea:	4a1d      	ldr	r2, [pc, #116]	; (8020b60 <MX_ETH_Init+0x7c>)
 8020aec:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 8020aee:	4b1b      	ldr	r3, [pc, #108]	; (8020b5c <MX_ETH_Init+0x78>)
 8020af0:	2201      	movs	r2, #1
 8020af2:	605a      	str	r2, [r3, #4]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 8020af4:	4b19      	ldr	r3, [pc, #100]	; (8020b5c <MX_ETH_Init+0x78>)
 8020af6:	2200      	movs	r2, #0
 8020af8:	821a      	strh	r2, [r3, #16]
  heth.Init.MACAddr[0] =   0x00;
 8020afa:	4b18      	ldr	r3, [pc, #96]	; (8020b5c <MX_ETH_Init+0x78>)
 8020afc:	695b      	ldr	r3, [r3, #20]
 8020afe:	2200      	movs	r2, #0
 8020b00:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[1] =   0x80;
 8020b02:	4b16      	ldr	r3, [pc, #88]	; (8020b5c <MX_ETH_Init+0x78>)
 8020b04:	695b      	ldr	r3, [r3, #20]
 8020b06:	3301      	adds	r3, #1
 8020b08:	2280      	movs	r2, #128	; 0x80
 8020b0a:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[2] =   0xE1;
 8020b0c:	4b13      	ldr	r3, [pc, #76]	; (8020b5c <MX_ETH_Init+0x78>)
 8020b0e:	695b      	ldr	r3, [r3, #20]
 8020b10:	3302      	adds	r3, #2
 8020b12:	22e1      	movs	r2, #225	; 0xe1
 8020b14:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[3] =   0x00;
 8020b16:	4b11      	ldr	r3, [pc, #68]	; (8020b5c <MX_ETH_Init+0x78>)
 8020b18:	695b      	ldr	r3, [r3, #20]
 8020b1a:	3303      	adds	r3, #3
 8020b1c:	2200      	movs	r2, #0
 8020b1e:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[4] =   0x00;
 8020b20:	4b0e      	ldr	r3, [pc, #56]	; (8020b5c <MX_ETH_Init+0x78>)
 8020b22:	695b      	ldr	r3, [r3, #20]
 8020b24:	3304      	adds	r3, #4
 8020b26:	2200      	movs	r2, #0
 8020b28:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[5] =   0x00;
 8020b2a:	4b0c      	ldr	r3, [pc, #48]	; (8020b5c <MX_ETH_Init+0x78>)
 8020b2c:	695b      	ldr	r3, [r3, #20]
 8020b2e:	3305      	adds	r3, #5
 8020b30:	2200      	movs	r2, #0
 8020b32:	701a      	strb	r2, [r3, #0]
  heth.Init.RxMode = ETH_RXPOLLING_MODE;
 8020b34:	4b09      	ldr	r3, [pc, #36]	; (8020b5c <MX_ETH_Init+0x78>)
 8020b36:	2200      	movs	r2, #0
 8020b38:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 8020b3a:	4b08      	ldr	r3, [pc, #32]	; (8020b5c <MX_ETH_Init+0x78>)
 8020b3c:	2200      	movs	r2, #0
 8020b3e:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 8020b40:	4b06      	ldr	r3, [pc, #24]	; (8020b5c <MX_ETH_Init+0x78>)
 8020b42:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8020b46:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */
    
  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8020b48:	4804      	ldr	r0, [pc, #16]	; (8020b5c <MX_ETH_Init+0x78>)
 8020b4a:	f000 fd2b 	bl	80215a4 <HAL_ETH_Init>
 8020b4e:	4603      	mov	r3, r0
 8020b50:	2b00      	cmp	r3, #0
 8020b52:	d001      	beq.n	8020b58 <MX_ETH_Init+0x74>
  {
    Error_Handler();
 8020b54:	f000 f90c 	bl	8020d70 <Error_Handler>
  }
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8020b58:	bf00      	nop
 8020b5a:	bd80      	pop	{r7, pc}
 8020b5c:	200004e0 	.word	0x200004e0
 8020b60:	40028000 	.word	0x40028000

08020b64 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8020b64:	b580      	push	{r7, lr}
 8020b66:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8020b68:	4b11      	ldr	r3, [pc, #68]	; (8020bb0 <MX_USART3_UART_Init+0x4c>)
 8020b6a:	4a12      	ldr	r2, [pc, #72]	; (8020bb4 <MX_USART3_UART_Init+0x50>)
 8020b6c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8020b6e:	4b10      	ldr	r3, [pc, #64]	; (8020bb0 <MX_USART3_UART_Init+0x4c>)
 8020b70:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8020b74:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8020b76:	4b0e      	ldr	r3, [pc, #56]	; (8020bb0 <MX_USART3_UART_Init+0x4c>)
 8020b78:	2200      	movs	r2, #0
 8020b7a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8020b7c:	4b0c      	ldr	r3, [pc, #48]	; (8020bb0 <MX_USART3_UART_Init+0x4c>)
 8020b7e:	2200      	movs	r2, #0
 8020b80:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8020b82:	4b0b      	ldr	r3, [pc, #44]	; (8020bb0 <MX_USART3_UART_Init+0x4c>)
 8020b84:	2200      	movs	r2, #0
 8020b86:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8020b88:	4b09      	ldr	r3, [pc, #36]	; (8020bb0 <MX_USART3_UART_Init+0x4c>)
 8020b8a:	220c      	movs	r2, #12
 8020b8c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8020b8e:	4b08      	ldr	r3, [pc, #32]	; (8020bb0 <MX_USART3_UART_Init+0x4c>)
 8020b90:	2200      	movs	r2, #0
 8020b92:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8020b94:	4b06      	ldr	r3, [pc, #24]	; (8020bb0 <MX_USART3_UART_Init+0x4c>)
 8020b96:	2200      	movs	r2, #0
 8020b98:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8020b9a:	4805      	ldr	r0, [pc, #20]	; (8020bb0 <MX_USART3_UART_Init+0x4c>)
 8020b9c:	f002 f8b2 	bl	8022d04 <HAL_UART_Init>
 8020ba0:	4603      	mov	r3, r0
 8020ba2:	2b00      	cmp	r3, #0
 8020ba4:	d001      	beq.n	8020baa <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8020ba6:	f000 f8e3 	bl	8020d70 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8020baa:	bf00      	nop
 8020bac:	bd80      	pop	{r7, pc}
 8020bae:	bf00      	nop
 8020bb0:	20000098 	.word	0x20000098
 8020bb4:	40004800 	.word	0x40004800

08020bb8 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8020bb8:	b580      	push	{r7, lr}
 8020bba:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8020bbc:	4b14      	ldr	r3, [pc, #80]	; (8020c10 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8020bbe:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8020bc2:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8020bc4:	4b12      	ldr	r3, [pc, #72]	; (8020c10 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8020bc6:	2204      	movs	r2, #4
 8020bc8:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8020bca:	4b11      	ldr	r3, [pc, #68]	; (8020c10 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8020bcc:	2202      	movs	r2, #2
 8020bce:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8020bd0:	4b0f      	ldr	r3, [pc, #60]	; (8020c10 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8020bd2:	2200      	movs	r2, #0
 8020bd4:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8020bd6:	4b0e      	ldr	r3, [pc, #56]	; (8020c10 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8020bd8:	2202      	movs	r2, #2
 8020bda:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8020bdc:	4b0c      	ldr	r3, [pc, #48]	; (8020c10 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8020bde:	2201      	movs	r2, #1
 8020be0:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8020be2:	4b0b      	ldr	r3, [pc, #44]	; (8020c10 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8020be4:	2200      	movs	r2, #0
 8020be6:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8020be8:	4b09      	ldr	r3, [pc, #36]	; (8020c10 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8020bea:	2200      	movs	r2, #0
 8020bec:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8020bee:	4b08      	ldr	r3, [pc, #32]	; (8020c10 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8020bf0:	2201      	movs	r2, #1
 8020bf2:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8020bf4:	4b06      	ldr	r3, [pc, #24]	; (8020c10 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8020bf6:	2200      	movs	r2, #0
 8020bf8:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8020bfa:	4805      	ldr	r0, [pc, #20]	; (8020c10 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8020bfc:	f001 fb03 	bl	8022206 <HAL_PCD_Init>
 8020c00:	4603      	mov	r3, r0
 8020c02:	2b00      	cmp	r3, #0
 8020c04:	d001      	beq.n	8020c0a <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8020c06:	f000 f8b3 	bl	8020d70 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8020c0a:	bf00      	nop
 8020c0c:	bd80      	pop	{r7, pc}
 8020c0e:	bf00      	nop
 8020c10:	200000d8 	.word	0x200000d8

08020c14 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8020c14:	b580      	push	{r7, lr}
 8020c16:	b08c      	sub	sp, #48	; 0x30
 8020c18:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8020c1a:	f107 031c 	add.w	r3, r7, #28
 8020c1e:	2200      	movs	r2, #0
 8020c20:	601a      	str	r2, [r3, #0]
 8020c22:	605a      	str	r2, [r3, #4]
 8020c24:	609a      	str	r2, [r3, #8]
 8020c26:	60da      	str	r2, [r3, #12]
 8020c28:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8020c2a:	2300      	movs	r3, #0
 8020c2c:	61bb      	str	r3, [r7, #24]
 8020c2e:	4b4b      	ldr	r3, [pc, #300]	; (8020d5c <MX_GPIO_Init+0x148>)
 8020c30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8020c32:	4a4a      	ldr	r2, [pc, #296]	; (8020d5c <MX_GPIO_Init+0x148>)
 8020c34:	f043 0304 	orr.w	r3, r3, #4
 8020c38:	6313      	str	r3, [r2, #48]	; 0x30
 8020c3a:	4b48      	ldr	r3, [pc, #288]	; (8020d5c <MX_GPIO_Init+0x148>)
 8020c3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8020c3e:	f003 0304 	and.w	r3, r3, #4
 8020c42:	61bb      	str	r3, [r7, #24]
 8020c44:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8020c46:	2300      	movs	r3, #0
 8020c48:	617b      	str	r3, [r7, #20]
 8020c4a:	4b44      	ldr	r3, [pc, #272]	; (8020d5c <MX_GPIO_Init+0x148>)
 8020c4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8020c4e:	4a43      	ldr	r2, [pc, #268]	; (8020d5c <MX_GPIO_Init+0x148>)
 8020c50:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8020c54:	6313      	str	r3, [r2, #48]	; 0x30
 8020c56:	4b41      	ldr	r3, [pc, #260]	; (8020d5c <MX_GPIO_Init+0x148>)
 8020c58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8020c5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8020c5e:	617b      	str	r3, [r7, #20]
 8020c60:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8020c62:	2300      	movs	r3, #0
 8020c64:	613b      	str	r3, [r7, #16]
 8020c66:	4b3d      	ldr	r3, [pc, #244]	; (8020d5c <MX_GPIO_Init+0x148>)
 8020c68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8020c6a:	4a3c      	ldr	r2, [pc, #240]	; (8020d5c <MX_GPIO_Init+0x148>)
 8020c6c:	f043 0301 	orr.w	r3, r3, #1
 8020c70:	6313      	str	r3, [r2, #48]	; 0x30
 8020c72:	4b3a      	ldr	r3, [pc, #232]	; (8020d5c <MX_GPIO_Init+0x148>)
 8020c74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8020c76:	f003 0301 	and.w	r3, r3, #1
 8020c7a:	613b      	str	r3, [r7, #16]
 8020c7c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8020c7e:	2300      	movs	r3, #0
 8020c80:	60fb      	str	r3, [r7, #12]
 8020c82:	4b36      	ldr	r3, [pc, #216]	; (8020d5c <MX_GPIO_Init+0x148>)
 8020c84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8020c86:	4a35      	ldr	r2, [pc, #212]	; (8020d5c <MX_GPIO_Init+0x148>)
 8020c88:	f043 0302 	orr.w	r3, r3, #2
 8020c8c:	6313      	str	r3, [r2, #48]	; 0x30
 8020c8e:	4b33      	ldr	r3, [pc, #204]	; (8020d5c <MX_GPIO_Init+0x148>)
 8020c90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8020c92:	f003 0302 	and.w	r3, r3, #2
 8020c96:	60fb      	str	r3, [r7, #12]
 8020c98:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8020c9a:	2300      	movs	r3, #0
 8020c9c:	60bb      	str	r3, [r7, #8]
 8020c9e:	4b2f      	ldr	r3, [pc, #188]	; (8020d5c <MX_GPIO_Init+0x148>)
 8020ca0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8020ca2:	4a2e      	ldr	r2, [pc, #184]	; (8020d5c <MX_GPIO_Init+0x148>)
 8020ca4:	f043 0308 	orr.w	r3, r3, #8
 8020ca8:	6313      	str	r3, [r2, #48]	; 0x30
 8020caa:	4b2c      	ldr	r3, [pc, #176]	; (8020d5c <MX_GPIO_Init+0x148>)
 8020cac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8020cae:	f003 0308 	and.w	r3, r3, #8
 8020cb2:	60bb      	str	r3, [r7, #8]
 8020cb4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8020cb6:	2300      	movs	r3, #0
 8020cb8:	607b      	str	r3, [r7, #4]
 8020cba:	4b28      	ldr	r3, [pc, #160]	; (8020d5c <MX_GPIO_Init+0x148>)
 8020cbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8020cbe:	4a27      	ldr	r2, [pc, #156]	; (8020d5c <MX_GPIO_Init+0x148>)
 8020cc0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8020cc4:	6313      	str	r3, [r2, #48]	; 0x30
 8020cc6:	4b25      	ldr	r3, [pc, #148]	; (8020d5c <MX_GPIO_Init+0x148>)
 8020cc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8020cca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8020cce:	607b      	str	r3, [r7, #4]
 8020cd0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8020cd2:	2200      	movs	r2, #0
 8020cd4:	f244 0181 	movw	r1, #16513	; 0x4081
 8020cd8:	4821      	ldr	r0, [pc, #132]	; (8020d60 <MX_GPIO_Init+0x14c>)
 8020cda:	f001 fa7b 	bl	80221d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8020cde:	2200      	movs	r2, #0
 8020ce0:	2140      	movs	r1, #64	; 0x40
 8020ce2:	4820      	ldr	r0, [pc, #128]	; (8020d64 <MX_GPIO_Init+0x150>)
 8020ce4:	f001 fa76 	bl	80221d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8020ce8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8020cec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8020cee:	4b1e      	ldr	r3, [pc, #120]	; (8020d68 <MX_GPIO_Init+0x154>)
 8020cf0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8020cf2:	2300      	movs	r3, #0
 8020cf4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8020cf6:	f107 031c 	add.w	r3, r7, #28
 8020cfa:	4619      	mov	r1, r3
 8020cfc:	481b      	ldr	r0, [pc, #108]	; (8020d6c <MX_GPIO_Init+0x158>)
 8020cfe:	f001 f8bf 	bl	8021e80 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8020d02:	f244 0381 	movw	r3, #16513	; 0x4081
 8020d06:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8020d08:	2301      	movs	r3, #1
 8020d0a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8020d0c:	2300      	movs	r3, #0
 8020d0e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8020d10:	2300      	movs	r3, #0
 8020d12:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8020d14:	f107 031c 	add.w	r3, r7, #28
 8020d18:	4619      	mov	r1, r3
 8020d1a:	4811      	ldr	r0, [pc, #68]	; (8020d60 <MX_GPIO_Init+0x14c>)
 8020d1c:	f001 f8b0 	bl	8021e80 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8020d20:	2340      	movs	r3, #64	; 0x40
 8020d22:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8020d24:	2301      	movs	r3, #1
 8020d26:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8020d28:	2300      	movs	r3, #0
 8020d2a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8020d2c:	2300      	movs	r3, #0
 8020d2e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8020d30:	f107 031c 	add.w	r3, r7, #28
 8020d34:	4619      	mov	r1, r3
 8020d36:	480b      	ldr	r0, [pc, #44]	; (8020d64 <MX_GPIO_Init+0x150>)
 8020d38:	f001 f8a2 	bl	8021e80 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8020d3c:	2380      	movs	r3, #128	; 0x80
 8020d3e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8020d40:	2300      	movs	r3, #0
 8020d42:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8020d44:	2300      	movs	r3, #0
 8020d46:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8020d48:	f107 031c 	add.w	r3, r7, #28
 8020d4c:	4619      	mov	r1, r3
 8020d4e:	4805      	ldr	r0, [pc, #20]	; (8020d64 <MX_GPIO_Init+0x150>)
 8020d50:	f001 f896 	bl	8021e80 <HAL_GPIO_Init>

}
 8020d54:	bf00      	nop
 8020d56:	3730      	adds	r7, #48	; 0x30
 8020d58:	46bd      	mov	sp, r7
 8020d5a:	bd80      	pop	{r7, pc}
 8020d5c:	40023800 	.word	0x40023800
 8020d60:	40020400 	.word	0x40020400
 8020d64:	40021800 	.word	0x40021800
 8020d68:	10110000 	.word	0x10110000
 8020d6c:	40020800 	.word	0x40020800

08020d70 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8020d70:	b480      	push	{r7}
 8020d72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8020d74:	bf00      	nop
 8020d76:	46bd      	mov	sp, r7
 8020d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020d7c:	4770      	bx	lr
	...

08020d80 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8020d80:	b480      	push	{r7}
 8020d82:	b083      	sub	sp, #12
 8020d84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8020d86:	2300      	movs	r3, #0
 8020d88:	607b      	str	r3, [r7, #4]
 8020d8a:	4b10      	ldr	r3, [pc, #64]	; (8020dcc <HAL_MspInit+0x4c>)
 8020d8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8020d8e:	4a0f      	ldr	r2, [pc, #60]	; (8020dcc <HAL_MspInit+0x4c>)
 8020d90:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8020d94:	6453      	str	r3, [r2, #68]	; 0x44
 8020d96:	4b0d      	ldr	r3, [pc, #52]	; (8020dcc <HAL_MspInit+0x4c>)
 8020d98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8020d9a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8020d9e:	607b      	str	r3, [r7, #4]
 8020da0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8020da2:	2300      	movs	r3, #0
 8020da4:	603b      	str	r3, [r7, #0]
 8020da6:	4b09      	ldr	r3, [pc, #36]	; (8020dcc <HAL_MspInit+0x4c>)
 8020da8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8020daa:	4a08      	ldr	r2, [pc, #32]	; (8020dcc <HAL_MspInit+0x4c>)
 8020dac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8020db0:	6413      	str	r3, [r2, #64]	; 0x40
 8020db2:	4b06      	ldr	r3, [pc, #24]	; (8020dcc <HAL_MspInit+0x4c>)
 8020db4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8020db6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8020dba:	603b      	str	r3, [r7, #0]
 8020dbc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8020dbe:	bf00      	nop
 8020dc0:	370c      	adds	r7, #12
 8020dc2:	46bd      	mov	sp, r7
 8020dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020dc8:	4770      	bx	lr
 8020dca:	bf00      	nop
 8020dcc:	40023800 	.word	0x40023800

08020dd0 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8020dd0:	b580      	push	{r7, lr}
 8020dd2:	b08e      	sub	sp, #56	; 0x38
 8020dd4:	af00      	add	r7, sp, #0
 8020dd6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8020dd8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8020ddc:	2200      	movs	r2, #0
 8020dde:	601a      	str	r2, [r3, #0]
 8020de0:	605a      	str	r2, [r3, #4]
 8020de2:	609a      	str	r2, [r3, #8]
 8020de4:	60da      	str	r2, [r3, #12]
 8020de6:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8020de8:	687b      	ldr	r3, [r7, #4]
 8020dea:	681b      	ldr	r3, [r3, #0]
 8020dec:	4a55      	ldr	r2, [pc, #340]	; (8020f44 <HAL_ETH_MspInit+0x174>)
 8020dee:	4293      	cmp	r3, r2
 8020df0:	f040 80a4 	bne.w	8020f3c <HAL_ETH_MspInit+0x16c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8020df4:	2300      	movs	r3, #0
 8020df6:	623b      	str	r3, [r7, #32]
 8020df8:	4b53      	ldr	r3, [pc, #332]	; (8020f48 <HAL_ETH_MspInit+0x178>)
 8020dfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8020dfc:	4a52      	ldr	r2, [pc, #328]	; (8020f48 <HAL_ETH_MspInit+0x178>)
 8020dfe:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8020e02:	6313      	str	r3, [r2, #48]	; 0x30
 8020e04:	4b50      	ldr	r3, [pc, #320]	; (8020f48 <HAL_ETH_MspInit+0x178>)
 8020e06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8020e08:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8020e0c:	623b      	str	r3, [r7, #32]
 8020e0e:	6a3b      	ldr	r3, [r7, #32]
 8020e10:	2300      	movs	r3, #0
 8020e12:	61fb      	str	r3, [r7, #28]
 8020e14:	4b4c      	ldr	r3, [pc, #304]	; (8020f48 <HAL_ETH_MspInit+0x178>)
 8020e16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8020e18:	4a4b      	ldr	r2, [pc, #300]	; (8020f48 <HAL_ETH_MspInit+0x178>)
 8020e1a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8020e1e:	6313      	str	r3, [r2, #48]	; 0x30
 8020e20:	4b49      	ldr	r3, [pc, #292]	; (8020f48 <HAL_ETH_MspInit+0x178>)
 8020e22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8020e24:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8020e28:	61fb      	str	r3, [r7, #28]
 8020e2a:	69fb      	ldr	r3, [r7, #28]
 8020e2c:	2300      	movs	r3, #0
 8020e2e:	61bb      	str	r3, [r7, #24]
 8020e30:	4b45      	ldr	r3, [pc, #276]	; (8020f48 <HAL_ETH_MspInit+0x178>)
 8020e32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8020e34:	4a44      	ldr	r2, [pc, #272]	; (8020f48 <HAL_ETH_MspInit+0x178>)
 8020e36:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8020e3a:	6313      	str	r3, [r2, #48]	; 0x30
 8020e3c:	4b42      	ldr	r3, [pc, #264]	; (8020f48 <HAL_ETH_MspInit+0x178>)
 8020e3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8020e40:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8020e44:	61bb      	str	r3, [r7, #24]
 8020e46:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8020e48:	2300      	movs	r3, #0
 8020e4a:	617b      	str	r3, [r7, #20]
 8020e4c:	4b3e      	ldr	r3, [pc, #248]	; (8020f48 <HAL_ETH_MspInit+0x178>)
 8020e4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8020e50:	4a3d      	ldr	r2, [pc, #244]	; (8020f48 <HAL_ETH_MspInit+0x178>)
 8020e52:	f043 0304 	orr.w	r3, r3, #4
 8020e56:	6313      	str	r3, [r2, #48]	; 0x30
 8020e58:	4b3b      	ldr	r3, [pc, #236]	; (8020f48 <HAL_ETH_MspInit+0x178>)
 8020e5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8020e5c:	f003 0304 	and.w	r3, r3, #4
 8020e60:	617b      	str	r3, [r7, #20]
 8020e62:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8020e64:	2300      	movs	r3, #0
 8020e66:	613b      	str	r3, [r7, #16]
 8020e68:	4b37      	ldr	r3, [pc, #220]	; (8020f48 <HAL_ETH_MspInit+0x178>)
 8020e6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8020e6c:	4a36      	ldr	r2, [pc, #216]	; (8020f48 <HAL_ETH_MspInit+0x178>)
 8020e6e:	f043 0301 	orr.w	r3, r3, #1
 8020e72:	6313      	str	r3, [r2, #48]	; 0x30
 8020e74:	4b34      	ldr	r3, [pc, #208]	; (8020f48 <HAL_ETH_MspInit+0x178>)
 8020e76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8020e78:	f003 0301 	and.w	r3, r3, #1
 8020e7c:	613b      	str	r3, [r7, #16]
 8020e7e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8020e80:	2300      	movs	r3, #0
 8020e82:	60fb      	str	r3, [r7, #12]
 8020e84:	4b30      	ldr	r3, [pc, #192]	; (8020f48 <HAL_ETH_MspInit+0x178>)
 8020e86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8020e88:	4a2f      	ldr	r2, [pc, #188]	; (8020f48 <HAL_ETH_MspInit+0x178>)
 8020e8a:	f043 0302 	orr.w	r3, r3, #2
 8020e8e:	6313      	str	r3, [r2, #48]	; 0x30
 8020e90:	4b2d      	ldr	r3, [pc, #180]	; (8020f48 <HAL_ETH_MspInit+0x178>)
 8020e92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8020e94:	f003 0302 	and.w	r3, r3, #2
 8020e98:	60fb      	str	r3, [r7, #12]
 8020e9a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8020e9c:	2300      	movs	r3, #0
 8020e9e:	60bb      	str	r3, [r7, #8]
 8020ea0:	4b29      	ldr	r3, [pc, #164]	; (8020f48 <HAL_ETH_MspInit+0x178>)
 8020ea2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8020ea4:	4a28      	ldr	r2, [pc, #160]	; (8020f48 <HAL_ETH_MspInit+0x178>)
 8020ea6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8020eaa:	6313      	str	r3, [r2, #48]	; 0x30
 8020eac:	4b26      	ldr	r3, [pc, #152]	; (8020f48 <HAL_ETH_MspInit+0x178>)
 8020eae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8020eb0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8020eb4:	60bb      	str	r3, [r7, #8]
 8020eb6:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0 
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8020eb8:	2332      	movs	r3, #50	; 0x32
 8020eba:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8020ebc:	2302      	movs	r3, #2
 8020ebe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8020ec0:	2300      	movs	r3, #0
 8020ec2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8020ec4:	2303      	movs	r3, #3
 8020ec6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8020ec8:	230b      	movs	r3, #11
 8020eca:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8020ecc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8020ed0:	4619      	mov	r1, r3
 8020ed2:	481e      	ldr	r0, [pc, #120]	; (8020f4c <HAL_ETH_MspInit+0x17c>)
 8020ed4:	f000 ffd4 	bl	8021e80 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8020ed8:	2386      	movs	r3, #134	; 0x86
 8020eda:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8020edc:	2302      	movs	r3, #2
 8020ede:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8020ee0:	2300      	movs	r3, #0
 8020ee2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8020ee4:	2303      	movs	r3, #3
 8020ee6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8020ee8:	230b      	movs	r3, #11
 8020eea:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8020eec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8020ef0:	4619      	mov	r1, r3
 8020ef2:	4817      	ldr	r0, [pc, #92]	; (8020f50 <HAL_ETH_MspInit+0x180>)
 8020ef4:	f000 ffc4 	bl	8021e80 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8020ef8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8020efc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8020efe:	2302      	movs	r3, #2
 8020f00:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8020f02:	2300      	movs	r3, #0
 8020f04:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8020f06:	2303      	movs	r3, #3
 8020f08:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8020f0a:	230b      	movs	r3, #11
 8020f0c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8020f0e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8020f12:	4619      	mov	r1, r3
 8020f14:	480f      	ldr	r0, [pc, #60]	; (8020f54 <HAL_ETH_MspInit+0x184>)
 8020f16:	f000 ffb3 	bl	8021e80 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8020f1a:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8020f1e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8020f20:	2302      	movs	r3, #2
 8020f22:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8020f24:	2300      	movs	r3, #0
 8020f26:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8020f28:	2303      	movs	r3, #3
 8020f2a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8020f2c:	230b      	movs	r3, #11
 8020f2e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8020f30:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8020f34:	4619      	mov	r1, r3
 8020f36:	4808      	ldr	r0, [pc, #32]	; (8020f58 <HAL_ETH_MspInit+0x188>)
 8020f38:	f000 ffa2 	bl	8021e80 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8020f3c:	bf00      	nop
 8020f3e:	3738      	adds	r7, #56	; 0x38
 8020f40:	46bd      	mov	sp, r7
 8020f42:	bd80      	pop	{r7, pc}
 8020f44:	40028000 	.word	0x40028000
 8020f48:	40023800 	.word	0x40023800
 8020f4c:	40020800 	.word	0x40020800
 8020f50:	40020000 	.word	0x40020000
 8020f54:	40020400 	.word	0x40020400
 8020f58:	40021800 	.word	0x40021800

08020f5c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8020f5c:	b580      	push	{r7, lr}
 8020f5e:	b08a      	sub	sp, #40	; 0x28
 8020f60:	af00      	add	r7, sp, #0
 8020f62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8020f64:	f107 0314 	add.w	r3, r7, #20
 8020f68:	2200      	movs	r2, #0
 8020f6a:	601a      	str	r2, [r3, #0]
 8020f6c:	605a      	str	r2, [r3, #4]
 8020f6e:	609a      	str	r2, [r3, #8]
 8020f70:	60da      	str	r2, [r3, #12]
 8020f72:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8020f74:	687b      	ldr	r3, [r7, #4]
 8020f76:	681b      	ldr	r3, [r3, #0]
 8020f78:	4a19      	ldr	r2, [pc, #100]	; (8020fe0 <HAL_UART_MspInit+0x84>)
 8020f7a:	4293      	cmp	r3, r2
 8020f7c:	d12c      	bne.n	8020fd8 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8020f7e:	2300      	movs	r3, #0
 8020f80:	613b      	str	r3, [r7, #16]
 8020f82:	4b18      	ldr	r3, [pc, #96]	; (8020fe4 <HAL_UART_MspInit+0x88>)
 8020f84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8020f86:	4a17      	ldr	r2, [pc, #92]	; (8020fe4 <HAL_UART_MspInit+0x88>)
 8020f88:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8020f8c:	6413      	str	r3, [r2, #64]	; 0x40
 8020f8e:	4b15      	ldr	r3, [pc, #84]	; (8020fe4 <HAL_UART_MspInit+0x88>)
 8020f90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8020f92:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8020f96:	613b      	str	r3, [r7, #16]
 8020f98:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8020f9a:	2300      	movs	r3, #0
 8020f9c:	60fb      	str	r3, [r7, #12]
 8020f9e:	4b11      	ldr	r3, [pc, #68]	; (8020fe4 <HAL_UART_MspInit+0x88>)
 8020fa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8020fa2:	4a10      	ldr	r2, [pc, #64]	; (8020fe4 <HAL_UART_MspInit+0x88>)
 8020fa4:	f043 0308 	orr.w	r3, r3, #8
 8020fa8:	6313      	str	r3, [r2, #48]	; 0x30
 8020faa:	4b0e      	ldr	r3, [pc, #56]	; (8020fe4 <HAL_UART_MspInit+0x88>)
 8020fac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8020fae:	f003 0308 	and.w	r3, r3, #8
 8020fb2:	60fb      	str	r3, [r7, #12]
 8020fb4:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration    
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX 
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8020fb6:	f44f 7340 	mov.w	r3, #768	; 0x300
 8020fba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8020fbc:	2302      	movs	r3, #2
 8020fbe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8020fc0:	2300      	movs	r3, #0
 8020fc2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8020fc4:	2303      	movs	r3, #3
 8020fc6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8020fc8:	2307      	movs	r3, #7
 8020fca:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8020fcc:	f107 0314 	add.w	r3, r7, #20
 8020fd0:	4619      	mov	r1, r3
 8020fd2:	4805      	ldr	r0, [pc, #20]	; (8020fe8 <HAL_UART_MspInit+0x8c>)
 8020fd4:	f000 ff54 	bl	8021e80 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8020fd8:	bf00      	nop
 8020fda:	3728      	adds	r7, #40	; 0x28
 8020fdc:	46bd      	mov	sp, r7
 8020fde:	bd80      	pop	{r7, pc}
 8020fe0:	40004800 	.word	0x40004800
 8020fe4:	40023800 	.word	0x40023800
 8020fe8:	40020c00 	.word	0x40020c00

08020fec <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8020fec:	b580      	push	{r7, lr}
 8020fee:	b08a      	sub	sp, #40	; 0x28
 8020ff0:	af00      	add	r7, sp, #0
 8020ff2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8020ff4:	f107 0314 	add.w	r3, r7, #20
 8020ff8:	2200      	movs	r2, #0
 8020ffa:	601a      	str	r2, [r3, #0]
 8020ffc:	605a      	str	r2, [r3, #4]
 8020ffe:	609a      	str	r2, [r3, #8]
 8021000:	60da      	str	r2, [r3, #12]
 8021002:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8021004:	687b      	ldr	r3, [r7, #4]
 8021006:	681b      	ldr	r3, [r3, #0]
 8021008:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 802100c:	d13f      	bne.n	802108e <HAL_PCD_MspInit+0xa2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 802100e:	2300      	movs	r3, #0
 8021010:	613b      	str	r3, [r7, #16]
 8021012:	4b21      	ldr	r3, [pc, #132]	; (8021098 <HAL_PCD_MspInit+0xac>)
 8021014:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8021016:	4a20      	ldr	r2, [pc, #128]	; (8021098 <HAL_PCD_MspInit+0xac>)
 8021018:	f043 0301 	orr.w	r3, r3, #1
 802101c:	6313      	str	r3, [r2, #48]	; 0x30
 802101e:	4b1e      	ldr	r3, [pc, #120]	; (8021098 <HAL_PCD_MspInit+0xac>)
 8021020:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8021022:	f003 0301 	and.w	r3, r3, #1
 8021026:	613b      	str	r3, [r7, #16]
 8021028:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 802102a:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 802102e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8021030:	2302      	movs	r3, #2
 8021032:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8021034:	2300      	movs	r3, #0
 8021036:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8021038:	2303      	movs	r3, #3
 802103a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 802103c:	230a      	movs	r3, #10
 802103e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8021040:	f107 0314 	add.w	r3, r7, #20
 8021044:	4619      	mov	r1, r3
 8021046:	4815      	ldr	r0, [pc, #84]	; (802109c <HAL_PCD_MspInit+0xb0>)
 8021048:	f000 ff1a 	bl	8021e80 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 802104c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8021050:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8021052:	2300      	movs	r3, #0
 8021054:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8021056:	2300      	movs	r3, #0
 8021058:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 802105a:	f107 0314 	add.w	r3, r7, #20
 802105e:	4619      	mov	r1, r3
 8021060:	480e      	ldr	r0, [pc, #56]	; (802109c <HAL_PCD_MspInit+0xb0>)
 8021062:	f000 ff0d 	bl	8021e80 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8021066:	4b0c      	ldr	r3, [pc, #48]	; (8021098 <HAL_PCD_MspInit+0xac>)
 8021068:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 802106a:	4a0b      	ldr	r2, [pc, #44]	; (8021098 <HAL_PCD_MspInit+0xac>)
 802106c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8021070:	6353      	str	r3, [r2, #52]	; 0x34
 8021072:	2300      	movs	r3, #0
 8021074:	60fb      	str	r3, [r7, #12]
 8021076:	4b08      	ldr	r3, [pc, #32]	; (8021098 <HAL_PCD_MspInit+0xac>)
 8021078:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 802107a:	4a07      	ldr	r2, [pc, #28]	; (8021098 <HAL_PCD_MspInit+0xac>)
 802107c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8021080:	6453      	str	r3, [r2, #68]	; 0x44
 8021082:	4b05      	ldr	r3, [pc, #20]	; (8021098 <HAL_PCD_MspInit+0xac>)
 8021084:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8021086:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 802108a:	60fb      	str	r3, [r7, #12]
 802108c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 802108e:	bf00      	nop
 8021090:	3728      	adds	r7, #40	; 0x28
 8021092:	46bd      	mov	sp, r7
 8021094:	bd80      	pop	{r7, pc}
 8021096:	bf00      	nop
 8021098:	40023800 	.word	0x40023800
 802109c:	40020000 	.word	0x40020000

080210a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80210a0:	b480      	push	{r7}
 80210a2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80210a4:	bf00      	nop
 80210a6:	46bd      	mov	sp, r7
 80210a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80210ac:	4770      	bx	lr

080210ae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80210ae:	b480      	push	{r7}
 80210b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80210b2:	e7fe      	b.n	80210b2 <HardFault_Handler+0x4>

080210b4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80210b4:	b480      	push	{r7}
 80210b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80210b8:	e7fe      	b.n	80210b8 <MemManage_Handler+0x4>

080210ba <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80210ba:	b480      	push	{r7}
 80210bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80210be:	e7fe      	b.n	80210be <BusFault_Handler+0x4>

080210c0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80210c0:	b480      	push	{r7}
 80210c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80210c4:	e7fe      	b.n	80210c4 <UsageFault_Handler+0x4>

080210c6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80210c6:	b480      	push	{r7}
 80210c8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80210ca:	bf00      	nop
 80210cc:	46bd      	mov	sp, r7
 80210ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80210d2:	4770      	bx	lr

080210d4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80210d4:	b480      	push	{r7}
 80210d6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80210d8:	bf00      	nop
 80210da:	46bd      	mov	sp, r7
 80210dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80210e0:	4770      	bx	lr

080210e2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80210e2:	b480      	push	{r7}
 80210e4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80210e6:	bf00      	nop
 80210e8:	46bd      	mov	sp, r7
 80210ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80210ee:	4770      	bx	lr

080210f0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80210f0:	b580      	push	{r7, lr}
 80210f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80210f4:	f000 f92e 	bl	8021354 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80210f8:	bf00      	nop
 80210fa:	bd80      	pop	{r7, pc}

080210fc <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80210fc:	b580      	push	{r7, lr}
 80210fe:	b086      	sub	sp, #24
 8021100:	af00      	add	r7, sp, #0
 8021102:	60f8      	str	r0, [r7, #12]
 8021104:	60b9      	str	r1, [r7, #8]
 8021106:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8021108:	2300      	movs	r3, #0
 802110a:	617b      	str	r3, [r7, #20]
 802110c:	e00a      	b.n	8021124 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 802110e:	f3af 8000 	nop.w
 8021112:	4601      	mov	r1, r0
 8021114:	68bb      	ldr	r3, [r7, #8]
 8021116:	1c5a      	adds	r2, r3, #1
 8021118:	60ba      	str	r2, [r7, #8]
 802111a:	b2ca      	uxtb	r2, r1
 802111c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 802111e:	697b      	ldr	r3, [r7, #20]
 8021120:	3301      	adds	r3, #1
 8021122:	617b      	str	r3, [r7, #20]
 8021124:	697a      	ldr	r2, [r7, #20]
 8021126:	687b      	ldr	r3, [r7, #4]
 8021128:	429a      	cmp	r2, r3
 802112a:	dbf0      	blt.n	802110e <_read+0x12>
	}

return len;
 802112c:	687b      	ldr	r3, [r7, #4]
}
 802112e:	4618      	mov	r0, r3
 8021130:	3718      	adds	r7, #24
 8021132:	46bd      	mov	sp, r7
 8021134:	bd80      	pop	{r7, pc}

08021136 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8021136:	b580      	push	{r7, lr}
 8021138:	b086      	sub	sp, #24
 802113a:	af00      	add	r7, sp, #0
 802113c:	60f8      	str	r0, [r7, #12]
 802113e:	60b9      	str	r1, [r7, #8]
 8021140:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8021142:	2300      	movs	r3, #0
 8021144:	617b      	str	r3, [r7, #20]
 8021146:	e009      	b.n	802115c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8021148:	68bb      	ldr	r3, [r7, #8]
 802114a:	1c5a      	adds	r2, r3, #1
 802114c:	60ba      	str	r2, [r7, #8]
 802114e:	781b      	ldrb	r3, [r3, #0]
 8021150:	4618      	mov	r0, r3
 8021152:	f7ff fc1d 	bl	8020990 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8021156:	697b      	ldr	r3, [r7, #20]
 8021158:	3301      	adds	r3, #1
 802115a:	617b      	str	r3, [r7, #20]
 802115c:	697a      	ldr	r2, [r7, #20]
 802115e:	687b      	ldr	r3, [r7, #4]
 8021160:	429a      	cmp	r2, r3
 8021162:	dbf1      	blt.n	8021148 <_write+0x12>
	}
	return len;
 8021164:	687b      	ldr	r3, [r7, #4]
}
 8021166:	4618      	mov	r0, r3
 8021168:	3718      	adds	r7, #24
 802116a:	46bd      	mov	sp, r7
 802116c:	bd80      	pop	{r7, pc}

0802116e <_close>:

int _close(int file)
{
 802116e:	b480      	push	{r7}
 8021170:	b083      	sub	sp, #12
 8021172:	af00      	add	r7, sp, #0
 8021174:	6078      	str	r0, [r7, #4]
	return -1;
 8021176:	f04f 33ff 	mov.w	r3, #4294967295
}
 802117a:	4618      	mov	r0, r3
 802117c:	370c      	adds	r7, #12
 802117e:	46bd      	mov	sp, r7
 8021180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021184:	4770      	bx	lr

08021186 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8021186:	b480      	push	{r7}
 8021188:	b083      	sub	sp, #12
 802118a:	af00      	add	r7, sp, #0
 802118c:	6078      	str	r0, [r7, #4]
 802118e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8021190:	683b      	ldr	r3, [r7, #0]
 8021192:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8021196:	605a      	str	r2, [r3, #4]
	return 0;
 8021198:	2300      	movs	r3, #0
}
 802119a:	4618      	mov	r0, r3
 802119c:	370c      	adds	r7, #12
 802119e:	46bd      	mov	sp, r7
 80211a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80211a4:	4770      	bx	lr

080211a6 <_isatty>:

int _isatty(int file)
{
 80211a6:	b480      	push	{r7}
 80211a8:	b083      	sub	sp, #12
 80211aa:	af00      	add	r7, sp, #0
 80211ac:	6078      	str	r0, [r7, #4]
	return 1;
 80211ae:	2301      	movs	r3, #1
}
 80211b0:	4618      	mov	r0, r3
 80211b2:	370c      	adds	r7, #12
 80211b4:	46bd      	mov	sp, r7
 80211b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80211ba:	4770      	bx	lr

080211bc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80211bc:	b480      	push	{r7}
 80211be:	b085      	sub	sp, #20
 80211c0:	af00      	add	r7, sp, #0
 80211c2:	60f8      	str	r0, [r7, #12]
 80211c4:	60b9      	str	r1, [r7, #8]
 80211c6:	607a      	str	r2, [r7, #4]
	return 0;
 80211c8:	2300      	movs	r3, #0
}
 80211ca:	4618      	mov	r0, r3
 80211cc:	3714      	adds	r7, #20
 80211ce:	46bd      	mov	sp, r7
 80211d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80211d4:	4770      	bx	lr
	...

080211d8 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80211d8:	b580      	push	{r7, lr}
 80211da:	b084      	sub	sp, #16
 80211dc:	af00      	add	r7, sp, #0
 80211de:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80211e0:	4b11      	ldr	r3, [pc, #68]	; (8021228 <_sbrk+0x50>)
 80211e2:	681b      	ldr	r3, [r3, #0]
 80211e4:	2b00      	cmp	r3, #0
 80211e6:	d102      	bne.n	80211ee <_sbrk+0x16>
		heap_end = &end;
 80211e8:	4b0f      	ldr	r3, [pc, #60]	; (8021228 <_sbrk+0x50>)
 80211ea:	4a10      	ldr	r2, [pc, #64]	; (802122c <_sbrk+0x54>)
 80211ec:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80211ee:	4b0e      	ldr	r3, [pc, #56]	; (8021228 <_sbrk+0x50>)
 80211f0:	681b      	ldr	r3, [r3, #0]
 80211f2:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80211f4:	4b0c      	ldr	r3, [pc, #48]	; (8021228 <_sbrk+0x50>)
 80211f6:	681a      	ldr	r2, [r3, #0]
 80211f8:	687b      	ldr	r3, [r7, #4]
 80211fa:	4413      	add	r3, r2
 80211fc:	466a      	mov	r2, sp
 80211fe:	4293      	cmp	r3, r2
 8021200:	d907      	bls.n	8021212 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8021202:	f002 fce1 	bl	8023bc8 <__errno>
 8021206:	4602      	mov	r2, r0
 8021208:	230c      	movs	r3, #12
 802120a:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 802120c:	f04f 33ff 	mov.w	r3, #4294967295
 8021210:	e006      	b.n	8021220 <_sbrk+0x48>
	}

	heap_end += incr;
 8021212:	4b05      	ldr	r3, [pc, #20]	; (8021228 <_sbrk+0x50>)
 8021214:	681a      	ldr	r2, [r3, #0]
 8021216:	687b      	ldr	r3, [r7, #4]
 8021218:	4413      	add	r3, r2
 802121a:	4a03      	ldr	r2, [pc, #12]	; (8021228 <_sbrk+0x50>)
 802121c:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 802121e:	68fb      	ldr	r3, [r7, #12]
}
 8021220:	4618      	mov	r0, r3
 8021222:	3710      	adds	r7, #16
 8021224:	46bd      	mov	sp, r7
 8021226:	bd80      	pop	{r7, pc}
 8021228:	2000008c 	.word	0x2000008c
 802122c:	20000530 	.word	0x20000530

08021230 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8021230:	b480      	push	{r7}
 8021232:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8021234:	4b07      	ldr	r3, [pc, #28]	; (8021254 <SystemInit+0x24>)
 8021236:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 802123a:	4a06      	ldr	r2, [pc, #24]	; (8021254 <SystemInit+0x24>)
 802123c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8021240:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = 0x08020400; /* Vector Table Relocation in Internal FLASH */
 8021244:	4b03      	ldr	r3, [pc, #12]	; (8021254 <SystemInit+0x24>)
 8021246:	4a04      	ldr	r2, [pc, #16]	; (8021258 <SystemInit+0x28>)
 8021248:	609a      	str	r2, [r3, #8]
#endif
}
 802124a:	bf00      	nop
 802124c:	46bd      	mov	sp, r7
 802124e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021252:	4770      	bx	lr
 8021254:	e000ed00 	.word	0xe000ed00
 8021258:	08020400 	.word	0x08020400

0802125c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 802125c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8021294 <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8021260:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8021262:	e003      	b.n	802126c <LoopCopyDataInit>

08021264 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8021264:	4b0c      	ldr	r3, [pc, #48]	; (8021298 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8021266:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8021268:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 802126a:	3104      	adds	r1, #4

0802126c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 802126c:	480b      	ldr	r0, [pc, #44]	; (802129c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 802126e:	4b0c      	ldr	r3, [pc, #48]	; (80212a0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8021270:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8021272:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8021274:	d3f6      	bcc.n	8021264 <CopyDataInit>
  ldr  r2, =_sbss
 8021276:	4a0b      	ldr	r2, [pc, #44]	; (80212a4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8021278:	e002      	b.n	8021280 <LoopFillZerobss>

0802127a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 802127a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 802127c:	f842 3b04 	str.w	r3, [r2], #4

08021280 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8021280:	4b09      	ldr	r3, [pc, #36]	; (80212a8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8021282:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8021284:	d3f9      	bcc.n	802127a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8021286:	f7ff ffd3 	bl	8021230 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 802128a:	f002 fca3 	bl	8023bd4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 802128e:	f7ff fb91 	bl	80209b4 <main>
  bx  lr    
 8021292:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8021294:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 8021298:	08024af4 	.word	0x08024af4
  ldr  r0, =_sdata
 802129c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80212a0:	20000070 	.word	0x20000070
  ldr  r2, =_sbss
 80212a4:	20000070 	.word	0x20000070
  ldr  r3, = _ebss
 80212a8:	20000530 	.word	0x20000530

080212ac <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80212ac:	e7fe      	b.n	80212ac <ADC_IRQHandler>
	...

080212b0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80212b0:	b580      	push	{r7, lr}
 80212b2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80212b4:	4b0e      	ldr	r3, [pc, #56]	; (80212f0 <HAL_Init+0x40>)
 80212b6:	681b      	ldr	r3, [r3, #0]
 80212b8:	4a0d      	ldr	r2, [pc, #52]	; (80212f0 <HAL_Init+0x40>)
 80212ba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80212be:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80212c0:	4b0b      	ldr	r3, [pc, #44]	; (80212f0 <HAL_Init+0x40>)
 80212c2:	681b      	ldr	r3, [r3, #0]
 80212c4:	4a0a      	ldr	r2, [pc, #40]	; (80212f0 <HAL_Init+0x40>)
 80212c6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80212ca:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80212cc:	4b08      	ldr	r3, [pc, #32]	; (80212f0 <HAL_Init+0x40>)
 80212ce:	681b      	ldr	r3, [r3, #0]
 80212d0:	4a07      	ldr	r2, [pc, #28]	; (80212f0 <HAL_Init+0x40>)
 80212d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80212d6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80212d8:	2003      	movs	r0, #3
 80212da:	f000 f92f 	bl	802153c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80212de:	2000      	movs	r0, #0
 80212e0:	f000 f808 	bl	80212f4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80212e4:	f7ff fd4c 	bl	8020d80 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80212e8:	2300      	movs	r3, #0
}
 80212ea:	4618      	mov	r0, r3
 80212ec:	bd80      	pop	{r7, pc}
 80212ee:	bf00      	nop
 80212f0:	40023c00 	.word	0x40023c00

080212f4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80212f4:	b580      	push	{r7, lr}
 80212f6:	b082      	sub	sp, #8
 80212f8:	af00      	add	r7, sp, #0
 80212fa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80212fc:	4b12      	ldr	r3, [pc, #72]	; (8021348 <HAL_InitTick+0x54>)
 80212fe:	681a      	ldr	r2, [r3, #0]
 8021300:	4b12      	ldr	r3, [pc, #72]	; (802134c <HAL_InitTick+0x58>)
 8021302:	781b      	ldrb	r3, [r3, #0]
 8021304:	4619      	mov	r1, r3
 8021306:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 802130a:	fbb3 f3f1 	udiv	r3, r3, r1
 802130e:	fbb2 f3f3 	udiv	r3, r2, r3
 8021312:	4618      	mov	r0, r3
 8021314:	f000 f939 	bl	802158a <HAL_SYSTICK_Config>
 8021318:	4603      	mov	r3, r0
 802131a:	2b00      	cmp	r3, #0
 802131c:	d001      	beq.n	8021322 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 802131e:	2301      	movs	r3, #1
 8021320:	e00e      	b.n	8021340 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8021322:	687b      	ldr	r3, [r7, #4]
 8021324:	2b0f      	cmp	r3, #15
 8021326:	d80a      	bhi.n	802133e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8021328:	2200      	movs	r2, #0
 802132a:	6879      	ldr	r1, [r7, #4]
 802132c:	f04f 30ff 	mov.w	r0, #4294967295
 8021330:	f000 f90f 	bl	8021552 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8021334:	4a06      	ldr	r2, [pc, #24]	; (8021350 <HAL_InitTick+0x5c>)
 8021336:	687b      	ldr	r3, [r7, #4]
 8021338:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 802133a:	2300      	movs	r3, #0
 802133c:	e000      	b.n	8021340 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 802133e:	2301      	movs	r3, #1
}
 8021340:	4618      	mov	r0, r3
 8021342:	3708      	adds	r7, #8
 8021344:	46bd      	mov	sp, r7
 8021346:	bd80      	pop	{r7, pc}
 8021348:	20000000 	.word	0x20000000
 802134c:	20000008 	.word	0x20000008
 8021350:	20000004 	.word	0x20000004

08021354 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8021354:	b480      	push	{r7}
 8021356:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8021358:	4b06      	ldr	r3, [pc, #24]	; (8021374 <HAL_IncTick+0x20>)
 802135a:	781b      	ldrb	r3, [r3, #0]
 802135c:	461a      	mov	r2, r3
 802135e:	4b06      	ldr	r3, [pc, #24]	; (8021378 <HAL_IncTick+0x24>)
 8021360:	681b      	ldr	r3, [r3, #0]
 8021362:	4413      	add	r3, r2
 8021364:	4a04      	ldr	r2, [pc, #16]	; (8021378 <HAL_IncTick+0x24>)
 8021366:	6013      	str	r3, [r2, #0]
}
 8021368:	bf00      	nop
 802136a:	46bd      	mov	sp, r7
 802136c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021370:	4770      	bx	lr
 8021372:	bf00      	nop
 8021374:	20000008 	.word	0x20000008
 8021378:	20000528 	.word	0x20000528

0802137c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 802137c:	b480      	push	{r7}
 802137e:	af00      	add	r7, sp, #0
  return uwTick;
 8021380:	4b03      	ldr	r3, [pc, #12]	; (8021390 <HAL_GetTick+0x14>)
 8021382:	681b      	ldr	r3, [r3, #0]
}
 8021384:	4618      	mov	r0, r3
 8021386:	46bd      	mov	sp, r7
 8021388:	f85d 7b04 	ldr.w	r7, [sp], #4
 802138c:	4770      	bx	lr
 802138e:	bf00      	nop
 8021390:	20000528 	.word	0x20000528

08021394 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8021394:	b580      	push	{r7, lr}
 8021396:	b084      	sub	sp, #16
 8021398:	af00      	add	r7, sp, #0
 802139a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 802139c:	f7ff ffee 	bl	802137c <HAL_GetTick>
 80213a0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80213a2:	687b      	ldr	r3, [r7, #4]
 80213a4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80213a6:	68fb      	ldr	r3, [r7, #12]
 80213a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80213ac:	d005      	beq.n	80213ba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80213ae:	4b09      	ldr	r3, [pc, #36]	; (80213d4 <HAL_Delay+0x40>)
 80213b0:	781b      	ldrb	r3, [r3, #0]
 80213b2:	461a      	mov	r2, r3
 80213b4:	68fb      	ldr	r3, [r7, #12]
 80213b6:	4413      	add	r3, r2
 80213b8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80213ba:	bf00      	nop
 80213bc:	f7ff ffde 	bl	802137c <HAL_GetTick>
 80213c0:	4602      	mov	r2, r0
 80213c2:	68bb      	ldr	r3, [r7, #8]
 80213c4:	1ad3      	subs	r3, r2, r3
 80213c6:	68fa      	ldr	r2, [r7, #12]
 80213c8:	429a      	cmp	r2, r3
 80213ca:	d8f7      	bhi.n	80213bc <HAL_Delay+0x28>
  {
  }
}
 80213cc:	bf00      	nop
 80213ce:	3710      	adds	r7, #16
 80213d0:	46bd      	mov	sp, r7
 80213d2:	bd80      	pop	{r7, pc}
 80213d4:	20000008 	.word	0x20000008

080213d8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80213d8:	b480      	push	{r7}
 80213da:	b085      	sub	sp, #20
 80213dc:	af00      	add	r7, sp, #0
 80213de:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80213e0:	687b      	ldr	r3, [r7, #4]
 80213e2:	f003 0307 	and.w	r3, r3, #7
 80213e6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80213e8:	4b0c      	ldr	r3, [pc, #48]	; (802141c <__NVIC_SetPriorityGrouping+0x44>)
 80213ea:	68db      	ldr	r3, [r3, #12]
 80213ec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80213ee:	68ba      	ldr	r2, [r7, #8]
 80213f0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80213f4:	4013      	ands	r3, r2
 80213f6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80213f8:	68fb      	ldr	r3, [r7, #12]
 80213fa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80213fc:	68bb      	ldr	r3, [r7, #8]
 80213fe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8021400:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8021404:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8021408:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 802140a:	4a04      	ldr	r2, [pc, #16]	; (802141c <__NVIC_SetPriorityGrouping+0x44>)
 802140c:	68bb      	ldr	r3, [r7, #8]
 802140e:	60d3      	str	r3, [r2, #12]
}
 8021410:	bf00      	nop
 8021412:	3714      	adds	r7, #20
 8021414:	46bd      	mov	sp, r7
 8021416:	f85d 7b04 	ldr.w	r7, [sp], #4
 802141a:	4770      	bx	lr
 802141c:	e000ed00 	.word	0xe000ed00

08021420 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8021420:	b480      	push	{r7}
 8021422:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8021424:	4b04      	ldr	r3, [pc, #16]	; (8021438 <__NVIC_GetPriorityGrouping+0x18>)
 8021426:	68db      	ldr	r3, [r3, #12]
 8021428:	0a1b      	lsrs	r3, r3, #8
 802142a:	f003 0307 	and.w	r3, r3, #7
}
 802142e:	4618      	mov	r0, r3
 8021430:	46bd      	mov	sp, r7
 8021432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021436:	4770      	bx	lr
 8021438:	e000ed00 	.word	0xe000ed00

0802143c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 802143c:	b480      	push	{r7}
 802143e:	b083      	sub	sp, #12
 8021440:	af00      	add	r7, sp, #0
 8021442:	4603      	mov	r3, r0
 8021444:	6039      	str	r1, [r7, #0]
 8021446:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8021448:	f997 3007 	ldrsb.w	r3, [r7, #7]
 802144c:	2b00      	cmp	r3, #0
 802144e:	db0a      	blt.n	8021466 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8021450:	683b      	ldr	r3, [r7, #0]
 8021452:	b2da      	uxtb	r2, r3
 8021454:	490c      	ldr	r1, [pc, #48]	; (8021488 <__NVIC_SetPriority+0x4c>)
 8021456:	f997 3007 	ldrsb.w	r3, [r7, #7]
 802145a:	0112      	lsls	r2, r2, #4
 802145c:	b2d2      	uxtb	r2, r2
 802145e:	440b      	add	r3, r1
 8021460:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8021464:	e00a      	b.n	802147c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8021466:	683b      	ldr	r3, [r7, #0]
 8021468:	b2da      	uxtb	r2, r3
 802146a:	4908      	ldr	r1, [pc, #32]	; (802148c <__NVIC_SetPriority+0x50>)
 802146c:	79fb      	ldrb	r3, [r7, #7]
 802146e:	f003 030f 	and.w	r3, r3, #15
 8021472:	3b04      	subs	r3, #4
 8021474:	0112      	lsls	r2, r2, #4
 8021476:	b2d2      	uxtb	r2, r2
 8021478:	440b      	add	r3, r1
 802147a:	761a      	strb	r2, [r3, #24]
}
 802147c:	bf00      	nop
 802147e:	370c      	adds	r7, #12
 8021480:	46bd      	mov	sp, r7
 8021482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021486:	4770      	bx	lr
 8021488:	e000e100 	.word	0xe000e100
 802148c:	e000ed00 	.word	0xe000ed00

08021490 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8021490:	b480      	push	{r7}
 8021492:	b089      	sub	sp, #36	; 0x24
 8021494:	af00      	add	r7, sp, #0
 8021496:	60f8      	str	r0, [r7, #12]
 8021498:	60b9      	str	r1, [r7, #8]
 802149a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 802149c:	68fb      	ldr	r3, [r7, #12]
 802149e:	f003 0307 	and.w	r3, r3, #7
 80214a2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80214a4:	69fb      	ldr	r3, [r7, #28]
 80214a6:	f1c3 0307 	rsb	r3, r3, #7
 80214aa:	2b04      	cmp	r3, #4
 80214ac:	bf28      	it	cs
 80214ae:	2304      	movcs	r3, #4
 80214b0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80214b2:	69fb      	ldr	r3, [r7, #28]
 80214b4:	3304      	adds	r3, #4
 80214b6:	2b06      	cmp	r3, #6
 80214b8:	d902      	bls.n	80214c0 <NVIC_EncodePriority+0x30>
 80214ba:	69fb      	ldr	r3, [r7, #28]
 80214bc:	3b03      	subs	r3, #3
 80214be:	e000      	b.n	80214c2 <NVIC_EncodePriority+0x32>
 80214c0:	2300      	movs	r3, #0
 80214c2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80214c4:	f04f 32ff 	mov.w	r2, #4294967295
 80214c8:	69bb      	ldr	r3, [r7, #24]
 80214ca:	fa02 f303 	lsl.w	r3, r2, r3
 80214ce:	43da      	mvns	r2, r3
 80214d0:	68bb      	ldr	r3, [r7, #8]
 80214d2:	401a      	ands	r2, r3
 80214d4:	697b      	ldr	r3, [r7, #20]
 80214d6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80214d8:	f04f 31ff 	mov.w	r1, #4294967295
 80214dc:	697b      	ldr	r3, [r7, #20]
 80214de:	fa01 f303 	lsl.w	r3, r1, r3
 80214e2:	43d9      	mvns	r1, r3
 80214e4:	687b      	ldr	r3, [r7, #4]
 80214e6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80214e8:	4313      	orrs	r3, r2
         );
}
 80214ea:	4618      	mov	r0, r3
 80214ec:	3724      	adds	r7, #36	; 0x24
 80214ee:	46bd      	mov	sp, r7
 80214f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80214f4:	4770      	bx	lr
	...

080214f8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80214f8:	b580      	push	{r7, lr}
 80214fa:	b082      	sub	sp, #8
 80214fc:	af00      	add	r7, sp, #0
 80214fe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8021500:	687b      	ldr	r3, [r7, #4]
 8021502:	3b01      	subs	r3, #1
 8021504:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8021508:	d301      	bcc.n	802150e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 802150a:	2301      	movs	r3, #1
 802150c:	e00f      	b.n	802152e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 802150e:	4a0a      	ldr	r2, [pc, #40]	; (8021538 <SysTick_Config+0x40>)
 8021510:	687b      	ldr	r3, [r7, #4]
 8021512:	3b01      	subs	r3, #1
 8021514:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8021516:	210f      	movs	r1, #15
 8021518:	f04f 30ff 	mov.w	r0, #4294967295
 802151c:	f7ff ff8e 	bl	802143c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8021520:	4b05      	ldr	r3, [pc, #20]	; (8021538 <SysTick_Config+0x40>)
 8021522:	2200      	movs	r2, #0
 8021524:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8021526:	4b04      	ldr	r3, [pc, #16]	; (8021538 <SysTick_Config+0x40>)
 8021528:	2207      	movs	r2, #7
 802152a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 802152c:	2300      	movs	r3, #0
}
 802152e:	4618      	mov	r0, r3
 8021530:	3708      	adds	r7, #8
 8021532:	46bd      	mov	sp, r7
 8021534:	bd80      	pop	{r7, pc}
 8021536:	bf00      	nop
 8021538:	e000e010 	.word	0xe000e010

0802153c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 802153c:	b580      	push	{r7, lr}
 802153e:	b082      	sub	sp, #8
 8021540:	af00      	add	r7, sp, #0
 8021542:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8021544:	6878      	ldr	r0, [r7, #4]
 8021546:	f7ff ff47 	bl	80213d8 <__NVIC_SetPriorityGrouping>
}
 802154a:	bf00      	nop
 802154c:	3708      	adds	r7, #8
 802154e:	46bd      	mov	sp, r7
 8021550:	bd80      	pop	{r7, pc}

08021552 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8021552:	b580      	push	{r7, lr}
 8021554:	b086      	sub	sp, #24
 8021556:	af00      	add	r7, sp, #0
 8021558:	4603      	mov	r3, r0
 802155a:	60b9      	str	r1, [r7, #8]
 802155c:	607a      	str	r2, [r7, #4]
 802155e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8021560:	2300      	movs	r3, #0
 8021562:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8021564:	f7ff ff5c 	bl	8021420 <__NVIC_GetPriorityGrouping>
 8021568:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 802156a:	687a      	ldr	r2, [r7, #4]
 802156c:	68b9      	ldr	r1, [r7, #8]
 802156e:	6978      	ldr	r0, [r7, #20]
 8021570:	f7ff ff8e 	bl	8021490 <NVIC_EncodePriority>
 8021574:	4602      	mov	r2, r0
 8021576:	f997 300f 	ldrsb.w	r3, [r7, #15]
 802157a:	4611      	mov	r1, r2
 802157c:	4618      	mov	r0, r3
 802157e:	f7ff ff5d 	bl	802143c <__NVIC_SetPriority>
}
 8021582:	bf00      	nop
 8021584:	3718      	adds	r7, #24
 8021586:	46bd      	mov	sp, r7
 8021588:	bd80      	pop	{r7, pc}

0802158a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 802158a:	b580      	push	{r7, lr}
 802158c:	b082      	sub	sp, #8
 802158e:	af00      	add	r7, sp, #0
 8021590:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8021592:	6878      	ldr	r0, [r7, #4]
 8021594:	f7ff ffb0 	bl	80214f8 <SysTick_Config>
 8021598:	4603      	mov	r3, r0
}
 802159a:	4618      	mov	r0, r3
 802159c:	3708      	adds	r7, #8
 802159e:	46bd      	mov	sp, r7
 80215a0:	bd80      	pop	{r7, pc}
	...

080215a4 <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80215a4:	b580      	push	{r7, lr}
 80215a6:	b088      	sub	sp, #32
 80215a8:	af00      	add	r7, sp, #0
 80215aa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1 = 0U, phyreg = 0U;
 80215ac:	2300      	movs	r3, #0
 80215ae:	61fb      	str	r3, [r7, #28]
 80215b0:	2300      	movs	r3, #0
 80215b2:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000U;
 80215b4:	4baa      	ldr	r3, [pc, #680]	; (8021860 <HAL_ETH_Init+0x2bc>)
 80215b6:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0U;
 80215b8:	2300      	movs	r3, #0
 80215ba:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 80215bc:	2300      	movs	r3, #0
 80215be:	613b      	str	r3, [r7, #16]
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 80215c0:	687b      	ldr	r3, [r7, #4]
 80215c2:	2b00      	cmp	r3, #0
 80215c4:	d101      	bne.n	80215ca <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 80215c6:	2301      	movs	r3, #1
 80215c8:	e185      	b.n	80218d6 <HAL_ETH_Init+0x332>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
  
  if(heth->State == HAL_ETH_STATE_RESET)
 80215ca:	687b      	ldr	r3, [r7, #4]
 80215cc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80215d0:	b2db      	uxtb	r3, r3
 80215d2:	2b00      	cmp	r3, #0
 80215d4:	d106      	bne.n	80215e4 <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 80215d6:	687b      	ldr	r3, [r7, #4]
 80215d8:	2200      	movs	r2, #0
 80215da:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80215de:	6878      	ldr	r0, [r7, #4]
 80215e0:	f7ff fbf6 	bl	8020dd0 <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
  
  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80215e4:	2300      	movs	r3, #0
 80215e6:	60bb      	str	r3, [r7, #8]
 80215e8:	4b9e      	ldr	r3, [pc, #632]	; (8021864 <HAL_ETH_Init+0x2c0>)
 80215ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80215ec:	4a9d      	ldr	r2, [pc, #628]	; (8021864 <HAL_ETH_Init+0x2c0>)
 80215ee:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80215f2:	6453      	str	r3, [r2, #68]	; 0x44
 80215f4:	4b9b      	ldr	r3, [pc, #620]	; (8021864 <HAL_ETH_Init+0x2c0>)
 80215f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80215f8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80215fc:	60bb      	str	r3, [r7, #8]
 80215fe:	68bb      	ldr	r3, [r7, #8]
  
  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8021600:	4b99      	ldr	r3, [pc, #612]	; (8021868 <HAL_ETH_Init+0x2c4>)
 8021602:	685b      	ldr	r3, [r3, #4]
 8021604:	4a98      	ldr	r2, [pc, #608]	; (8021868 <HAL_ETH_Init+0x2c4>)
 8021606:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 802160a:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 802160c:	4b96      	ldr	r3, [pc, #600]	; (8021868 <HAL_ETH_Init+0x2c4>)
 802160e:	685a      	ldr	r2, [r3, #4]
 8021610:	687b      	ldr	r3, [r7, #4]
 8021612:	6a1b      	ldr	r3, [r3, #32]
 8021614:	4994      	ldr	r1, [pc, #592]	; (8021868 <HAL_ETH_Init+0x2c4>)
 8021616:	4313      	orrs	r3, r2
 8021618:	604b      	str	r3, [r1, #4]
  
  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 802161a:	687b      	ldr	r3, [r7, #4]
 802161c:	681b      	ldr	r3, [r3, #0]
 802161e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8021622:	681a      	ldr	r2, [r3, #0]
 8021624:	687b      	ldr	r3, [r7, #4]
 8021626:	681b      	ldr	r3, [r3, #0]
 8021628:	f042 0201 	orr.w	r2, r2, #1
 802162c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8021630:	601a      	str	r2, [r3, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8021632:	f7ff fea3 	bl	802137c <HAL_GetTick>
 8021636:	6178      	str	r0, [r7, #20]
  
  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8021638:	e011      	b.n	802165e <HAL_ETH_Init+0xba>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 802163a:	f7ff fe9f 	bl	802137c <HAL_GetTick>
 802163e:	4602      	mov	r2, r0
 8021640:	697b      	ldr	r3, [r7, #20]
 8021642:	1ad3      	subs	r3, r2, r3
 8021644:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8021648:	d909      	bls.n	802165e <HAL_ETH_Init+0xba>
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 802164a:	687b      	ldr	r3, [r7, #4]
 802164c:	2203      	movs	r2, #3
 802164e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8021652:	687b      	ldr	r3, [r7, #4]
 8021654:	2200      	movs	r2, #0
 8021656:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are  
         not available, please check your external PHY or the IO configuration */
      return HAL_TIMEOUT;
 802165a:	2303      	movs	r3, #3
 802165c:	e13b      	b.n	80218d6 <HAL_ETH_Init+0x332>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 802165e:	687b      	ldr	r3, [r7, #4]
 8021660:	681b      	ldr	r3, [r3, #0]
 8021662:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8021666:	681b      	ldr	r3, [r3, #0]
 8021668:	f003 0301 	and.w	r3, r3, #1
 802166c:	2b00      	cmp	r3, #0
 802166e:	d1e4      	bne.n	802163a <HAL_ETH_Init+0x96>
    }
  }
  
  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = (heth->Instance)->MACMIIAR;
 8021670:	687b      	ldr	r3, [r7, #4]
 8021672:	681b      	ldr	r3, [r3, #0]
 8021674:	691b      	ldr	r3, [r3, #16]
 8021676:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg1 &= ETH_MACMIIAR_CR_MASK;
 8021678:	69fb      	ldr	r3, [r7, #28]
 802167a:	f023 031c 	bic.w	r3, r3, #28
 802167e:	61fb      	str	r3, [r7, #28]
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8021680:	f001 fb0c 	bl	8022c9c <HAL_RCC_GetHCLKFreq>
 8021684:	61b8      	str	r0, [r7, #24]
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 8021686:	69bb      	ldr	r3, [r7, #24]
 8021688:	4a78      	ldr	r2, [pc, #480]	; (802186c <HAL_ETH_Init+0x2c8>)
 802168a:	4293      	cmp	r3, r2
 802168c:	d908      	bls.n	80216a0 <HAL_ETH_Init+0xfc>
 802168e:	69bb      	ldr	r3, [r7, #24]
 8021690:	4a77      	ldr	r2, [pc, #476]	; (8021870 <HAL_ETH_Init+0x2cc>)
 8021692:	4293      	cmp	r3, r2
 8021694:	d804      	bhi.n	80216a0 <HAL_ETH_Init+0xfc>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8021696:	69fb      	ldr	r3, [r7, #28]
 8021698:	f043 0308 	orr.w	r3, r3, #8
 802169c:	61fb      	str	r3, [r7, #28]
 802169e:	e027      	b.n	80216f0 <HAL_ETH_Init+0x14c>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 80216a0:	69bb      	ldr	r3, [r7, #24]
 80216a2:	4a73      	ldr	r2, [pc, #460]	; (8021870 <HAL_ETH_Init+0x2cc>)
 80216a4:	4293      	cmp	r3, r2
 80216a6:	d908      	bls.n	80216ba <HAL_ETH_Init+0x116>
 80216a8:	69bb      	ldr	r3, [r7, #24]
 80216aa:	4a72      	ldr	r2, [pc, #456]	; (8021874 <HAL_ETH_Init+0x2d0>)
 80216ac:	4293      	cmp	r3, r2
 80216ae:	d804      	bhi.n	80216ba <HAL_ETH_Init+0x116>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 80216b0:	69fb      	ldr	r3, [r7, #28]
 80216b2:	f043 030c 	orr.w	r3, r3, #12
 80216b6:	61fb      	str	r3, [r7, #28]
 80216b8:	e01a      	b.n	80216f0 <HAL_ETH_Init+0x14c>
  }  
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 80216ba:	69bb      	ldr	r3, [r7, #24]
 80216bc:	4a6d      	ldr	r2, [pc, #436]	; (8021874 <HAL_ETH_Init+0x2d0>)
 80216be:	4293      	cmp	r3, r2
 80216c0:	d903      	bls.n	80216ca <HAL_ETH_Init+0x126>
 80216c2:	69bb      	ldr	r3, [r7, #24]
 80216c4:	4a6c      	ldr	r2, [pc, #432]	; (8021878 <HAL_ETH_Init+0x2d4>)
 80216c6:	4293      	cmp	r3, r2
 80216c8:	d911      	bls.n	80216ee <HAL_ETH_Init+0x14a>
  {
    /* CSR Clock Range between 60-100 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }  
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 80216ca:	69bb      	ldr	r3, [r7, #24]
 80216cc:	4a6a      	ldr	r2, [pc, #424]	; (8021878 <HAL_ETH_Init+0x2d4>)
 80216ce:	4293      	cmp	r3, r2
 80216d0:	d908      	bls.n	80216e4 <HAL_ETH_Init+0x140>
 80216d2:	69bb      	ldr	r3, [r7, #24]
 80216d4:	4a69      	ldr	r2, [pc, #420]	; (802187c <HAL_ETH_Init+0x2d8>)
 80216d6:	4293      	cmp	r3, r2
 80216d8:	d804      	bhi.n	80216e4 <HAL_ETH_Init+0x140>
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 80216da:	69fb      	ldr	r3, [r7, #28]
 80216dc:	f043 0304 	orr.w	r3, r3, #4
 80216e0:	61fb      	str	r3, [r7, #28]
 80216e2:	e005      	b.n	80216f0 <HAL_ETH_Init+0x14c>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 183000000)) */
  {
    /* CSR Clock Range between 150-183 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 80216e4:	69fb      	ldr	r3, [r7, #28]
 80216e6:	f043 0310 	orr.w	r3, r3, #16
 80216ea:	61fb      	str	r3, [r7, #28]
 80216ec:	e000      	b.n	80216f0 <HAL_ETH_Init+0x14c>
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 80216ee:	bf00      	nop
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg1;
 80216f0:	687b      	ldr	r3, [r7, #4]
 80216f2:	681b      	ldr	r3, [r3, #0]
 80216f4:	69fa      	ldr	r2, [r7, #28]
 80216f6:	611a      	str	r2, [r3, #16]
  
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 80216f8:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80216fc:	2100      	movs	r1, #0
 80216fe:	6878      	ldr	r0, [r7, #4]
 8021700:	f000 f956 	bl	80219b0 <HAL_ETH_WritePHYRegister>
 8021704:	4603      	mov	r3, r0
 8021706:	2b00      	cmp	r3, #0
 8021708:	d00b      	beq.n	8021722 <HAL_ETH_Init+0x17e>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 802170a:	2301      	movs	r3, #1
 802170c:	613b      	str	r3, [r7, #16]
    
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 802170e:	6939      	ldr	r1, [r7, #16]
 8021710:	6878      	ldr	r0, [r7, #4]
 8021712:	f000 f9b3 	bl	8021a7c <ETH_MACDMAConfig>
    
    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 8021716:	687b      	ldr	r3, [r7, #4]
 8021718:	2201      	movs	r2, #1
 802171a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Return HAL_ERROR */
    return HAL_ERROR;
 802171e:	2301      	movs	r3, #1
 8021720:	e0d9      	b.n	80218d6 <HAL_ETH_Init+0x332>
  }
  
  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 8021722:	20ff      	movs	r0, #255	; 0xff
 8021724:	f7ff fe36 	bl	8021394 <HAL_Delay>
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8021728:	687b      	ldr	r3, [r7, #4]
 802172a:	685b      	ldr	r3, [r3, #4]
 802172c:	2b00      	cmp	r3, #0
 802172e:	f000 80a7 	beq.w	8021880 <HAL_ETH_Init+0x2dc>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8021732:	f7ff fe23 	bl	802137c <HAL_GetTick>
 8021736:	6178      	str	r0, [r7, #20]
    
    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8021738:	f107 030c 	add.w	r3, r7, #12
 802173c:	461a      	mov	r2, r3
 802173e:	2101      	movs	r1, #1
 8021740:	6878      	ldr	r0, [r7, #4]
 8021742:	f000 f8cd 	bl	80218e0 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 8021746:	f7ff fe19 	bl	802137c <HAL_GetTick>
 802174a:	4602      	mov	r2, r0
 802174c:	697b      	ldr	r3, [r7, #20]
 802174e:	1ad3      	subs	r3, r2, r3
 8021750:	f241 3288 	movw	r2, #5000	; 0x1388
 8021754:	4293      	cmp	r3, r2
 8021756:	d90f      	bls.n	8021778 <HAL_ETH_Init+0x1d4>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8021758:	2301      	movs	r3, #1
 802175a:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 802175c:	6939      	ldr	r1, [r7, #16]
 802175e:	6878      	ldr	r0, [r7, #4]
 8021760:	f000 f98c 	bl	8021a7c <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8021764:	687b      	ldr	r3, [r7, #4]
 8021766:	2201      	movs	r2, #1
 8021768:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 802176c:	687b      	ldr	r3, [r7, #4]
 802176e:	2200      	movs	r2, #0
 8021770:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8021774:	2303      	movs	r3, #3
 8021776:	e0ae      	b.n	80218d6 <HAL_ETH_Init+0x332>
      }
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 8021778:	68fb      	ldr	r3, [r7, #12]
 802177a:	f003 0304 	and.w	r3, r3, #4
 802177e:	2b00      	cmp	r3, #0
 8021780:	d0da      	beq.n	8021738 <HAL_ETH_Init+0x194>

    
    /* Enable Auto-Negotiation */
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 8021782:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8021786:	2100      	movs	r1, #0
 8021788:	6878      	ldr	r0, [r7, #4]
 802178a:	f000 f911 	bl	80219b0 <HAL_ETH_WritePHYRegister>
 802178e:	4603      	mov	r3, r0
 8021790:	2b00      	cmp	r3, #0
 8021792:	d00b      	beq.n	80217ac <HAL_ETH_Init+0x208>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8021794:	2301      	movs	r3, #1
 8021796:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8021798:	6939      	ldr	r1, [r7, #16]
 802179a:	6878      	ldr	r0, [r7, #4]
 802179c:	f000 f96e 	bl	8021a7c <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 80217a0:	687b      	ldr	r3, [r7, #4]
 80217a2:	2201      	movs	r2, #1
 80217a4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 80217a8:	2301      	movs	r3, #1
 80217aa:	e094      	b.n	80218d6 <HAL_ETH_Init+0x332>
    }
    
    /* Get tick */
    tickstart = HAL_GetTick();
 80217ac:	f7ff fde6 	bl	802137c <HAL_GetTick>
 80217b0:	6178      	str	r0, [r7, #20]
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 80217b2:	f107 030c 	add.w	r3, r7, #12
 80217b6:	461a      	mov	r2, r3
 80217b8:	2101      	movs	r1, #1
 80217ba:	6878      	ldr	r0, [r7, #4]
 80217bc:	f000 f890 	bl	80218e0 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 80217c0:	f7ff fddc 	bl	802137c <HAL_GetTick>
 80217c4:	4602      	mov	r2, r0
 80217c6:	697b      	ldr	r3, [r7, #20]
 80217c8:	1ad3      	subs	r3, r2, r3
 80217ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80217ce:	4293      	cmp	r3, r2
 80217d0:	d90f      	bls.n	80217f2 <HAL_ETH_Init+0x24e>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 80217d2:	2301      	movs	r3, #1
 80217d4:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 80217d6:	6939      	ldr	r1, [r7, #16]
 80217d8:	6878      	ldr	r0, [r7, #4]
 80217da:	f000 f94f 	bl	8021a7c <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 80217de:	687b      	ldr	r3, [r7, #4]
 80217e0:	2201      	movs	r2, #1
 80217e2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 80217e6:	687b      	ldr	r3, [r7, #4]
 80217e8:	2200      	movs	r2, #0
 80217ea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 80217ee:	2303      	movs	r3, #3
 80217f0:	e071      	b.n	80218d6 <HAL_ETH_Init+0x332>
      }
      
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 80217f2:	68fb      	ldr	r3, [r7, #12]
 80217f4:	f003 0320 	and.w	r3, r3, #32
 80217f8:	2b00      	cmp	r3, #0
 80217fa:	d0da      	beq.n	80217b2 <HAL_ETH_Init+0x20e>
    
    /* Read the result of the auto-negotiation */
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 80217fc:	f107 030c 	add.w	r3, r7, #12
 8021800:	461a      	mov	r2, r3
 8021802:	211f      	movs	r1, #31
 8021804:	6878      	ldr	r0, [r7, #4]
 8021806:	f000 f86b 	bl	80218e0 <HAL_ETH_ReadPHYRegister>
 802180a:	4603      	mov	r3, r0
 802180c:	2b00      	cmp	r3, #0
 802180e:	d00b      	beq.n	8021828 <HAL_ETH_Init+0x284>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8021810:	2301      	movs	r3, #1
 8021812:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8021814:	6939      	ldr	r1, [r7, #16]
 8021816:	6878      	ldr	r0, [r7, #4]
 8021818:	f000 f930 	bl	8021a7c <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 802181c:	687b      	ldr	r3, [r7, #4]
 802181e:	2201      	movs	r2, #1
 8021820:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8021824:	2301      	movs	r3, #1
 8021826:	e056      	b.n	80218d6 <HAL_ETH_Init+0x332>
    }
    
    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8021828:	68fb      	ldr	r3, [r7, #12]
 802182a:	f003 0310 	and.w	r3, r3, #16
 802182e:	2b00      	cmp	r3, #0
 8021830:	d004      	beq.n	802183c <HAL_ETH_Init+0x298>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 8021832:	687b      	ldr	r3, [r7, #4]
 8021834:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8021838:	60da      	str	r2, [r3, #12]
 802183a:	e002      	b.n	8021842 <HAL_ETH_Init+0x29e>
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 802183c:	687b      	ldr	r3, [r7, #4]
 802183e:	2200      	movs	r2, #0
 8021840:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 8021842:	68fb      	ldr	r3, [r7, #12]
 8021844:	f003 0304 	and.w	r3, r3, #4
 8021848:	2b00      	cmp	r3, #0
 802184a:	d003      	beq.n	8021854 <HAL_ETH_Init+0x2b0>
    {  
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M; 
 802184c:	687b      	ldr	r3, [r7, #4]
 802184e:	2200      	movs	r2, #0
 8021850:	609a      	str	r2, [r3, #8]
 8021852:	e037      	b.n	80218c4 <HAL_ETH_Init+0x320>
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      (heth->Init).Speed = ETH_SPEED_100M;
 8021854:	687b      	ldr	r3, [r7, #4]
 8021856:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 802185a:	609a      	str	r2, [r3, #8]
 802185c:	e032      	b.n	80218c4 <HAL_ETH_Init+0x320>
 802185e:	bf00      	nop
 8021860:	03938700 	.word	0x03938700
 8021864:	40023800 	.word	0x40023800
 8021868:	40013800 	.word	0x40013800
 802186c:	01312cff 	.word	0x01312cff
 8021870:	02160ebf 	.word	0x02160ebf
 8021874:	039386ff 	.word	0x039386ff
 8021878:	05f5e0ff 	.word	0x05f5e0ff
 802187c:	08f0d17f 	.word	0x08f0d17f
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
    
    /* Set MAC Speed and Duplex Mode */
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 8021880:	687b      	ldr	r3, [r7, #4]
 8021882:	68db      	ldr	r3, [r3, #12]
 8021884:	08db      	lsrs	r3, r3, #3
 8021886:	b29a      	uxth	r2, r3
                                                (uint16_t)((heth->Init).Speed >> 1U))) != HAL_OK)
 8021888:	687b      	ldr	r3, [r7, #4]
 802188a:	689b      	ldr	r3, [r3, #8]
 802188c:	085b      	lsrs	r3, r3, #1
 802188e:	b29b      	uxth	r3, r3
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 8021890:	4313      	orrs	r3, r2
 8021892:	b29b      	uxth	r3, r3
 8021894:	461a      	mov	r2, r3
 8021896:	2100      	movs	r1, #0
 8021898:	6878      	ldr	r0, [r7, #4]
 802189a:	f000 f889 	bl	80219b0 <HAL_ETH_WritePHYRegister>
 802189e:	4603      	mov	r3, r0
 80218a0:	2b00      	cmp	r3, #0
 80218a2:	d00b      	beq.n	80218bc <HAL_ETH_Init+0x318>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 80218a4:	2301      	movs	r3, #1
 80218a6:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 80218a8:	6939      	ldr	r1, [r7, #16]
 80218aa:	6878      	ldr	r0, [r7, #4]
 80218ac:	f000 f8e6 	bl	8021a7c <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 80218b0:	687b      	ldr	r3, [r7, #4]
 80218b2:	2201      	movs	r2, #1
 80218b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;
 80218b8:	2301      	movs	r3, #1
 80218ba:	e00c      	b.n	80218d6 <HAL_ETH_Init+0x332>
    }  
    
    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 80218bc:	f640 70ff 	movw	r0, #4095	; 0xfff
 80218c0:	f7ff fd68 	bl	8021394 <HAL_Delay>
  }
  
  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 80218c4:	6939      	ldr	r1, [r7, #16]
 80218c6:	6878      	ldr	r0, [r7, #4]
 80218c8:	f000 f8d8 	bl	8021a7c <ETH_MACDMAConfig>
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 80218cc:	687b      	ldr	r3, [r7, #4]
 80218ce:	2201      	movs	r2, #1
 80218d0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 80218d4:	2300      	movs	r3, #0
}
 80218d6:	4618      	mov	r0, r3
 80218d8:	3720      	adds	r7, #32
 80218da:	46bd      	mov	sp, r7
 80218dc:	bd80      	pop	{r7, pc}
 80218de:	bf00      	nop

080218e0 <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 80218e0:	b580      	push	{r7, lr}
 80218e2:	b086      	sub	sp, #24
 80218e4:	af00      	add	r7, sp, #0
 80218e6:	60f8      	str	r0, [r7, #12]
 80218e8:	460b      	mov	r3, r1
 80218ea:	607a      	str	r2, [r7, #4]
 80218ec:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;     
 80218ee:	2300      	movs	r3, #0
 80218f0:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 80218f2:	2300      	movs	r3, #0
 80218f4:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 80218f6:	68fb      	ldr	r3, [r7, #12]
 80218f8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80218fc:	b2db      	uxtb	r3, r3
 80218fe:	2b82      	cmp	r3, #130	; 0x82
 8021900:	d101      	bne.n	8021906 <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 8021902:	2302      	movs	r3, #2
 8021904:	e050      	b.n	80219a8 <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 8021906:	68fb      	ldr	r3, [r7, #12]
 8021908:	2282      	movs	r2, #130	; 0x82
 802190a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 802190e:	68fb      	ldr	r3, [r7, #12]
 8021910:	681b      	ldr	r3, [r3, #0]
 8021912:	691b      	ldr	r3, [r3, #16]
 8021914:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8021916:	697b      	ldr	r3, [r7, #20]
 8021918:	f003 031c 	and.w	r3, r3, #28
 802191c:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress << 11U) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 802191e:	68fb      	ldr	r3, [r7, #12]
 8021920:	8a1b      	ldrh	r3, [r3, #16]
 8021922:	02db      	lsls	r3, r3, #11
 8021924:	b29b      	uxth	r3, r3
 8021926:	697a      	ldr	r2, [r7, #20]
 8021928:	4313      	orrs	r3, r2
 802192a:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 802192c:	897b      	ldrh	r3, [r7, #10]
 802192e:	019b      	lsls	r3, r3, #6
 8021930:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8021934:	697a      	ldr	r2, [r7, #20]
 8021936:	4313      	orrs	r3, r2
 8021938:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 802193a:	697b      	ldr	r3, [r7, #20]
 802193c:	f023 0302 	bic.w	r3, r3, #2
 8021940:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8021942:	697b      	ldr	r3, [r7, #20]
 8021944:	f043 0301 	orr.w	r3, r3, #1
 8021948:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 802194a:	68fb      	ldr	r3, [r7, #12]
 802194c:	681b      	ldr	r3, [r3, #0]
 802194e:	697a      	ldr	r2, [r7, #20]
 8021950:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8021952:	f7ff fd13 	bl	802137c <HAL_GetTick>
 8021956:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8021958:	e015      	b.n	8021986 <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 802195a:	f7ff fd0f 	bl	802137c <HAL_GetTick>
 802195e:	4602      	mov	r2, r0
 8021960:	693b      	ldr	r3, [r7, #16]
 8021962:	1ad3      	subs	r3, r2, r3
 8021964:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8021968:	d309      	bcc.n	802197e <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State= HAL_ETH_STATE_READY;
 802196a:	68fb      	ldr	r3, [r7, #12]
 802196c:	2201      	movs	r2, #1
 802196e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8021972:	68fb      	ldr	r3, [r7, #12]
 8021974:	2200      	movs	r2, #0
 8021976:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 802197a:	2303      	movs	r3, #3
 802197c:	e014      	b.n	80219a8 <HAL_ETH_ReadPHYRegister+0xc8>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 802197e:	68fb      	ldr	r3, [r7, #12]
 8021980:	681b      	ldr	r3, [r3, #0]
 8021982:	691b      	ldr	r3, [r3, #16]
 8021984:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8021986:	697b      	ldr	r3, [r7, #20]
 8021988:	f003 0301 	and.w	r3, r3, #1
 802198c:	2b00      	cmp	r3, #0
 802198e:	d1e4      	bne.n	802195a <HAL_ETH_ReadPHYRegister+0x7a>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8021990:	68fb      	ldr	r3, [r7, #12]
 8021992:	681b      	ldr	r3, [r3, #0]
 8021994:	695b      	ldr	r3, [r3, #20]
 8021996:	b29b      	uxth	r3, r3
 8021998:	461a      	mov	r2, r3
 802199a:	687b      	ldr	r3, [r7, #4]
 802199c:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 802199e:	68fb      	ldr	r3, [r7, #12]
 80219a0:	2201      	movs	r2, #1
 80219a2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 80219a6:	2300      	movs	r3, #0
}
 80219a8:	4618      	mov	r0, r3
 80219aa:	3718      	adds	r7, #24
 80219ac:	46bd      	mov	sp, r7
 80219ae:	bd80      	pop	{r7, pc}

080219b0 <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 80219b0:	b580      	push	{r7, lr}
 80219b2:	b086      	sub	sp, #24
 80219b4:	af00      	add	r7, sp, #0
 80219b6:	60f8      	str	r0, [r7, #12]
 80219b8:	460b      	mov	r3, r1
 80219ba:	607a      	str	r2, [r7, #4]
 80219bc:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;
 80219be:	2300      	movs	r3, #0
 80219c0:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 80219c2:	2300      	movs	r3, #0
 80219c4:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 80219c6:	68fb      	ldr	r3, [r7, #12]
 80219c8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80219cc:	b2db      	uxtb	r3, r3
 80219ce:	2b42      	cmp	r3, #66	; 0x42
 80219d0:	d101      	bne.n	80219d6 <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 80219d2:	2302      	movs	r3, #2
 80219d4:	e04e      	b.n	8021a74 <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 80219d6:	68fb      	ldr	r3, [r7, #12]
 80219d8:	2242      	movs	r2, #66	; 0x42
 80219da:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 80219de:	68fb      	ldr	r3, [r7, #12]
 80219e0:	681b      	ldr	r3, [r3, #0]
 80219e2:	691b      	ldr	r3, [r3, #16]
 80219e4:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 80219e6:	697b      	ldr	r3, [r7, #20]
 80219e8:	f003 031c 	and.w	r3, r3, #28
 80219ec:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress<<11U) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 80219ee:	68fb      	ldr	r3, [r7, #12]
 80219f0:	8a1b      	ldrh	r3, [r3, #16]
 80219f2:	02db      	lsls	r3, r3, #11
 80219f4:	b29b      	uxth	r3, r3
 80219f6:	697a      	ldr	r2, [r7, #20]
 80219f8:	4313      	orrs	r3, r2
 80219fa:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 80219fc:	897b      	ldrh	r3, [r7, #10]
 80219fe:	019b      	lsls	r3, r3, #6
 8021a00:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8021a04:	697a      	ldr	r2, [r7, #20]
 8021a06:	4313      	orrs	r3, r2
 8021a08:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 8021a0a:	697b      	ldr	r3, [r7, #20]
 8021a0c:	f043 0302 	orr.w	r3, r3, #2
 8021a10:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 8021a12:	697b      	ldr	r3, [r7, #20]
 8021a14:	f043 0301 	orr.w	r3, r3, #1
 8021a18:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8021a1a:	687b      	ldr	r3, [r7, #4]
 8021a1c:	b29a      	uxth	r2, r3
 8021a1e:	68fb      	ldr	r3, [r7, #12]
 8021a20:	681b      	ldr	r3, [r3, #0]
 8021a22:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8021a24:	68fb      	ldr	r3, [r7, #12]
 8021a26:	681b      	ldr	r3, [r3, #0]
 8021a28:	697a      	ldr	r2, [r7, #20]
 8021a2a:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8021a2c:	f7ff fca6 	bl	802137c <HAL_GetTick>
 8021a30:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8021a32:	e015      	b.n	8021a60 <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 8021a34:	f7ff fca2 	bl	802137c <HAL_GetTick>
 8021a38:	4602      	mov	r2, r0
 8021a3a:	693b      	ldr	r3, [r7, #16]
 8021a3c:	1ad3      	subs	r3, r2, r3
 8021a3e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8021a42:	d309      	bcc.n	8021a58 <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State= HAL_ETH_STATE_READY;
 8021a44:	68fb      	ldr	r3, [r7, #12]
 8021a46:	2201      	movs	r2, #1
 8021a48:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8021a4c:	68fb      	ldr	r3, [r7, #12]
 8021a4e:	2200      	movs	r2, #0
 8021a50:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8021a54:	2303      	movs	r3, #3
 8021a56:	e00d      	b.n	8021a74 <HAL_ETH_WritePHYRegister+0xc4>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 8021a58:	68fb      	ldr	r3, [r7, #12]
 8021a5a:	681b      	ldr	r3, [r3, #0]
 8021a5c:	691b      	ldr	r3, [r3, #16]
 8021a5e:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8021a60:	697b      	ldr	r3, [r7, #20]
 8021a62:	f003 0301 	and.w	r3, r3, #1
 8021a66:	2b00      	cmp	r3, #0
 8021a68:	d1e4      	bne.n	8021a34 <HAL_ETH_WritePHYRegister+0x84>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8021a6a:	68fb      	ldr	r3, [r7, #12]
 8021a6c:	2201      	movs	r2, #1
 8021a6e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK; 
 8021a72:	2300      	movs	r3, #0
}
 8021a74:	4618      	mov	r0, r3
 8021a76:	3718      	adds	r7, #24
 8021a78:	46bd      	mov	sp, r7
 8021a7a:	bd80      	pop	{r7, pc}

08021a7c <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 8021a7c:	b580      	push	{r7, lr}
 8021a7e:	b0b0      	sub	sp, #192	; 0xc0
 8021a80:	af00      	add	r7, sp, #0
 8021a82:	6078      	str	r0, [r7, #4]
 8021a84:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg1 = 0U;
 8021a86:	2300      	movs	r3, #0
 8021a88:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 8021a8c:	683b      	ldr	r3, [r7, #0]
 8021a8e:	2b00      	cmp	r3, #0
 8021a90:	d007      	beq.n	8021aa2 <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 8021a92:	687b      	ldr	r3, [r7, #4]
 8021a94:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8021a98:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 8021a9a:	687b      	ldr	r3, [r7, #4]
 8021a9c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8021aa0:	609a      	str	r2, [r3, #8]
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 8021aa2:	2300      	movs	r3, #0
 8021aa4:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 8021aa6:	2300      	movs	r3, #0
 8021aa8:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 8021aaa:	2300      	movs	r3, #0
 8021aac:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 8021aae:	2300      	movs	r3, #0
 8021ab0:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 8021ab2:	2300      	movs	r3, #0
 8021ab4:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 8021ab6:	2300      	movs	r3, #0
 8021ab8:	65fb      	str	r3, [r7, #92]	; 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8021aba:	687b      	ldr	r3, [r7, #4]
 8021abc:	69db      	ldr	r3, [r3, #28]
 8021abe:	2b00      	cmp	r3, #0
 8021ac0:	d103      	bne.n	8021aca <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 8021ac2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8021ac6:	663b      	str	r3, [r7, #96]	; 0x60
 8021ac8:	e001      	b.n	8021ace <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 8021aca:	2300      	movs	r3, #0
 8021acc:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 8021ace:	f44f 7300 	mov.w	r3, #512	; 0x200
 8021ad2:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 8021ad4:	2300      	movs	r3, #0
 8021ad6:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8021ad8:	2300      	movs	r3, #0
 8021ada:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 8021adc:	2300      	movs	r3, #0
 8021ade:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 8021ae0:	2300      	movs	r3, #0
 8021ae2:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 8021ae4:	2300      	movs	r3, #0
 8021ae6:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 8021ae8:	2340      	movs	r3, #64	; 0x40
 8021aea:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 8021aec:	2300      	movs	r3, #0
 8021aee:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 8021af2:	2300      	movs	r3, #0
 8021af4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 8021af8:	2300      	movs	r3, #0
 8021afa:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 8021afe:	2300      	movs	r3, #0
 8021b00:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 8021b04:	2300      	movs	r3, #0
 8021b06:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0U;
 8021b0a:	2300      	movs	r3, #0
 8021b0c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0U;
 8021b10:	2300      	movs	r3, #0
 8021b12:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0U;
 8021b16:	2300      	movs	r3, #0
 8021b18:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 8021b1c:	2380      	movs	r3, #128	; 0x80
 8021b1e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8021b22:	2300      	movs	r3, #0
 8021b24:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 8021b28:	2300      	movs	r3, #0
 8021b2a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 8021b2e:	2300      	movs	r3, #0
 8021b30:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 8021b34:	2300      	movs	r3, #0
 8021b36:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 8021b3a:	2300      	movs	r3, #0
 8021b3c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0U;
 8021b40:	2300      	movs	r3, #0
 8021b42:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8021b46:	687b      	ldr	r3, [r7, #4]
 8021b48:	681b      	ldr	r3, [r3, #0]
 8021b4a:	681b      	ldr	r3, [r3, #0]
 8021b4c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8021b50:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8021b54:	4bac      	ldr	r3, [pc, #688]	; (8021e08 <ETH_MACDMAConfig+0x38c>)
 8021b56:	4013      	ands	r3, r2
 8021b58:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 8021b5c:	6cba      	ldr	r2, [r7, #72]	; 0x48
                       macinit.Jabber | 
 8021b5e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 8021b60:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 8021b62:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                       macinit.Jabber | 
 8021b64:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 8021b66:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                       macinit.InterFrameGap |
 8021b68:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 8021b6a:	687b      	ldr	r3, [r7, #4]
 8021b6c:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 8021b6e:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 8021b70:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                       (heth->Init).Speed | 
 8021b72:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 8021b74:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                       macinit.ReceiveOwn |
 8021b76:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 8021b78:	687b      	ldr	r3, [r7, #4]
 8021b7a:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 8021b7c:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 8021b7e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                       (heth->Init).DuplexMode | 
 8021b80:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 8021b82:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                       macinit.ChecksumOffload |    
 8021b84:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 8021b86:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                       macinit.RetryTransmission | 
 8021b88:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 8021b8a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                       macinit.AutomaticPadCRCStrip | 
 8021b8c:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 8021b8e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                       macinit.BackOffLimit | 
 8021b90:	4313      	orrs	r3, r2
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 8021b92:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8021b96:	4313      	orrs	r3, r2
 8021b98:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8021b9c:	687b      	ldr	r3, [r7, #4]
 8021b9e:	681b      	ldr	r3, [r3, #0]
 8021ba0:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8021ba4:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8021ba6:	687b      	ldr	r3, [r7, #4]
 8021ba8:	681b      	ldr	r3, [r3, #0]
 8021baa:	681b      	ldr	r3, [r3, #0]
 8021bac:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8021bb0:	2001      	movs	r0, #1
 8021bb2:	f7ff fbef 	bl	8021394 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1; 
 8021bb6:	687b      	ldr	r3, [r7, #4]
 8021bb8:	681b      	ldr	r3, [r3, #0]
 8021bba:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8021bbe:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8021bc0:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 8021bc2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8021bc4:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 8021bc6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 8021bc8:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception | 
 8021bca:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 8021bce:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 8021bd0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception | 
 8021bd4:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 8021bd6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 8021bda:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 8021bdc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 8021be0:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 8021be4:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8021be8:	687b      	ldr	r3, [r7, #4]
 8021bea:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 8021bec:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8021bee:	605a      	str	r2, [r3, #4]
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFFR;
 8021bf0:	687b      	ldr	r3, [r7, #4]
 8021bf2:	681b      	ldr	r3, [r3, #0]
 8021bf4:	685b      	ldr	r3, [r3, #4]
 8021bf6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8021bfa:	2001      	movs	r0, #1
 8021bfc:	f7ff fbca 	bl	8021394 <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg1;
 8021c00:	687b      	ldr	r3, [r7, #4]
 8021c02:	681b      	ldr	r3, [r3, #0]
 8021c04:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8021c08:	605a      	str	r2, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 8021c0a:	687b      	ldr	r3, [r7, #4]
 8021c0c:	681b      	ldr	r3, [r3, #0]
 8021c0e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8021c12:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 8021c14:	687b      	ldr	r3, [r7, #4]
 8021c16:	681b      	ldr	r3, [r3, #0]
 8021c18:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8021c1c:	60da      	str	r2, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg1 = (heth->Instance)->MACFCR;
 8021c1e:	687b      	ldr	r3, [r7, #4]
 8021c20:	681b      	ldr	r3, [r3, #0]
 8021c22:	699b      	ldr	r3, [r3, #24]
 8021c24:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Clear xx bits */
   tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8021c28:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8021c2c:	f64f 7341 	movw	r3, #65345	; 0xff41
 8021c30:	4013      	ands	r3, r2
 8021c32:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 8021c36:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8021c3a:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 8021c3c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 8021c40:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 8021c42:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 8021c46:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 8021c48:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 8021c4c:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 8021c4e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect | 
 8021c52:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 8021c54:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 8021c58:	4313      	orrs	r3, r2
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 8021c5a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8021c5e:	4313      	orrs	r3, r2
 8021c60:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8021c64:	687b      	ldr	r3, [r7, #4]
 8021c66:	681b      	ldr	r3, [r3, #0]
 8021c68:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8021c6c:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFCR;
 8021c6e:	687b      	ldr	r3, [r7, #4]
 8021c70:	681b      	ldr	r3, [r3, #0]
 8021c72:	699b      	ldr	r3, [r3, #24]
 8021c74:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8021c78:	2001      	movs	r0, #1
 8021c7a:	f7ff fb8b 	bl	8021394 <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg1;
 8021c7e:	687b      	ldr	r3, [r7, #4]
 8021c80:	681b      	ldr	r3, [r3, #0]
 8021c82:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8021c86:	619a      	str	r2, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8021c88:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                            macinit.VLANTagIdentifier);
 8021c8c:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8021c90:	687b      	ldr	r3, [r7, #4]
 8021c92:	681b      	ldr	r3, [r3, #0]
 8021c94:	430a      	orrs	r2, r1
 8021c96:	61da      	str	r2, [r3, #28]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACVLANTR;
 8021c98:	687b      	ldr	r3, [r7, #4]
 8021c9a:	681b      	ldr	r3, [r3, #0]
 8021c9c:	69db      	ldr	r3, [r3, #28]
 8021c9e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8021ca2:	2001      	movs	r0, #1
 8021ca4:	f7ff fb76 	bl	8021394 <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg1;
 8021ca8:	687b      	ldr	r3, [r7, #4]
 8021caa:	681b      	ldr	r3, [r3, #0]
 8021cac:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8021cb0:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 8021cb2:	2300      	movs	r3, #0
 8021cb4:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 8021cb6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8021cba:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 8021cbc:	2300      	movs	r3, #0
 8021cbe:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 8021cc0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8021cc4:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8021cc6:	2300      	movs	r3, #0
 8021cc8:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 8021cca:	2300      	movs	r3, #0
 8021ccc:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 8021cce:	2300      	movs	r3, #0
 8021cd0:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8021cd2:	2300      	movs	r3, #0
 8021cd4:	627b      	str	r3, [r7, #36]	; 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 8021cd6:	2304      	movs	r3, #4
 8021cd8:	62bb      	str	r3, [r7, #40]	; 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 8021cda:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8021cde:	62fb      	str	r3, [r7, #44]	; 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 8021ce0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8021ce4:	633b      	str	r3, [r7, #48]	; 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8021ce6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8021cea:	637b      	str	r3, [r7, #52]	; 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8021cec:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8021cf0:	63bb      	str	r3, [r7, #56]	; 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 8021cf2:	2380      	movs	r3, #128	; 0x80
 8021cf4:	63fb      	str	r3, [r7, #60]	; 0x3c
    dmainit.DescriptorSkipLength = 0x0U;
 8021cf6:	2300      	movs	r3, #0
 8021cf8:	643b      	str	r3, [r7, #64]	; 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8021cfa:	2300      	movs	r3, #0
 8021cfc:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg1 = (heth->Instance)->DMAOMR;
 8021cfe:	687b      	ldr	r3, [r7, #4]
 8021d00:	681b      	ldr	r3, [r3, #0]
 8021d02:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8021d06:	3318      	adds	r3, #24
 8021d08:	681b      	ldr	r3, [r3, #0]
 8021d0a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Clear xx bits */
    tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8021d0e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8021d12:	4b3e      	ldr	r3, [pc, #248]	; (8021e0c <ETH_MACDMAConfig+0x390>)
 8021d14:	4013      	ands	r3, r2
 8021d16:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8021d1a:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 8021d1c:	68fb      	ldr	r3, [r7, #12]
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8021d1e:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 8021d20:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 8021d22:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 8021d24:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 8021d26:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 8021d28:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 8021d2a:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 8021d2c:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 8021d2e:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 8021d30:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 8021d32:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 8021d34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 8021d36:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 8021d38:	6abb      	ldr	r3, [r7, #40]	; 0x28
                         dmainit.ReceiveThresholdControl |
 8021d3a:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8021d3c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8021d40:	4313      	orrs	r3, r2
 8021d42:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8021d46:	687b      	ldr	r3, [r7, #4]
 8021d48:	681b      	ldr	r3, [r3, #0]
 8021d4a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8021d4e:	3318      	adds	r3, #24
 8021d50:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8021d54:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->DMAOMR;
 8021d56:	687b      	ldr	r3, [r7, #4]
 8021d58:	681b      	ldr	r3, [r3, #0]
 8021d5a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8021d5e:	3318      	adds	r3, #24
 8021d60:	681b      	ldr	r3, [r3, #0]
 8021d62:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8021d66:	2001      	movs	r0, #1
 8021d68:	f7ff fb14 	bl	8021394 <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg1;
 8021d6c:	687b      	ldr	r3, [r7, #4]
 8021d6e:	681b      	ldr	r3, [r3, #0]
 8021d70:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8021d74:	3318      	adds	r3, #24
 8021d76:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8021d7a:	601a      	str	r2, [r3, #0]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8021d7c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                          dmainit.FixedBurst |
 8021d7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8021d80:	431a      	orrs	r2, r3
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8021d82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                          dmainit.FixedBurst |
 8021d84:	431a      	orrs	r2, r3
                                          dmainit.TxDMABurstLength |
 8021d86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8021d88:	431a      	orrs	r2, r3
                                          dmainit.EnhancedDescriptorFormat |
 8021d8a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                          dmainit.TxDMABurstLength |
 8021d8c:	431a      	orrs	r2, r3
                                          (dmainit.DescriptorSkipLength << 2U) |
 8021d8e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8021d90:	009b      	lsls	r3, r3, #2
                                          dmainit.EnhancedDescriptorFormat |
 8021d92:	431a      	orrs	r2, r3
                                          dmainit.DMAArbitration |
 8021d94:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                          (dmainit.DescriptorSkipLength << 2U) |
 8021d96:	431a      	orrs	r2, r3
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8021d98:	687b      	ldr	r3, [r7, #4]
 8021d9a:	681b      	ldr	r3, [r3, #0]
 8021d9c:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8021da0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8021da4:	601a      	str	r2, [r3, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->DMABMR;
 8021da6:	687b      	ldr	r3, [r7, #4]
 8021da8:	681b      	ldr	r3, [r3, #0]
 8021daa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8021dae:	681b      	ldr	r3, [r3, #0]
 8021db0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8021db4:	2001      	movs	r0, #1
 8021db6:	f7ff faed 	bl	8021394 <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg1;
 8021dba:	687b      	ldr	r3, [r7, #4]
 8021dbc:	681b      	ldr	r3, [r3, #0]
 8021dbe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8021dc2:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8021dc6:	601a      	str	r2, [r3, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8021dc8:	687b      	ldr	r3, [r7, #4]
 8021dca:	699b      	ldr	r3, [r3, #24]
 8021dcc:	2b01      	cmp	r3, #1
 8021dce:	d10f      	bne.n	8021df0 <ETH_MACDMAConfig+0x374>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 8021dd0:	687b      	ldr	r3, [r7, #4]
 8021dd2:	681b      	ldr	r3, [r3, #0]
 8021dd4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8021dd8:	331c      	adds	r3, #28
 8021dda:	681a      	ldr	r2, [r3, #0]
 8021ddc:	687b      	ldr	r3, [r7, #4]
 8021dde:	681b      	ldr	r3, [r3, #0]
 8021de0:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8021de4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8021de8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8021dec:	331c      	adds	r3, #28
 8021dee:	601a      	str	r2, [r3, #0]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8021df0:	687b      	ldr	r3, [r7, #4]
 8021df2:	695b      	ldr	r3, [r3, #20]
 8021df4:	461a      	mov	r2, r3
 8021df6:	2100      	movs	r1, #0
 8021df8:	6878      	ldr	r0, [r7, #4]
 8021dfa:	f000 f809 	bl	8021e10 <ETH_MACAddressConfig>
}
 8021dfe:	bf00      	nop
 8021e00:	37c0      	adds	r7, #192	; 0xc0
 8021e02:	46bd      	mov	sp, r7
 8021e04:	bd80      	pop	{r7, pc}
 8021e06:	bf00      	nop
 8021e08:	ff20810f 	.word	0xff20810f
 8021e0c:	f8de3f23 	.word	0xf8de3f23

08021e10 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8021e10:	b480      	push	{r7}
 8021e12:	b087      	sub	sp, #28
 8021e14:	af00      	add	r7, sp, #0
 8021e16:	60f8      	str	r0, [r7, #12]
 8021e18:	60b9      	str	r1, [r7, #8]
 8021e1a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8021e1c:	687b      	ldr	r3, [r7, #4]
 8021e1e:	3305      	adds	r3, #5
 8021e20:	781b      	ldrb	r3, [r3, #0]
 8021e22:	021b      	lsls	r3, r3, #8
 8021e24:	687a      	ldr	r2, [r7, #4]
 8021e26:	3204      	adds	r2, #4
 8021e28:	7812      	ldrb	r2, [r2, #0]
 8021e2a:	4313      	orrs	r3, r2
 8021e2c:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8021e2e:	68ba      	ldr	r2, [r7, #8]
 8021e30:	4b11      	ldr	r3, [pc, #68]	; (8021e78 <ETH_MACAddressConfig+0x68>)
 8021e32:	4413      	add	r3, r2
 8021e34:	461a      	mov	r2, r3
 8021e36:	697b      	ldr	r3, [r7, #20]
 8021e38:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8021e3a:	687b      	ldr	r3, [r7, #4]
 8021e3c:	3303      	adds	r3, #3
 8021e3e:	781b      	ldrb	r3, [r3, #0]
 8021e40:	061a      	lsls	r2, r3, #24
 8021e42:	687b      	ldr	r3, [r7, #4]
 8021e44:	3302      	adds	r3, #2
 8021e46:	781b      	ldrb	r3, [r3, #0]
 8021e48:	041b      	lsls	r3, r3, #16
 8021e4a:	431a      	orrs	r2, r3
 8021e4c:	687b      	ldr	r3, [r7, #4]
 8021e4e:	3301      	adds	r3, #1
 8021e50:	781b      	ldrb	r3, [r3, #0]
 8021e52:	021b      	lsls	r3, r3, #8
 8021e54:	4313      	orrs	r3, r2
 8021e56:	687a      	ldr	r2, [r7, #4]
 8021e58:	7812      	ldrb	r2, [r2, #0]
 8021e5a:	4313      	orrs	r3, r2
 8021e5c:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8021e5e:	68ba      	ldr	r2, [r7, #8]
 8021e60:	4b06      	ldr	r3, [pc, #24]	; (8021e7c <ETH_MACAddressConfig+0x6c>)
 8021e62:	4413      	add	r3, r2
 8021e64:	461a      	mov	r2, r3
 8021e66:	697b      	ldr	r3, [r7, #20]
 8021e68:	6013      	str	r3, [r2, #0]
}
 8021e6a:	bf00      	nop
 8021e6c:	371c      	adds	r7, #28
 8021e6e:	46bd      	mov	sp, r7
 8021e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021e74:	4770      	bx	lr
 8021e76:	bf00      	nop
 8021e78:	40028040 	.word	0x40028040
 8021e7c:	40028044 	.word	0x40028044

08021e80 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8021e80:	b480      	push	{r7}
 8021e82:	b089      	sub	sp, #36	; 0x24
 8021e84:	af00      	add	r7, sp, #0
 8021e86:	6078      	str	r0, [r7, #4]
 8021e88:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8021e8a:	2300      	movs	r3, #0
 8021e8c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8021e8e:	2300      	movs	r3, #0
 8021e90:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8021e92:	2300      	movs	r3, #0
 8021e94:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8021e96:	2300      	movs	r3, #0
 8021e98:	61fb      	str	r3, [r7, #28]
 8021e9a:	e177      	b.n	802218c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8021e9c:	2201      	movs	r2, #1
 8021e9e:	69fb      	ldr	r3, [r7, #28]
 8021ea0:	fa02 f303 	lsl.w	r3, r2, r3
 8021ea4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8021ea6:	683b      	ldr	r3, [r7, #0]
 8021ea8:	681b      	ldr	r3, [r3, #0]
 8021eaa:	697a      	ldr	r2, [r7, #20]
 8021eac:	4013      	ands	r3, r2
 8021eae:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8021eb0:	693a      	ldr	r2, [r7, #16]
 8021eb2:	697b      	ldr	r3, [r7, #20]
 8021eb4:	429a      	cmp	r2, r3
 8021eb6:	f040 8166 	bne.w	8022186 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8021eba:	683b      	ldr	r3, [r7, #0]
 8021ebc:	685b      	ldr	r3, [r3, #4]
 8021ebe:	2b01      	cmp	r3, #1
 8021ec0:	d00b      	beq.n	8021eda <HAL_GPIO_Init+0x5a>
 8021ec2:	683b      	ldr	r3, [r7, #0]
 8021ec4:	685b      	ldr	r3, [r3, #4]
 8021ec6:	2b02      	cmp	r3, #2
 8021ec8:	d007      	beq.n	8021eda <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8021eca:	683b      	ldr	r3, [r7, #0]
 8021ecc:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8021ece:	2b11      	cmp	r3, #17
 8021ed0:	d003      	beq.n	8021eda <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8021ed2:	683b      	ldr	r3, [r7, #0]
 8021ed4:	685b      	ldr	r3, [r3, #4]
 8021ed6:	2b12      	cmp	r3, #18
 8021ed8:	d130      	bne.n	8021f3c <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8021eda:	687b      	ldr	r3, [r7, #4]
 8021edc:	689b      	ldr	r3, [r3, #8]
 8021ede:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8021ee0:	69fb      	ldr	r3, [r7, #28]
 8021ee2:	005b      	lsls	r3, r3, #1
 8021ee4:	2203      	movs	r2, #3
 8021ee6:	fa02 f303 	lsl.w	r3, r2, r3
 8021eea:	43db      	mvns	r3, r3
 8021eec:	69ba      	ldr	r2, [r7, #24]
 8021eee:	4013      	ands	r3, r2
 8021ef0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8021ef2:	683b      	ldr	r3, [r7, #0]
 8021ef4:	68da      	ldr	r2, [r3, #12]
 8021ef6:	69fb      	ldr	r3, [r7, #28]
 8021ef8:	005b      	lsls	r3, r3, #1
 8021efa:	fa02 f303 	lsl.w	r3, r2, r3
 8021efe:	69ba      	ldr	r2, [r7, #24]
 8021f00:	4313      	orrs	r3, r2
 8021f02:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8021f04:	687b      	ldr	r3, [r7, #4]
 8021f06:	69ba      	ldr	r2, [r7, #24]
 8021f08:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8021f0a:	687b      	ldr	r3, [r7, #4]
 8021f0c:	685b      	ldr	r3, [r3, #4]
 8021f0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8021f10:	2201      	movs	r2, #1
 8021f12:	69fb      	ldr	r3, [r7, #28]
 8021f14:	fa02 f303 	lsl.w	r3, r2, r3
 8021f18:	43db      	mvns	r3, r3
 8021f1a:	69ba      	ldr	r2, [r7, #24]
 8021f1c:	4013      	ands	r3, r2
 8021f1e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8021f20:	683b      	ldr	r3, [r7, #0]
 8021f22:	685b      	ldr	r3, [r3, #4]
 8021f24:	091b      	lsrs	r3, r3, #4
 8021f26:	f003 0201 	and.w	r2, r3, #1
 8021f2a:	69fb      	ldr	r3, [r7, #28]
 8021f2c:	fa02 f303 	lsl.w	r3, r2, r3
 8021f30:	69ba      	ldr	r2, [r7, #24]
 8021f32:	4313      	orrs	r3, r2
 8021f34:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8021f36:	687b      	ldr	r3, [r7, #4]
 8021f38:	69ba      	ldr	r2, [r7, #24]
 8021f3a:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8021f3c:	687b      	ldr	r3, [r7, #4]
 8021f3e:	68db      	ldr	r3, [r3, #12]
 8021f40:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8021f42:	69fb      	ldr	r3, [r7, #28]
 8021f44:	005b      	lsls	r3, r3, #1
 8021f46:	2203      	movs	r2, #3
 8021f48:	fa02 f303 	lsl.w	r3, r2, r3
 8021f4c:	43db      	mvns	r3, r3
 8021f4e:	69ba      	ldr	r2, [r7, #24]
 8021f50:	4013      	ands	r3, r2
 8021f52:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8021f54:	683b      	ldr	r3, [r7, #0]
 8021f56:	689a      	ldr	r2, [r3, #8]
 8021f58:	69fb      	ldr	r3, [r7, #28]
 8021f5a:	005b      	lsls	r3, r3, #1
 8021f5c:	fa02 f303 	lsl.w	r3, r2, r3
 8021f60:	69ba      	ldr	r2, [r7, #24]
 8021f62:	4313      	orrs	r3, r2
 8021f64:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8021f66:	687b      	ldr	r3, [r7, #4]
 8021f68:	69ba      	ldr	r2, [r7, #24]
 8021f6a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8021f6c:	683b      	ldr	r3, [r7, #0]
 8021f6e:	685b      	ldr	r3, [r3, #4]
 8021f70:	2b02      	cmp	r3, #2
 8021f72:	d003      	beq.n	8021f7c <HAL_GPIO_Init+0xfc>
 8021f74:	683b      	ldr	r3, [r7, #0]
 8021f76:	685b      	ldr	r3, [r3, #4]
 8021f78:	2b12      	cmp	r3, #18
 8021f7a:	d123      	bne.n	8021fc4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8021f7c:	69fb      	ldr	r3, [r7, #28]
 8021f7e:	08da      	lsrs	r2, r3, #3
 8021f80:	687b      	ldr	r3, [r7, #4]
 8021f82:	3208      	adds	r2, #8
 8021f84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8021f88:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8021f8a:	69fb      	ldr	r3, [r7, #28]
 8021f8c:	f003 0307 	and.w	r3, r3, #7
 8021f90:	009b      	lsls	r3, r3, #2
 8021f92:	220f      	movs	r2, #15
 8021f94:	fa02 f303 	lsl.w	r3, r2, r3
 8021f98:	43db      	mvns	r3, r3
 8021f9a:	69ba      	ldr	r2, [r7, #24]
 8021f9c:	4013      	ands	r3, r2
 8021f9e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8021fa0:	683b      	ldr	r3, [r7, #0]
 8021fa2:	691a      	ldr	r2, [r3, #16]
 8021fa4:	69fb      	ldr	r3, [r7, #28]
 8021fa6:	f003 0307 	and.w	r3, r3, #7
 8021faa:	009b      	lsls	r3, r3, #2
 8021fac:	fa02 f303 	lsl.w	r3, r2, r3
 8021fb0:	69ba      	ldr	r2, [r7, #24]
 8021fb2:	4313      	orrs	r3, r2
 8021fb4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8021fb6:	69fb      	ldr	r3, [r7, #28]
 8021fb8:	08da      	lsrs	r2, r3, #3
 8021fba:	687b      	ldr	r3, [r7, #4]
 8021fbc:	3208      	adds	r2, #8
 8021fbe:	69b9      	ldr	r1, [r7, #24]
 8021fc0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8021fc4:	687b      	ldr	r3, [r7, #4]
 8021fc6:	681b      	ldr	r3, [r3, #0]
 8021fc8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8021fca:	69fb      	ldr	r3, [r7, #28]
 8021fcc:	005b      	lsls	r3, r3, #1
 8021fce:	2203      	movs	r2, #3
 8021fd0:	fa02 f303 	lsl.w	r3, r2, r3
 8021fd4:	43db      	mvns	r3, r3
 8021fd6:	69ba      	ldr	r2, [r7, #24]
 8021fd8:	4013      	ands	r3, r2
 8021fda:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8021fdc:	683b      	ldr	r3, [r7, #0]
 8021fde:	685b      	ldr	r3, [r3, #4]
 8021fe0:	f003 0203 	and.w	r2, r3, #3
 8021fe4:	69fb      	ldr	r3, [r7, #28]
 8021fe6:	005b      	lsls	r3, r3, #1
 8021fe8:	fa02 f303 	lsl.w	r3, r2, r3
 8021fec:	69ba      	ldr	r2, [r7, #24]
 8021fee:	4313      	orrs	r3, r2
 8021ff0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8021ff2:	687b      	ldr	r3, [r7, #4]
 8021ff4:	69ba      	ldr	r2, [r7, #24]
 8021ff6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8021ff8:	683b      	ldr	r3, [r7, #0]
 8021ffa:	685b      	ldr	r3, [r3, #4]
 8021ffc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8022000:	2b00      	cmp	r3, #0
 8022002:	f000 80c0 	beq.w	8022186 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8022006:	2300      	movs	r3, #0
 8022008:	60fb      	str	r3, [r7, #12]
 802200a:	4b65      	ldr	r3, [pc, #404]	; (80221a0 <HAL_GPIO_Init+0x320>)
 802200c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 802200e:	4a64      	ldr	r2, [pc, #400]	; (80221a0 <HAL_GPIO_Init+0x320>)
 8022010:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8022014:	6453      	str	r3, [r2, #68]	; 0x44
 8022016:	4b62      	ldr	r3, [pc, #392]	; (80221a0 <HAL_GPIO_Init+0x320>)
 8022018:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 802201a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 802201e:	60fb      	str	r3, [r7, #12]
 8022020:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8022022:	4a60      	ldr	r2, [pc, #384]	; (80221a4 <HAL_GPIO_Init+0x324>)
 8022024:	69fb      	ldr	r3, [r7, #28]
 8022026:	089b      	lsrs	r3, r3, #2
 8022028:	3302      	adds	r3, #2
 802202a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 802202e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8022030:	69fb      	ldr	r3, [r7, #28]
 8022032:	f003 0303 	and.w	r3, r3, #3
 8022036:	009b      	lsls	r3, r3, #2
 8022038:	220f      	movs	r2, #15
 802203a:	fa02 f303 	lsl.w	r3, r2, r3
 802203e:	43db      	mvns	r3, r3
 8022040:	69ba      	ldr	r2, [r7, #24]
 8022042:	4013      	ands	r3, r2
 8022044:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8022046:	687b      	ldr	r3, [r7, #4]
 8022048:	4a57      	ldr	r2, [pc, #348]	; (80221a8 <HAL_GPIO_Init+0x328>)
 802204a:	4293      	cmp	r3, r2
 802204c:	d037      	beq.n	80220be <HAL_GPIO_Init+0x23e>
 802204e:	687b      	ldr	r3, [r7, #4]
 8022050:	4a56      	ldr	r2, [pc, #344]	; (80221ac <HAL_GPIO_Init+0x32c>)
 8022052:	4293      	cmp	r3, r2
 8022054:	d031      	beq.n	80220ba <HAL_GPIO_Init+0x23a>
 8022056:	687b      	ldr	r3, [r7, #4]
 8022058:	4a55      	ldr	r2, [pc, #340]	; (80221b0 <HAL_GPIO_Init+0x330>)
 802205a:	4293      	cmp	r3, r2
 802205c:	d02b      	beq.n	80220b6 <HAL_GPIO_Init+0x236>
 802205e:	687b      	ldr	r3, [r7, #4]
 8022060:	4a54      	ldr	r2, [pc, #336]	; (80221b4 <HAL_GPIO_Init+0x334>)
 8022062:	4293      	cmp	r3, r2
 8022064:	d025      	beq.n	80220b2 <HAL_GPIO_Init+0x232>
 8022066:	687b      	ldr	r3, [r7, #4]
 8022068:	4a53      	ldr	r2, [pc, #332]	; (80221b8 <HAL_GPIO_Init+0x338>)
 802206a:	4293      	cmp	r3, r2
 802206c:	d01f      	beq.n	80220ae <HAL_GPIO_Init+0x22e>
 802206e:	687b      	ldr	r3, [r7, #4]
 8022070:	4a52      	ldr	r2, [pc, #328]	; (80221bc <HAL_GPIO_Init+0x33c>)
 8022072:	4293      	cmp	r3, r2
 8022074:	d019      	beq.n	80220aa <HAL_GPIO_Init+0x22a>
 8022076:	687b      	ldr	r3, [r7, #4]
 8022078:	4a51      	ldr	r2, [pc, #324]	; (80221c0 <HAL_GPIO_Init+0x340>)
 802207a:	4293      	cmp	r3, r2
 802207c:	d013      	beq.n	80220a6 <HAL_GPIO_Init+0x226>
 802207e:	687b      	ldr	r3, [r7, #4]
 8022080:	4a50      	ldr	r2, [pc, #320]	; (80221c4 <HAL_GPIO_Init+0x344>)
 8022082:	4293      	cmp	r3, r2
 8022084:	d00d      	beq.n	80220a2 <HAL_GPIO_Init+0x222>
 8022086:	687b      	ldr	r3, [r7, #4]
 8022088:	4a4f      	ldr	r2, [pc, #316]	; (80221c8 <HAL_GPIO_Init+0x348>)
 802208a:	4293      	cmp	r3, r2
 802208c:	d007      	beq.n	802209e <HAL_GPIO_Init+0x21e>
 802208e:	687b      	ldr	r3, [r7, #4]
 8022090:	4a4e      	ldr	r2, [pc, #312]	; (80221cc <HAL_GPIO_Init+0x34c>)
 8022092:	4293      	cmp	r3, r2
 8022094:	d101      	bne.n	802209a <HAL_GPIO_Init+0x21a>
 8022096:	2309      	movs	r3, #9
 8022098:	e012      	b.n	80220c0 <HAL_GPIO_Init+0x240>
 802209a:	230a      	movs	r3, #10
 802209c:	e010      	b.n	80220c0 <HAL_GPIO_Init+0x240>
 802209e:	2308      	movs	r3, #8
 80220a0:	e00e      	b.n	80220c0 <HAL_GPIO_Init+0x240>
 80220a2:	2307      	movs	r3, #7
 80220a4:	e00c      	b.n	80220c0 <HAL_GPIO_Init+0x240>
 80220a6:	2306      	movs	r3, #6
 80220a8:	e00a      	b.n	80220c0 <HAL_GPIO_Init+0x240>
 80220aa:	2305      	movs	r3, #5
 80220ac:	e008      	b.n	80220c0 <HAL_GPIO_Init+0x240>
 80220ae:	2304      	movs	r3, #4
 80220b0:	e006      	b.n	80220c0 <HAL_GPIO_Init+0x240>
 80220b2:	2303      	movs	r3, #3
 80220b4:	e004      	b.n	80220c0 <HAL_GPIO_Init+0x240>
 80220b6:	2302      	movs	r3, #2
 80220b8:	e002      	b.n	80220c0 <HAL_GPIO_Init+0x240>
 80220ba:	2301      	movs	r3, #1
 80220bc:	e000      	b.n	80220c0 <HAL_GPIO_Init+0x240>
 80220be:	2300      	movs	r3, #0
 80220c0:	69fa      	ldr	r2, [r7, #28]
 80220c2:	f002 0203 	and.w	r2, r2, #3
 80220c6:	0092      	lsls	r2, r2, #2
 80220c8:	4093      	lsls	r3, r2
 80220ca:	69ba      	ldr	r2, [r7, #24]
 80220cc:	4313      	orrs	r3, r2
 80220ce:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80220d0:	4934      	ldr	r1, [pc, #208]	; (80221a4 <HAL_GPIO_Init+0x324>)
 80220d2:	69fb      	ldr	r3, [r7, #28]
 80220d4:	089b      	lsrs	r3, r3, #2
 80220d6:	3302      	adds	r3, #2
 80220d8:	69ba      	ldr	r2, [r7, #24]
 80220da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80220de:	4b3c      	ldr	r3, [pc, #240]	; (80221d0 <HAL_GPIO_Init+0x350>)
 80220e0:	681b      	ldr	r3, [r3, #0]
 80220e2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80220e4:	693b      	ldr	r3, [r7, #16]
 80220e6:	43db      	mvns	r3, r3
 80220e8:	69ba      	ldr	r2, [r7, #24]
 80220ea:	4013      	ands	r3, r2
 80220ec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80220ee:	683b      	ldr	r3, [r7, #0]
 80220f0:	685b      	ldr	r3, [r3, #4]
 80220f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80220f6:	2b00      	cmp	r3, #0
 80220f8:	d003      	beq.n	8022102 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80220fa:	69ba      	ldr	r2, [r7, #24]
 80220fc:	693b      	ldr	r3, [r7, #16]
 80220fe:	4313      	orrs	r3, r2
 8022100:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8022102:	4a33      	ldr	r2, [pc, #204]	; (80221d0 <HAL_GPIO_Init+0x350>)
 8022104:	69bb      	ldr	r3, [r7, #24]
 8022106:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8022108:	4b31      	ldr	r3, [pc, #196]	; (80221d0 <HAL_GPIO_Init+0x350>)
 802210a:	685b      	ldr	r3, [r3, #4]
 802210c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 802210e:	693b      	ldr	r3, [r7, #16]
 8022110:	43db      	mvns	r3, r3
 8022112:	69ba      	ldr	r2, [r7, #24]
 8022114:	4013      	ands	r3, r2
 8022116:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8022118:	683b      	ldr	r3, [r7, #0]
 802211a:	685b      	ldr	r3, [r3, #4]
 802211c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8022120:	2b00      	cmp	r3, #0
 8022122:	d003      	beq.n	802212c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8022124:	69ba      	ldr	r2, [r7, #24]
 8022126:	693b      	ldr	r3, [r7, #16]
 8022128:	4313      	orrs	r3, r2
 802212a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 802212c:	4a28      	ldr	r2, [pc, #160]	; (80221d0 <HAL_GPIO_Init+0x350>)
 802212e:	69bb      	ldr	r3, [r7, #24]
 8022130:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8022132:	4b27      	ldr	r3, [pc, #156]	; (80221d0 <HAL_GPIO_Init+0x350>)
 8022134:	689b      	ldr	r3, [r3, #8]
 8022136:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8022138:	693b      	ldr	r3, [r7, #16]
 802213a:	43db      	mvns	r3, r3
 802213c:	69ba      	ldr	r2, [r7, #24]
 802213e:	4013      	ands	r3, r2
 8022140:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8022142:	683b      	ldr	r3, [r7, #0]
 8022144:	685b      	ldr	r3, [r3, #4]
 8022146:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 802214a:	2b00      	cmp	r3, #0
 802214c:	d003      	beq.n	8022156 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 802214e:	69ba      	ldr	r2, [r7, #24]
 8022150:	693b      	ldr	r3, [r7, #16]
 8022152:	4313      	orrs	r3, r2
 8022154:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8022156:	4a1e      	ldr	r2, [pc, #120]	; (80221d0 <HAL_GPIO_Init+0x350>)
 8022158:	69bb      	ldr	r3, [r7, #24]
 802215a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 802215c:	4b1c      	ldr	r3, [pc, #112]	; (80221d0 <HAL_GPIO_Init+0x350>)
 802215e:	68db      	ldr	r3, [r3, #12]
 8022160:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8022162:	693b      	ldr	r3, [r7, #16]
 8022164:	43db      	mvns	r3, r3
 8022166:	69ba      	ldr	r2, [r7, #24]
 8022168:	4013      	ands	r3, r2
 802216a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 802216c:	683b      	ldr	r3, [r7, #0]
 802216e:	685b      	ldr	r3, [r3, #4]
 8022170:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8022174:	2b00      	cmp	r3, #0
 8022176:	d003      	beq.n	8022180 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8022178:	69ba      	ldr	r2, [r7, #24]
 802217a:	693b      	ldr	r3, [r7, #16]
 802217c:	4313      	orrs	r3, r2
 802217e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8022180:	4a13      	ldr	r2, [pc, #76]	; (80221d0 <HAL_GPIO_Init+0x350>)
 8022182:	69bb      	ldr	r3, [r7, #24]
 8022184:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8022186:	69fb      	ldr	r3, [r7, #28]
 8022188:	3301      	adds	r3, #1
 802218a:	61fb      	str	r3, [r7, #28]
 802218c:	69fb      	ldr	r3, [r7, #28]
 802218e:	2b0f      	cmp	r3, #15
 8022190:	f67f ae84 	bls.w	8021e9c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8022194:	bf00      	nop
 8022196:	3724      	adds	r7, #36	; 0x24
 8022198:	46bd      	mov	sp, r7
 802219a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802219e:	4770      	bx	lr
 80221a0:	40023800 	.word	0x40023800
 80221a4:	40013800 	.word	0x40013800
 80221a8:	40020000 	.word	0x40020000
 80221ac:	40020400 	.word	0x40020400
 80221b0:	40020800 	.word	0x40020800
 80221b4:	40020c00 	.word	0x40020c00
 80221b8:	40021000 	.word	0x40021000
 80221bc:	40021400 	.word	0x40021400
 80221c0:	40021800 	.word	0x40021800
 80221c4:	40021c00 	.word	0x40021c00
 80221c8:	40022000 	.word	0x40022000
 80221cc:	40022400 	.word	0x40022400
 80221d0:	40013c00 	.word	0x40013c00

080221d4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80221d4:	b480      	push	{r7}
 80221d6:	b083      	sub	sp, #12
 80221d8:	af00      	add	r7, sp, #0
 80221da:	6078      	str	r0, [r7, #4]
 80221dc:	460b      	mov	r3, r1
 80221de:	807b      	strh	r3, [r7, #2]
 80221e0:	4613      	mov	r3, r2
 80221e2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80221e4:	787b      	ldrb	r3, [r7, #1]
 80221e6:	2b00      	cmp	r3, #0
 80221e8:	d003      	beq.n	80221f2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80221ea:	887a      	ldrh	r2, [r7, #2]
 80221ec:	687b      	ldr	r3, [r7, #4]
 80221ee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80221f0:	e003      	b.n	80221fa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80221f2:	887b      	ldrh	r3, [r7, #2]
 80221f4:	041a      	lsls	r2, r3, #16
 80221f6:	687b      	ldr	r3, [r7, #4]
 80221f8:	619a      	str	r2, [r3, #24]
}
 80221fa:	bf00      	nop
 80221fc:	370c      	adds	r7, #12
 80221fe:	46bd      	mov	sp, r7
 8022200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022204:	4770      	bx	lr

08022206 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8022206:	b5f0      	push	{r4, r5, r6, r7, lr}
 8022208:	b08f      	sub	sp, #60	; 0x3c
 802220a:	af0a      	add	r7, sp, #40	; 0x28
 802220c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 802220e:	687b      	ldr	r3, [r7, #4]
 8022210:	2b00      	cmp	r3, #0
 8022212:	d101      	bne.n	8022218 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8022214:	2301      	movs	r3, #1
 8022216:	e10f      	b.n	8022438 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8022218:	687b      	ldr	r3, [r7, #4]
 802221a:	681b      	ldr	r3, [r3, #0]
 802221c:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 802221e:	687b      	ldr	r3, [r7, #4]
 8022220:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8022224:	b2db      	uxtb	r3, r3
 8022226:	2b00      	cmp	r3, #0
 8022228:	d106      	bne.n	8022238 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 802222a:	687b      	ldr	r3, [r7, #4]
 802222c:	2200      	movs	r2, #0
 802222e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8022232:	6878      	ldr	r0, [r7, #4]
 8022234:	f7fe feda 	bl	8020fec <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8022238:	687b      	ldr	r3, [r7, #4]
 802223a:	2203      	movs	r2, #3
 802223c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8022240:	68bb      	ldr	r3, [r7, #8]
 8022242:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8022244:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8022248:	2b00      	cmp	r3, #0
 802224a:	d102      	bne.n	8022252 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 802224c:	687b      	ldr	r3, [r7, #4]
 802224e:	2200      	movs	r2, #0
 8022250:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8022252:	687b      	ldr	r3, [r7, #4]
 8022254:	681b      	ldr	r3, [r3, #0]
 8022256:	4618      	mov	r0, r3
 8022258:	f001 fa61 	bl	802371e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 802225c:	687b      	ldr	r3, [r7, #4]
 802225e:	681b      	ldr	r3, [r3, #0]
 8022260:	603b      	str	r3, [r7, #0]
 8022262:	687e      	ldr	r6, [r7, #4]
 8022264:	466d      	mov	r5, sp
 8022266:	f106 0410 	add.w	r4, r6, #16
 802226a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 802226c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 802226e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8022270:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8022272:	e894 0003 	ldmia.w	r4, {r0, r1}
 8022276:	e885 0003 	stmia.w	r5, {r0, r1}
 802227a:	1d33      	adds	r3, r6, #4
 802227c:	cb0e      	ldmia	r3, {r1, r2, r3}
 802227e:	6838      	ldr	r0, [r7, #0]
 8022280:	f001 f9ec 	bl	802365c <USB_CoreInit>
 8022284:	4603      	mov	r3, r0
 8022286:	2b00      	cmp	r3, #0
 8022288:	d005      	beq.n	8022296 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 802228a:	687b      	ldr	r3, [r7, #4]
 802228c:	2202      	movs	r2, #2
 802228e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8022292:	2301      	movs	r3, #1
 8022294:	e0d0      	b.n	8022438 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8022296:	687b      	ldr	r3, [r7, #4]
 8022298:	681b      	ldr	r3, [r3, #0]
 802229a:	2100      	movs	r1, #0
 802229c:	4618      	mov	r0, r3
 802229e:	f001 fa4f 	bl	8023740 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80222a2:	2300      	movs	r3, #0
 80222a4:	73fb      	strb	r3, [r7, #15]
 80222a6:	e04a      	b.n	802233e <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80222a8:	7bfa      	ldrb	r2, [r7, #15]
 80222aa:	6879      	ldr	r1, [r7, #4]
 80222ac:	4613      	mov	r3, r2
 80222ae:	00db      	lsls	r3, r3, #3
 80222b0:	1a9b      	subs	r3, r3, r2
 80222b2:	009b      	lsls	r3, r3, #2
 80222b4:	440b      	add	r3, r1
 80222b6:	333d      	adds	r3, #61	; 0x3d
 80222b8:	2201      	movs	r2, #1
 80222ba:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80222bc:	7bfa      	ldrb	r2, [r7, #15]
 80222be:	6879      	ldr	r1, [r7, #4]
 80222c0:	4613      	mov	r3, r2
 80222c2:	00db      	lsls	r3, r3, #3
 80222c4:	1a9b      	subs	r3, r3, r2
 80222c6:	009b      	lsls	r3, r3, #2
 80222c8:	440b      	add	r3, r1
 80222ca:	333c      	adds	r3, #60	; 0x3c
 80222cc:	7bfa      	ldrb	r2, [r7, #15]
 80222ce:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80222d0:	7bfa      	ldrb	r2, [r7, #15]
 80222d2:	7bfb      	ldrb	r3, [r7, #15]
 80222d4:	b298      	uxth	r0, r3
 80222d6:	6879      	ldr	r1, [r7, #4]
 80222d8:	4613      	mov	r3, r2
 80222da:	00db      	lsls	r3, r3, #3
 80222dc:	1a9b      	subs	r3, r3, r2
 80222de:	009b      	lsls	r3, r3, #2
 80222e0:	440b      	add	r3, r1
 80222e2:	3342      	adds	r3, #66	; 0x42
 80222e4:	4602      	mov	r2, r0
 80222e6:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80222e8:	7bfa      	ldrb	r2, [r7, #15]
 80222ea:	6879      	ldr	r1, [r7, #4]
 80222ec:	4613      	mov	r3, r2
 80222ee:	00db      	lsls	r3, r3, #3
 80222f0:	1a9b      	subs	r3, r3, r2
 80222f2:	009b      	lsls	r3, r3, #2
 80222f4:	440b      	add	r3, r1
 80222f6:	333f      	adds	r3, #63	; 0x3f
 80222f8:	2200      	movs	r2, #0
 80222fa:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80222fc:	7bfa      	ldrb	r2, [r7, #15]
 80222fe:	6879      	ldr	r1, [r7, #4]
 8022300:	4613      	mov	r3, r2
 8022302:	00db      	lsls	r3, r3, #3
 8022304:	1a9b      	subs	r3, r3, r2
 8022306:	009b      	lsls	r3, r3, #2
 8022308:	440b      	add	r3, r1
 802230a:	3344      	adds	r3, #68	; 0x44
 802230c:	2200      	movs	r2, #0
 802230e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8022310:	7bfa      	ldrb	r2, [r7, #15]
 8022312:	6879      	ldr	r1, [r7, #4]
 8022314:	4613      	mov	r3, r2
 8022316:	00db      	lsls	r3, r3, #3
 8022318:	1a9b      	subs	r3, r3, r2
 802231a:	009b      	lsls	r3, r3, #2
 802231c:	440b      	add	r3, r1
 802231e:	3348      	adds	r3, #72	; 0x48
 8022320:	2200      	movs	r2, #0
 8022322:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8022324:	7bfa      	ldrb	r2, [r7, #15]
 8022326:	6879      	ldr	r1, [r7, #4]
 8022328:	4613      	mov	r3, r2
 802232a:	00db      	lsls	r3, r3, #3
 802232c:	1a9b      	subs	r3, r3, r2
 802232e:	009b      	lsls	r3, r3, #2
 8022330:	440b      	add	r3, r1
 8022332:	3350      	adds	r3, #80	; 0x50
 8022334:	2200      	movs	r2, #0
 8022336:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8022338:	7bfb      	ldrb	r3, [r7, #15]
 802233a:	3301      	adds	r3, #1
 802233c:	73fb      	strb	r3, [r7, #15]
 802233e:	7bfa      	ldrb	r2, [r7, #15]
 8022340:	687b      	ldr	r3, [r7, #4]
 8022342:	685b      	ldr	r3, [r3, #4]
 8022344:	429a      	cmp	r2, r3
 8022346:	d3af      	bcc.n	80222a8 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8022348:	2300      	movs	r3, #0
 802234a:	73fb      	strb	r3, [r7, #15]
 802234c:	e044      	b.n	80223d8 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 802234e:	7bfa      	ldrb	r2, [r7, #15]
 8022350:	6879      	ldr	r1, [r7, #4]
 8022352:	4613      	mov	r3, r2
 8022354:	00db      	lsls	r3, r3, #3
 8022356:	1a9b      	subs	r3, r3, r2
 8022358:	009b      	lsls	r3, r3, #2
 802235a:	440b      	add	r3, r1
 802235c:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8022360:	2200      	movs	r2, #0
 8022362:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8022364:	7bfa      	ldrb	r2, [r7, #15]
 8022366:	6879      	ldr	r1, [r7, #4]
 8022368:	4613      	mov	r3, r2
 802236a:	00db      	lsls	r3, r3, #3
 802236c:	1a9b      	subs	r3, r3, r2
 802236e:	009b      	lsls	r3, r3, #2
 8022370:	440b      	add	r3, r1
 8022372:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8022376:	7bfa      	ldrb	r2, [r7, #15]
 8022378:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 802237a:	7bfa      	ldrb	r2, [r7, #15]
 802237c:	6879      	ldr	r1, [r7, #4]
 802237e:	4613      	mov	r3, r2
 8022380:	00db      	lsls	r3, r3, #3
 8022382:	1a9b      	subs	r3, r3, r2
 8022384:	009b      	lsls	r3, r3, #2
 8022386:	440b      	add	r3, r1
 8022388:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 802238c:	2200      	movs	r2, #0
 802238e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8022390:	7bfa      	ldrb	r2, [r7, #15]
 8022392:	6879      	ldr	r1, [r7, #4]
 8022394:	4613      	mov	r3, r2
 8022396:	00db      	lsls	r3, r3, #3
 8022398:	1a9b      	subs	r3, r3, r2
 802239a:	009b      	lsls	r3, r3, #2
 802239c:	440b      	add	r3, r1
 802239e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80223a2:	2200      	movs	r2, #0
 80223a4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80223a6:	7bfa      	ldrb	r2, [r7, #15]
 80223a8:	6879      	ldr	r1, [r7, #4]
 80223aa:	4613      	mov	r3, r2
 80223ac:	00db      	lsls	r3, r3, #3
 80223ae:	1a9b      	subs	r3, r3, r2
 80223b0:	009b      	lsls	r3, r3, #2
 80223b2:	440b      	add	r3, r1
 80223b4:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80223b8:	2200      	movs	r2, #0
 80223ba:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80223bc:	7bfa      	ldrb	r2, [r7, #15]
 80223be:	6879      	ldr	r1, [r7, #4]
 80223c0:	4613      	mov	r3, r2
 80223c2:	00db      	lsls	r3, r3, #3
 80223c4:	1a9b      	subs	r3, r3, r2
 80223c6:	009b      	lsls	r3, r3, #2
 80223c8:	440b      	add	r3, r1
 80223ca:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80223ce:	2200      	movs	r2, #0
 80223d0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80223d2:	7bfb      	ldrb	r3, [r7, #15]
 80223d4:	3301      	adds	r3, #1
 80223d6:	73fb      	strb	r3, [r7, #15]
 80223d8:	7bfa      	ldrb	r2, [r7, #15]
 80223da:	687b      	ldr	r3, [r7, #4]
 80223dc:	685b      	ldr	r3, [r3, #4]
 80223de:	429a      	cmp	r2, r3
 80223e0:	d3b5      	bcc.n	802234e <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80223e2:	687b      	ldr	r3, [r7, #4]
 80223e4:	681b      	ldr	r3, [r3, #0]
 80223e6:	603b      	str	r3, [r7, #0]
 80223e8:	687e      	ldr	r6, [r7, #4]
 80223ea:	466d      	mov	r5, sp
 80223ec:	f106 0410 	add.w	r4, r6, #16
 80223f0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80223f2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80223f4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80223f6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80223f8:	e894 0003 	ldmia.w	r4, {r0, r1}
 80223fc:	e885 0003 	stmia.w	r5, {r0, r1}
 8022400:	1d33      	adds	r3, r6, #4
 8022402:	cb0e      	ldmia	r3, {r1, r2, r3}
 8022404:	6838      	ldr	r0, [r7, #0]
 8022406:	f001 f9c5 	bl	8023794 <USB_DevInit>
 802240a:	4603      	mov	r3, r0
 802240c:	2b00      	cmp	r3, #0
 802240e:	d005      	beq.n	802241c <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8022410:	687b      	ldr	r3, [r7, #4]
 8022412:	2202      	movs	r2, #2
 8022414:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8022418:	2301      	movs	r3, #1
 802241a:	e00d      	b.n	8022438 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 802241c:	687b      	ldr	r3, [r7, #4]
 802241e:	2200      	movs	r2, #0
 8022420:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8022424:	687b      	ldr	r3, [r7, #4]
 8022426:	2201      	movs	r2, #1
 8022428:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 802242c:	687b      	ldr	r3, [r7, #4]
 802242e:	681b      	ldr	r3, [r3, #0]
 8022430:	4618      	mov	r0, r3
 8022432:	f001 fb74 	bl	8023b1e <USB_DevDisconnect>

  return HAL_OK;
 8022436:	2300      	movs	r3, #0
}
 8022438:	4618      	mov	r0, r3
 802243a:	3714      	adds	r7, #20
 802243c:	46bd      	mov	sp, r7
 802243e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08022440 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8022440:	b580      	push	{r7, lr}
 8022442:	b086      	sub	sp, #24
 8022444:	af00      	add	r7, sp, #0
 8022446:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8022448:	687b      	ldr	r3, [r7, #4]
 802244a:	2b00      	cmp	r3, #0
 802244c:	d101      	bne.n	8022452 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 802244e:	2301      	movs	r3, #1
 8022450:	e25b      	b.n	802290a <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8022452:	687b      	ldr	r3, [r7, #4]
 8022454:	681b      	ldr	r3, [r3, #0]
 8022456:	f003 0301 	and.w	r3, r3, #1
 802245a:	2b00      	cmp	r3, #0
 802245c:	d075      	beq.n	802254a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 802245e:	4ba3      	ldr	r3, [pc, #652]	; (80226ec <HAL_RCC_OscConfig+0x2ac>)
 8022460:	689b      	ldr	r3, [r3, #8]
 8022462:	f003 030c 	and.w	r3, r3, #12
 8022466:	2b04      	cmp	r3, #4
 8022468:	d00c      	beq.n	8022484 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 802246a:	4ba0      	ldr	r3, [pc, #640]	; (80226ec <HAL_RCC_OscConfig+0x2ac>)
 802246c:	689b      	ldr	r3, [r3, #8]
 802246e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8022472:	2b08      	cmp	r3, #8
 8022474:	d112      	bne.n	802249c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8022476:	4b9d      	ldr	r3, [pc, #628]	; (80226ec <HAL_RCC_OscConfig+0x2ac>)
 8022478:	685b      	ldr	r3, [r3, #4]
 802247a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 802247e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8022482:	d10b      	bne.n	802249c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8022484:	4b99      	ldr	r3, [pc, #612]	; (80226ec <HAL_RCC_OscConfig+0x2ac>)
 8022486:	681b      	ldr	r3, [r3, #0]
 8022488:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 802248c:	2b00      	cmp	r3, #0
 802248e:	d05b      	beq.n	8022548 <HAL_RCC_OscConfig+0x108>
 8022490:	687b      	ldr	r3, [r7, #4]
 8022492:	685b      	ldr	r3, [r3, #4]
 8022494:	2b00      	cmp	r3, #0
 8022496:	d157      	bne.n	8022548 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8022498:	2301      	movs	r3, #1
 802249a:	e236      	b.n	802290a <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 802249c:	687b      	ldr	r3, [r7, #4]
 802249e:	685b      	ldr	r3, [r3, #4]
 80224a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80224a4:	d106      	bne.n	80224b4 <HAL_RCC_OscConfig+0x74>
 80224a6:	4b91      	ldr	r3, [pc, #580]	; (80226ec <HAL_RCC_OscConfig+0x2ac>)
 80224a8:	681b      	ldr	r3, [r3, #0]
 80224aa:	4a90      	ldr	r2, [pc, #576]	; (80226ec <HAL_RCC_OscConfig+0x2ac>)
 80224ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80224b0:	6013      	str	r3, [r2, #0]
 80224b2:	e01d      	b.n	80224f0 <HAL_RCC_OscConfig+0xb0>
 80224b4:	687b      	ldr	r3, [r7, #4]
 80224b6:	685b      	ldr	r3, [r3, #4]
 80224b8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80224bc:	d10c      	bne.n	80224d8 <HAL_RCC_OscConfig+0x98>
 80224be:	4b8b      	ldr	r3, [pc, #556]	; (80226ec <HAL_RCC_OscConfig+0x2ac>)
 80224c0:	681b      	ldr	r3, [r3, #0]
 80224c2:	4a8a      	ldr	r2, [pc, #552]	; (80226ec <HAL_RCC_OscConfig+0x2ac>)
 80224c4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80224c8:	6013      	str	r3, [r2, #0]
 80224ca:	4b88      	ldr	r3, [pc, #544]	; (80226ec <HAL_RCC_OscConfig+0x2ac>)
 80224cc:	681b      	ldr	r3, [r3, #0]
 80224ce:	4a87      	ldr	r2, [pc, #540]	; (80226ec <HAL_RCC_OscConfig+0x2ac>)
 80224d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80224d4:	6013      	str	r3, [r2, #0]
 80224d6:	e00b      	b.n	80224f0 <HAL_RCC_OscConfig+0xb0>
 80224d8:	4b84      	ldr	r3, [pc, #528]	; (80226ec <HAL_RCC_OscConfig+0x2ac>)
 80224da:	681b      	ldr	r3, [r3, #0]
 80224dc:	4a83      	ldr	r2, [pc, #524]	; (80226ec <HAL_RCC_OscConfig+0x2ac>)
 80224de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80224e2:	6013      	str	r3, [r2, #0]
 80224e4:	4b81      	ldr	r3, [pc, #516]	; (80226ec <HAL_RCC_OscConfig+0x2ac>)
 80224e6:	681b      	ldr	r3, [r3, #0]
 80224e8:	4a80      	ldr	r2, [pc, #512]	; (80226ec <HAL_RCC_OscConfig+0x2ac>)
 80224ea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80224ee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80224f0:	687b      	ldr	r3, [r7, #4]
 80224f2:	685b      	ldr	r3, [r3, #4]
 80224f4:	2b00      	cmp	r3, #0
 80224f6:	d013      	beq.n	8022520 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80224f8:	f7fe ff40 	bl	802137c <HAL_GetTick>
 80224fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80224fe:	e008      	b.n	8022512 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8022500:	f7fe ff3c 	bl	802137c <HAL_GetTick>
 8022504:	4602      	mov	r2, r0
 8022506:	693b      	ldr	r3, [r7, #16]
 8022508:	1ad3      	subs	r3, r2, r3
 802250a:	2b64      	cmp	r3, #100	; 0x64
 802250c:	d901      	bls.n	8022512 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 802250e:	2303      	movs	r3, #3
 8022510:	e1fb      	b.n	802290a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8022512:	4b76      	ldr	r3, [pc, #472]	; (80226ec <HAL_RCC_OscConfig+0x2ac>)
 8022514:	681b      	ldr	r3, [r3, #0]
 8022516:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 802251a:	2b00      	cmp	r3, #0
 802251c:	d0f0      	beq.n	8022500 <HAL_RCC_OscConfig+0xc0>
 802251e:	e014      	b.n	802254a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8022520:	f7fe ff2c 	bl	802137c <HAL_GetTick>
 8022524:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8022526:	e008      	b.n	802253a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8022528:	f7fe ff28 	bl	802137c <HAL_GetTick>
 802252c:	4602      	mov	r2, r0
 802252e:	693b      	ldr	r3, [r7, #16]
 8022530:	1ad3      	subs	r3, r2, r3
 8022532:	2b64      	cmp	r3, #100	; 0x64
 8022534:	d901      	bls.n	802253a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8022536:	2303      	movs	r3, #3
 8022538:	e1e7      	b.n	802290a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 802253a:	4b6c      	ldr	r3, [pc, #432]	; (80226ec <HAL_RCC_OscConfig+0x2ac>)
 802253c:	681b      	ldr	r3, [r3, #0]
 802253e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8022542:	2b00      	cmp	r3, #0
 8022544:	d1f0      	bne.n	8022528 <HAL_RCC_OscConfig+0xe8>
 8022546:	e000      	b.n	802254a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8022548:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 802254a:	687b      	ldr	r3, [r7, #4]
 802254c:	681b      	ldr	r3, [r3, #0]
 802254e:	f003 0302 	and.w	r3, r3, #2
 8022552:	2b00      	cmp	r3, #0
 8022554:	d063      	beq.n	802261e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8022556:	4b65      	ldr	r3, [pc, #404]	; (80226ec <HAL_RCC_OscConfig+0x2ac>)
 8022558:	689b      	ldr	r3, [r3, #8]
 802255a:	f003 030c 	and.w	r3, r3, #12
 802255e:	2b00      	cmp	r3, #0
 8022560:	d00b      	beq.n	802257a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8022562:	4b62      	ldr	r3, [pc, #392]	; (80226ec <HAL_RCC_OscConfig+0x2ac>)
 8022564:	689b      	ldr	r3, [r3, #8]
 8022566:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 802256a:	2b08      	cmp	r3, #8
 802256c:	d11c      	bne.n	80225a8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 802256e:	4b5f      	ldr	r3, [pc, #380]	; (80226ec <HAL_RCC_OscConfig+0x2ac>)
 8022570:	685b      	ldr	r3, [r3, #4]
 8022572:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8022576:	2b00      	cmp	r3, #0
 8022578:	d116      	bne.n	80225a8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 802257a:	4b5c      	ldr	r3, [pc, #368]	; (80226ec <HAL_RCC_OscConfig+0x2ac>)
 802257c:	681b      	ldr	r3, [r3, #0]
 802257e:	f003 0302 	and.w	r3, r3, #2
 8022582:	2b00      	cmp	r3, #0
 8022584:	d005      	beq.n	8022592 <HAL_RCC_OscConfig+0x152>
 8022586:	687b      	ldr	r3, [r7, #4]
 8022588:	68db      	ldr	r3, [r3, #12]
 802258a:	2b01      	cmp	r3, #1
 802258c:	d001      	beq.n	8022592 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 802258e:	2301      	movs	r3, #1
 8022590:	e1bb      	b.n	802290a <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8022592:	4b56      	ldr	r3, [pc, #344]	; (80226ec <HAL_RCC_OscConfig+0x2ac>)
 8022594:	681b      	ldr	r3, [r3, #0]
 8022596:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 802259a:	687b      	ldr	r3, [r7, #4]
 802259c:	691b      	ldr	r3, [r3, #16]
 802259e:	00db      	lsls	r3, r3, #3
 80225a0:	4952      	ldr	r1, [pc, #328]	; (80226ec <HAL_RCC_OscConfig+0x2ac>)
 80225a2:	4313      	orrs	r3, r2
 80225a4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80225a6:	e03a      	b.n	802261e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80225a8:	687b      	ldr	r3, [r7, #4]
 80225aa:	68db      	ldr	r3, [r3, #12]
 80225ac:	2b00      	cmp	r3, #0
 80225ae:	d020      	beq.n	80225f2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80225b0:	4b4f      	ldr	r3, [pc, #316]	; (80226f0 <HAL_RCC_OscConfig+0x2b0>)
 80225b2:	2201      	movs	r2, #1
 80225b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80225b6:	f7fe fee1 	bl	802137c <HAL_GetTick>
 80225ba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80225bc:	e008      	b.n	80225d0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80225be:	f7fe fedd 	bl	802137c <HAL_GetTick>
 80225c2:	4602      	mov	r2, r0
 80225c4:	693b      	ldr	r3, [r7, #16]
 80225c6:	1ad3      	subs	r3, r2, r3
 80225c8:	2b02      	cmp	r3, #2
 80225ca:	d901      	bls.n	80225d0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80225cc:	2303      	movs	r3, #3
 80225ce:	e19c      	b.n	802290a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80225d0:	4b46      	ldr	r3, [pc, #280]	; (80226ec <HAL_RCC_OscConfig+0x2ac>)
 80225d2:	681b      	ldr	r3, [r3, #0]
 80225d4:	f003 0302 	and.w	r3, r3, #2
 80225d8:	2b00      	cmp	r3, #0
 80225da:	d0f0      	beq.n	80225be <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80225dc:	4b43      	ldr	r3, [pc, #268]	; (80226ec <HAL_RCC_OscConfig+0x2ac>)
 80225de:	681b      	ldr	r3, [r3, #0]
 80225e0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80225e4:	687b      	ldr	r3, [r7, #4]
 80225e6:	691b      	ldr	r3, [r3, #16]
 80225e8:	00db      	lsls	r3, r3, #3
 80225ea:	4940      	ldr	r1, [pc, #256]	; (80226ec <HAL_RCC_OscConfig+0x2ac>)
 80225ec:	4313      	orrs	r3, r2
 80225ee:	600b      	str	r3, [r1, #0]
 80225f0:	e015      	b.n	802261e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80225f2:	4b3f      	ldr	r3, [pc, #252]	; (80226f0 <HAL_RCC_OscConfig+0x2b0>)
 80225f4:	2200      	movs	r2, #0
 80225f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80225f8:	f7fe fec0 	bl	802137c <HAL_GetTick>
 80225fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80225fe:	e008      	b.n	8022612 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8022600:	f7fe febc 	bl	802137c <HAL_GetTick>
 8022604:	4602      	mov	r2, r0
 8022606:	693b      	ldr	r3, [r7, #16]
 8022608:	1ad3      	subs	r3, r2, r3
 802260a:	2b02      	cmp	r3, #2
 802260c:	d901      	bls.n	8022612 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 802260e:	2303      	movs	r3, #3
 8022610:	e17b      	b.n	802290a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8022612:	4b36      	ldr	r3, [pc, #216]	; (80226ec <HAL_RCC_OscConfig+0x2ac>)
 8022614:	681b      	ldr	r3, [r3, #0]
 8022616:	f003 0302 	and.w	r3, r3, #2
 802261a:	2b00      	cmp	r3, #0
 802261c:	d1f0      	bne.n	8022600 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 802261e:	687b      	ldr	r3, [r7, #4]
 8022620:	681b      	ldr	r3, [r3, #0]
 8022622:	f003 0308 	and.w	r3, r3, #8
 8022626:	2b00      	cmp	r3, #0
 8022628:	d030      	beq.n	802268c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 802262a:	687b      	ldr	r3, [r7, #4]
 802262c:	695b      	ldr	r3, [r3, #20]
 802262e:	2b00      	cmp	r3, #0
 8022630:	d016      	beq.n	8022660 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8022632:	4b30      	ldr	r3, [pc, #192]	; (80226f4 <HAL_RCC_OscConfig+0x2b4>)
 8022634:	2201      	movs	r2, #1
 8022636:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8022638:	f7fe fea0 	bl	802137c <HAL_GetTick>
 802263c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 802263e:	e008      	b.n	8022652 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8022640:	f7fe fe9c 	bl	802137c <HAL_GetTick>
 8022644:	4602      	mov	r2, r0
 8022646:	693b      	ldr	r3, [r7, #16]
 8022648:	1ad3      	subs	r3, r2, r3
 802264a:	2b02      	cmp	r3, #2
 802264c:	d901      	bls.n	8022652 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 802264e:	2303      	movs	r3, #3
 8022650:	e15b      	b.n	802290a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8022652:	4b26      	ldr	r3, [pc, #152]	; (80226ec <HAL_RCC_OscConfig+0x2ac>)
 8022654:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8022656:	f003 0302 	and.w	r3, r3, #2
 802265a:	2b00      	cmp	r3, #0
 802265c:	d0f0      	beq.n	8022640 <HAL_RCC_OscConfig+0x200>
 802265e:	e015      	b.n	802268c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8022660:	4b24      	ldr	r3, [pc, #144]	; (80226f4 <HAL_RCC_OscConfig+0x2b4>)
 8022662:	2200      	movs	r2, #0
 8022664:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8022666:	f7fe fe89 	bl	802137c <HAL_GetTick>
 802266a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 802266c:	e008      	b.n	8022680 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 802266e:	f7fe fe85 	bl	802137c <HAL_GetTick>
 8022672:	4602      	mov	r2, r0
 8022674:	693b      	ldr	r3, [r7, #16]
 8022676:	1ad3      	subs	r3, r2, r3
 8022678:	2b02      	cmp	r3, #2
 802267a:	d901      	bls.n	8022680 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 802267c:	2303      	movs	r3, #3
 802267e:	e144      	b.n	802290a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8022680:	4b1a      	ldr	r3, [pc, #104]	; (80226ec <HAL_RCC_OscConfig+0x2ac>)
 8022682:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8022684:	f003 0302 	and.w	r3, r3, #2
 8022688:	2b00      	cmp	r3, #0
 802268a:	d1f0      	bne.n	802266e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 802268c:	687b      	ldr	r3, [r7, #4]
 802268e:	681b      	ldr	r3, [r3, #0]
 8022690:	f003 0304 	and.w	r3, r3, #4
 8022694:	2b00      	cmp	r3, #0
 8022696:	f000 80a0 	beq.w	80227da <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 802269a:	2300      	movs	r3, #0
 802269c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 802269e:	4b13      	ldr	r3, [pc, #76]	; (80226ec <HAL_RCC_OscConfig+0x2ac>)
 80226a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80226a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80226a6:	2b00      	cmp	r3, #0
 80226a8:	d10f      	bne.n	80226ca <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80226aa:	2300      	movs	r3, #0
 80226ac:	60bb      	str	r3, [r7, #8]
 80226ae:	4b0f      	ldr	r3, [pc, #60]	; (80226ec <HAL_RCC_OscConfig+0x2ac>)
 80226b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80226b2:	4a0e      	ldr	r2, [pc, #56]	; (80226ec <HAL_RCC_OscConfig+0x2ac>)
 80226b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80226b8:	6413      	str	r3, [r2, #64]	; 0x40
 80226ba:	4b0c      	ldr	r3, [pc, #48]	; (80226ec <HAL_RCC_OscConfig+0x2ac>)
 80226bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80226be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80226c2:	60bb      	str	r3, [r7, #8]
 80226c4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80226c6:	2301      	movs	r3, #1
 80226c8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80226ca:	4b0b      	ldr	r3, [pc, #44]	; (80226f8 <HAL_RCC_OscConfig+0x2b8>)
 80226cc:	681b      	ldr	r3, [r3, #0]
 80226ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80226d2:	2b00      	cmp	r3, #0
 80226d4:	d121      	bne.n	802271a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80226d6:	4b08      	ldr	r3, [pc, #32]	; (80226f8 <HAL_RCC_OscConfig+0x2b8>)
 80226d8:	681b      	ldr	r3, [r3, #0]
 80226da:	4a07      	ldr	r2, [pc, #28]	; (80226f8 <HAL_RCC_OscConfig+0x2b8>)
 80226dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80226e0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80226e2:	f7fe fe4b 	bl	802137c <HAL_GetTick>
 80226e6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80226e8:	e011      	b.n	802270e <HAL_RCC_OscConfig+0x2ce>
 80226ea:	bf00      	nop
 80226ec:	40023800 	.word	0x40023800
 80226f0:	42470000 	.word	0x42470000
 80226f4:	42470e80 	.word	0x42470e80
 80226f8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80226fc:	f7fe fe3e 	bl	802137c <HAL_GetTick>
 8022700:	4602      	mov	r2, r0
 8022702:	693b      	ldr	r3, [r7, #16]
 8022704:	1ad3      	subs	r3, r2, r3
 8022706:	2b02      	cmp	r3, #2
 8022708:	d901      	bls.n	802270e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 802270a:	2303      	movs	r3, #3
 802270c:	e0fd      	b.n	802290a <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 802270e:	4b81      	ldr	r3, [pc, #516]	; (8022914 <HAL_RCC_OscConfig+0x4d4>)
 8022710:	681b      	ldr	r3, [r3, #0]
 8022712:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8022716:	2b00      	cmp	r3, #0
 8022718:	d0f0      	beq.n	80226fc <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 802271a:	687b      	ldr	r3, [r7, #4]
 802271c:	689b      	ldr	r3, [r3, #8]
 802271e:	2b01      	cmp	r3, #1
 8022720:	d106      	bne.n	8022730 <HAL_RCC_OscConfig+0x2f0>
 8022722:	4b7d      	ldr	r3, [pc, #500]	; (8022918 <HAL_RCC_OscConfig+0x4d8>)
 8022724:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8022726:	4a7c      	ldr	r2, [pc, #496]	; (8022918 <HAL_RCC_OscConfig+0x4d8>)
 8022728:	f043 0301 	orr.w	r3, r3, #1
 802272c:	6713      	str	r3, [r2, #112]	; 0x70
 802272e:	e01c      	b.n	802276a <HAL_RCC_OscConfig+0x32a>
 8022730:	687b      	ldr	r3, [r7, #4]
 8022732:	689b      	ldr	r3, [r3, #8]
 8022734:	2b05      	cmp	r3, #5
 8022736:	d10c      	bne.n	8022752 <HAL_RCC_OscConfig+0x312>
 8022738:	4b77      	ldr	r3, [pc, #476]	; (8022918 <HAL_RCC_OscConfig+0x4d8>)
 802273a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 802273c:	4a76      	ldr	r2, [pc, #472]	; (8022918 <HAL_RCC_OscConfig+0x4d8>)
 802273e:	f043 0304 	orr.w	r3, r3, #4
 8022742:	6713      	str	r3, [r2, #112]	; 0x70
 8022744:	4b74      	ldr	r3, [pc, #464]	; (8022918 <HAL_RCC_OscConfig+0x4d8>)
 8022746:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8022748:	4a73      	ldr	r2, [pc, #460]	; (8022918 <HAL_RCC_OscConfig+0x4d8>)
 802274a:	f043 0301 	orr.w	r3, r3, #1
 802274e:	6713      	str	r3, [r2, #112]	; 0x70
 8022750:	e00b      	b.n	802276a <HAL_RCC_OscConfig+0x32a>
 8022752:	4b71      	ldr	r3, [pc, #452]	; (8022918 <HAL_RCC_OscConfig+0x4d8>)
 8022754:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8022756:	4a70      	ldr	r2, [pc, #448]	; (8022918 <HAL_RCC_OscConfig+0x4d8>)
 8022758:	f023 0301 	bic.w	r3, r3, #1
 802275c:	6713      	str	r3, [r2, #112]	; 0x70
 802275e:	4b6e      	ldr	r3, [pc, #440]	; (8022918 <HAL_RCC_OscConfig+0x4d8>)
 8022760:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8022762:	4a6d      	ldr	r2, [pc, #436]	; (8022918 <HAL_RCC_OscConfig+0x4d8>)
 8022764:	f023 0304 	bic.w	r3, r3, #4
 8022768:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 802276a:	687b      	ldr	r3, [r7, #4]
 802276c:	689b      	ldr	r3, [r3, #8]
 802276e:	2b00      	cmp	r3, #0
 8022770:	d015      	beq.n	802279e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8022772:	f7fe fe03 	bl	802137c <HAL_GetTick>
 8022776:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8022778:	e00a      	b.n	8022790 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 802277a:	f7fe fdff 	bl	802137c <HAL_GetTick>
 802277e:	4602      	mov	r2, r0
 8022780:	693b      	ldr	r3, [r7, #16]
 8022782:	1ad3      	subs	r3, r2, r3
 8022784:	f241 3288 	movw	r2, #5000	; 0x1388
 8022788:	4293      	cmp	r3, r2
 802278a:	d901      	bls.n	8022790 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 802278c:	2303      	movs	r3, #3
 802278e:	e0bc      	b.n	802290a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8022790:	4b61      	ldr	r3, [pc, #388]	; (8022918 <HAL_RCC_OscConfig+0x4d8>)
 8022792:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8022794:	f003 0302 	and.w	r3, r3, #2
 8022798:	2b00      	cmp	r3, #0
 802279a:	d0ee      	beq.n	802277a <HAL_RCC_OscConfig+0x33a>
 802279c:	e014      	b.n	80227c8 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 802279e:	f7fe fded 	bl	802137c <HAL_GetTick>
 80227a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80227a4:	e00a      	b.n	80227bc <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80227a6:	f7fe fde9 	bl	802137c <HAL_GetTick>
 80227aa:	4602      	mov	r2, r0
 80227ac:	693b      	ldr	r3, [r7, #16]
 80227ae:	1ad3      	subs	r3, r2, r3
 80227b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80227b4:	4293      	cmp	r3, r2
 80227b6:	d901      	bls.n	80227bc <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80227b8:	2303      	movs	r3, #3
 80227ba:	e0a6      	b.n	802290a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80227bc:	4b56      	ldr	r3, [pc, #344]	; (8022918 <HAL_RCC_OscConfig+0x4d8>)
 80227be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80227c0:	f003 0302 	and.w	r3, r3, #2
 80227c4:	2b00      	cmp	r3, #0
 80227c6:	d1ee      	bne.n	80227a6 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80227c8:	7dfb      	ldrb	r3, [r7, #23]
 80227ca:	2b01      	cmp	r3, #1
 80227cc:	d105      	bne.n	80227da <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80227ce:	4b52      	ldr	r3, [pc, #328]	; (8022918 <HAL_RCC_OscConfig+0x4d8>)
 80227d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80227d2:	4a51      	ldr	r2, [pc, #324]	; (8022918 <HAL_RCC_OscConfig+0x4d8>)
 80227d4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80227d8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80227da:	687b      	ldr	r3, [r7, #4]
 80227dc:	699b      	ldr	r3, [r3, #24]
 80227de:	2b00      	cmp	r3, #0
 80227e0:	f000 8092 	beq.w	8022908 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80227e4:	4b4c      	ldr	r3, [pc, #304]	; (8022918 <HAL_RCC_OscConfig+0x4d8>)
 80227e6:	689b      	ldr	r3, [r3, #8]
 80227e8:	f003 030c 	and.w	r3, r3, #12
 80227ec:	2b08      	cmp	r3, #8
 80227ee:	d05c      	beq.n	80228aa <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80227f0:	687b      	ldr	r3, [r7, #4]
 80227f2:	699b      	ldr	r3, [r3, #24]
 80227f4:	2b02      	cmp	r3, #2
 80227f6:	d141      	bne.n	802287c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80227f8:	4b48      	ldr	r3, [pc, #288]	; (802291c <HAL_RCC_OscConfig+0x4dc>)
 80227fa:	2200      	movs	r2, #0
 80227fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80227fe:	f7fe fdbd 	bl	802137c <HAL_GetTick>
 8022802:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8022804:	e008      	b.n	8022818 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8022806:	f7fe fdb9 	bl	802137c <HAL_GetTick>
 802280a:	4602      	mov	r2, r0
 802280c:	693b      	ldr	r3, [r7, #16]
 802280e:	1ad3      	subs	r3, r2, r3
 8022810:	2b02      	cmp	r3, #2
 8022812:	d901      	bls.n	8022818 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8022814:	2303      	movs	r3, #3
 8022816:	e078      	b.n	802290a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8022818:	4b3f      	ldr	r3, [pc, #252]	; (8022918 <HAL_RCC_OscConfig+0x4d8>)
 802281a:	681b      	ldr	r3, [r3, #0]
 802281c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8022820:	2b00      	cmp	r3, #0
 8022822:	d1f0      	bne.n	8022806 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8022824:	687b      	ldr	r3, [r7, #4]
 8022826:	69da      	ldr	r2, [r3, #28]
 8022828:	687b      	ldr	r3, [r7, #4]
 802282a:	6a1b      	ldr	r3, [r3, #32]
 802282c:	431a      	orrs	r2, r3
 802282e:	687b      	ldr	r3, [r7, #4]
 8022830:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8022832:	019b      	lsls	r3, r3, #6
 8022834:	431a      	orrs	r2, r3
 8022836:	687b      	ldr	r3, [r7, #4]
 8022838:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802283a:	085b      	lsrs	r3, r3, #1
 802283c:	3b01      	subs	r3, #1
 802283e:	041b      	lsls	r3, r3, #16
 8022840:	431a      	orrs	r2, r3
 8022842:	687b      	ldr	r3, [r7, #4]
 8022844:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8022846:	061b      	lsls	r3, r3, #24
 8022848:	4933      	ldr	r1, [pc, #204]	; (8022918 <HAL_RCC_OscConfig+0x4d8>)
 802284a:	4313      	orrs	r3, r2
 802284c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 802284e:	4b33      	ldr	r3, [pc, #204]	; (802291c <HAL_RCC_OscConfig+0x4dc>)
 8022850:	2201      	movs	r2, #1
 8022852:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8022854:	f7fe fd92 	bl	802137c <HAL_GetTick>
 8022858:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 802285a:	e008      	b.n	802286e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 802285c:	f7fe fd8e 	bl	802137c <HAL_GetTick>
 8022860:	4602      	mov	r2, r0
 8022862:	693b      	ldr	r3, [r7, #16]
 8022864:	1ad3      	subs	r3, r2, r3
 8022866:	2b02      	cmp	r3, #2
 8022868:	d901      	bls.n	802286e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 802286a:	2303      	movs	r3, #3
 802286c:	e04d      	b.n	802290a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 802286e:	4b2a      	ldr	r3, [pc, #168]	; (8022918 <HAL_RCC_OscConfig+0x4d8>)
 8022870:	681b      	ldr	r3, [r3, #0]
 8022872:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8022876:	2b00      	cmp	r3, #0
 8022878:	d0f0      	beq.n	802285c <HAL_RCC_OscConfig+0x41c>
 802287a:	e045      	b.n	8022908 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 802287c:	4b27      	ldr	r3, [pc, #156]	; (802291c <HAL_RCC_OscConfig+0x4dc>)
 802287e:	2200      	movs	r2, #0
 8022880:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8022882:	f7fe fd7b 	bl	802137c <HAL_GetTick>
 8022886:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8022888:	e008      	b.n	802289c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 802288a:	f7fe fd77 	bl	802137c <HAL_GetTick>
 802288e:	4602      	mov	r2, r0
 8022890:	693b      	ldr	r3, [r7, #16]
 8022892:	1ad3      	subs	r3, r2, r3
 8022894:	2b02      	cmp	r3, #2
 8022896:	d901      	bls.n	802289c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8022898:	2303      	movs	r3, #3
 802289a:	e036      	b.n	802290a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 802289c:	4b1e      	ldr	r3, [pc, #120]	; (8022918 <HAL_RCC_OscConfig+0x4d8>)
 802289e:	681b      	ldr	r3, [r3, #0]
 80228a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80228a4:	2b00      	cmp	r3, #0
 80228a6:	d1f0      	bne.n	802288a <HAL_RCC_OscConfig+0x44a>
 80228a8:	e02e      	b.n	8022908 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80228aa:	687b      	ldr	r3, [r7, #4]
 80228ac:	699b      	ldr	r3, [r3, #24]
 80228ae:	2b01      	cmp	r3, #1
 80228b0:	d101      	bne.n	80228b6 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80228b2:	2301      	movs	r3, #1
 80228b4:	e029      	b.n	802290a <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80228b6:	4b18      	ldr	r3, [pc, #96]	; (8022918 <HAL_RCC_OscConfig+0x4d8>)
 80228b8:	685b      	ldr	r3, [r3, #4]
 80228ba:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80228bc:	68fb      	ldr	r3, [r7, #12]
 80228be:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80228c2:	687b      	ldr	r3, [r7, #4]
 80228c4:	69db      	ldr	r3, [r3, #28]
 80228c6:	429a      	cmp	r2, r3
 80228c8:	d11c      	bne.n	8022904 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80228ca:	68fb      	ldr	r3, [r7, #12]
 80228cc:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80228d0:	687b      	ldr	r3, [r7, #4]
 80228d2:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80228d4:	429a      	cmp	r2, r3
 80228d6:	d115      	bne.n	8022904 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80228d8:	68fa      	ldr	r2, [r7, #12]
 80228da:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80228de:	4013      	ands	r3, r2
 80228e0:	687a      	ldr	r2, [r7, #4]
 80228e2:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80228e4:	4293      	cmp	r3, r2
 80228e6:	d10d      	bne.n	8022904 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80228e8:	68fb      	ldr	r3, [r7, #12]
 80228ea:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80228ee:	687b      	ldr	r3, [r7, #4]
 80228f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80228f2:	429a      	cmp	r2, r3
 80228f4:	d106      	bne.n	8022904 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80228f6:	68fb      	ldr	r3, [r7, #12]
 80228f8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80228fc:	687b      	ldr	r3, [r7, #4]
 80228fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8022900:	429a      	cmp	r2, r3
 8022902:	d001      	beq.n	8022908 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8022904:	2301      	movs	r3, #1
 8022906:	e000      	b.n	802290a <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8022908:	2300      	movs	r3, #0
}
 802290a:	4618      	mov	r0, r3
 802290c:	3718      	adds	r7, #24
 802290e:	46bd      	mov	sp, r7
 8022910:	bd80      	pop	{r7, pc}
 8022912:	bf00      	nop
 8022914:	40007000 	.word	0x40007000
 8022918:	40023800 	.word	0x40023800
 802291c:	42470060 	.word	0x42470060

08022920 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8022920:	b580      	push	{r7, lr}
 8022922:	b084      	sub	sp, #16
 8022924:	af00      	add	r7, sp, #0
 8022926:	6078      	str	r0, [r7, #4]
 8022928:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 802292a:	687b      	ldr	r3, [r7, #4]
 802292c:	2b00      	cmp	r3, #0
 802292e:	d101      	bne.n	8022934 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8022930:	2301      	movs	r3, #1
 8022932:	e0cc      	b.n	8022ace <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8022934:	4b68      	ldr	r3, [pc, #416]	; (8022ad8 <HAL_RCC_ClockConfig+0x1b8>)
 8022936:	681b      	ldr	r3, [r3, #0]
 8022938:	f003 030f 	and.w	r3, r3, #15
 802293c:	683a      	ldr	r2, [r7, #0]
 802293e:	429a      	cmp	r2, r3
 8022940:	d90c      	bls.n	802295c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8022942:	4b65      	ldr	r3, [pc, #404]	; (8022ad8 <HAL_RCC_ClockConfig+0x1b8>)
 8022944:	683a      	ldr	r2, [r7, #0]
 8022946:	b2d2      	uxtb	r2, r2
 8022948:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 802294a:	4b63      	ldr	r3, [pc, #396]	; (8022ad8 <HAL_RCC_ClockConfig+0x1b8>)
 802294c:	681b      	ldr	r3, [r3, #0]
 802294e:	f003 030f 	and.w	r3, r3, #15
 8022952:	683a      	ldr	r2, [r7, #0]
 8022954:	429a      	cmp	r2, r3
 8022956:	d001      	beq.n	802295c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8022958:	2301      	movs	r3, #1
 802295a:	e0b8      	b.n	8022ace <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 802295c:	687b      	ldr	r3, [r7, #4]
 802295e:	681b      	ldr	r3, [r3, #0]
 8022960:	f003 0302 	and.w	r3, r3, #2
 8022964:	2b00      	cmp	r3, #0
 8022966:	d020      	beq.n	80229aa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8022968:	687b      	ldr	r3, [r7, #4]
 802296a:	681b      	ldr	r3, [r3, #0]
 802296c:	f003 0304 	and.w	r3, r3, #4
 8022970:	2b00      	cmp	r3, #0
 8022972:	d005      	beq.n	8022980 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8022974:	4b59      	ldr	r3, [pc, #356]	; (8022adc <HAL_RCC_ClockConfig+0x1bc>)
 8022976:	689b      	ldr	r3, [r3, #8]
 8022978:	4a58      	ldr	r2, [pc, #352]	; (8022adc <HAL_RCC_ClockConfig+0x1bc>)
 802297a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 802297e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8022980:	687b      	ldr	r3, [r7, #4]
 8022982:	681b      	ldr	r3, [r3, #0]
 8022984:	f003 0308 	and.w	r3, r3, #8
 8022988:	2b00      	cmp	r3, #0
 802298a:	d005      	beq.n	8022998 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 802298c:	4b53      	ldr	r3, [pc, #332]	; (8022adc <HAL_RCC_ClockConfig+0x1bc>)
 802298e:	689b      	ldr	r3, [r3, #8]
 8022990:	4a52      	ldr	r2, [pc, #328]	; (8022adc <HAL_RCC_ClockConfig+0x1bc>)
 8022992:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8022996:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8022998:	4b50      	ldr	r3, [pc, #320]	; (8022adc <HAL_RCC_ClockConfig+0x1bc>)
 802299a:	689b      	ldr	r3, [r3, #8]
 802299c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80229a0:	687b      	ldr	r3, [r7, #4]
 80229a2:	689b      	ldr	r3, [r3, #8]
 80229a4:	494d      	ldr	r1, [pc, #308]	; (8022adc <HAL_RCC_ClockConfig+0x1bc>)
 80229a6:	4313      	orrs	r3, r2
 80229a8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80229aa:	687b      	ldr	r3, [r7, #4]
 80229ac:	681b      	ldr	r3, [r3, #0]
 80229ae:	f003 0301 	and.w	r3, r3, #1
 80229b2:	2b00      	cmp	r3, #0
 80229b4:	d044      	beq.n	8022a40 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80229b6:	687b      	ldr	r3, [r7, #4]
 80229b8:	685b      	ldr	r3, [r3, #4]
 80229ba:	2b01      	cmp	r3, #1
 80229bc:	d107      	bne.n	80229ce <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80229be:	4b47      	ldr	r3, [pc, #284]	; (8022adc <HAL_RCC_ClockConfig+0x1bc>)
 80229c0:	681b      	ldr	r3, [r3, #0]
 80229c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80229c6:	2b00      	cmp	r3, #0
 80229c8:	d119      	bne.n	80229fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80229ca:	2301      	movs	r3, #1
 80229cc:	e07f      	b.n	8022ace <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80229ce:	687b      	ldr	r3, [r7, #4]
 80229d0:	685b      	ldr	r3, [r3, #4]
 80229d2:	2b02      	cmp	r3, #2
 80229d4:	d003      	beq.n	80229de <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80229d6:	687b      	ldr	r3, [r7, #4]
 80229d8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80229da:	2b03      	cmp	r3, #3
 80229dc:	d107      	bne.n	80229ee <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80229de:	4b3f      	ldr	r3, [pc, #252]	; (8022adc <HAL_RCC_ClockConfig+0x1bc>)
 80229e0:	681b      	ldr	r3, [r3, #0]
 80229e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80229e6:	2b00      	cmp	r3, #0
 80229e8:	d109      	bne.n	80229fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80229ea:	2301      	movs	r3, #1
 80229ec:	e06f      	b.n	8022ace <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80229ee:	4b3b      	ldr	r3, [pc, #236]	; (8022adc <HAL_RCC_ClockConfig+0x1bc>)
 80229f0:	681b      	ldr	r3, [r3, #0]
 80229f2:	f003 0302 	and.w	r3, r3, #2
 80229f6:	2b00      	cmp	r3, #0
 80229f8:	d101      	bne.n	80229fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80229fa:	2301      	movs	r3, #1
 80229fc:	e067      	b.n	8022ace <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80229fe:	4b37      	ldr	r3, [pc, #220]	; (8022adc <HAL_RCC_ClockConfig+0x1bc>)
 8022a00:	689b      	ldr	r3, [r3, #8]
 8022a02:	f023 0203 	bic.w	r2, r3, #3
 8022a06:	687b      	ldr	r3, [r7, #4]
 8022a08:	685b      	ldr	r3, [r3, #4]
 8022a0a:	4934      	ldr	r1, [pc, #208]	; (8022adc <HAL_RCC_ClockConfig+0x1bc>)
 8022a0c:	4313      	orrs	r3, r2
 8022a0e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8022a10:	f7fe fcb4 	bl	802137c <HAL_GetTick>
 8022a14:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8022a16:	e00a      	b.n	8022a2e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8022a18:	f7fe fcb0 	bl	802137c <HAL_GetTick>
 8022a1c:	4602      	mov	r2, r0
 8022a1e:	68fb      	ldr	r3, [r7, #12]
 8022a20:	1ad3      	subs	r3, r2, r3
 8022a22:	f241 3288 	movw	r2, #5000	; 0x1388
 8022a26:	4293      	cmp	r3, r2
 8022a28:	d901      	bls.n	8022a2e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8022a2a:	2303      	movs	r3, #3
 8022a2c:	e04f      	b.n	8022ace <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8022a2e:	4b2b      	ldr	r3, [pc, #172]	; (8022adc <HAL_RCC_ClockConfig+0x1bc>)
 8022a30:	689b      	ldr	r3, [r3, #8]
 8022a32:	f003 020c 	and.w	r2, r3, #12
 8022a36:	687b      	ldr	r3, [r7, #4]
 8022a38:	685b      	ldr	r3, [r3, #4]
 8022a3a:	009b      	lsls	r3, r3, #2
 8022a3c:	429a      	cmp	r2, r3
 8022a3e:	d1eb      	bne.n	8022a18 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8022a40:	4b25      	ldr	r3, [pc, #148]	; (8022ad8 <HAL_RCC_ClockConfig+0x1b8>)
 8022a42:	681b      	ldr	r3, [r3, #0]
 8022a44:	f003 030f 	and.w	r3, r3, #15
 8022a48:	683a      	ldr	r2, [r7, #0]
 8022a4a:	429a      	cmp	r2, r3
 8022a4c:	d20c      	bcs.n	8022a68 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8022a4e:	4b22      	ldr	r3, [pc, #136]	; (8022ad8 <HAL_RCC_ClockConfig+0x1b8>)
 8022a50:	683a      	ldr	r2, [r7, #0]
 8022a52:	b2d2      	uxtb	r2, r2
 8022a54:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8022a56:	4b20      	ldr	r3, [pc, #128]	; (8022ad8 <HAL_RCC_ClockConfig+0x1b8>)
 8022a58:	681b      	ldr	r3, [r3, #0]
 8022a5a:	f003 030f 	and.w	r3, r3, #15
 8022a5e:	683a      	ldr	r2, [r7, #0]
 8022a60:	429a      	cmp	r2, r3
 8022a62:	d001      	beq.n	8022a68 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8022a64:	2301      	movs	r3, #1
 8022a66:	e032      	b.n	8022ace <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8022a68:	687b      	ldr	r3, [r7, #4]
 8022a6a:	681b      	ldr	r3, [r3, #0]
 8022a6c:	f003 0304 	and.w	r3, r3, #4
 8022a70:	2b00      	cmp	r3, #0
 8022a72:	d008      	beq.n	8022a86 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8022a74:	4b19      	ldr	r3, [pc, #100]	; (8022adc <HAL_RCC_ClockConfig+0x1bc>)
 8022a76:	689b      	ldr	r3, [r3, #8]
 8022a78:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8022a7c:	687b      	ldr	r3, [r7, #4]
 8022a7e:	68db      	ldr	r3, [r3, #12]
 8022a80:	4916      	ldr	r1, [pc, #88]	; (8022adc <HAL_RCC_ClockConfig+0x1bc>)
 8022a82:	4313      	orrs	r3, r2
 8022a84:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8022a86:	687b      	ldr	r3, [r7, #4]
 8022a88:	681b      	ldr	r3, [r3, #0]
 8022a8a:	f003 0308 	and.w	r3, r3, #8
 8022a8e:	2b00      	cmp	r3, #0
 8022a90:	d009      	beq.n	8022aa6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8022a92:	4b12      	ldr	r3, [pc, #72]	; (8022adc <HAL_RCC_ClockConfig+0x1bc>)
 8022a94:	689b      	ldr	r3, [r3, #8]
 8022a96:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8022a9a:	687b      	ldr	r3, [r7, #4]
 8022a9c:	691b      	ldr	r3, [r3, #16]
 8022a9e:	00db      	lsls	r3, r3, #3
 8022aa0:	490e      	ldr	r1, [pc, #56]	; (8022adc <HAL_RCC_ClockConfig+0x1bc>)
 8022aa2:	4313      	orrs	r3, r2
 8022aa4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8022aa6:	f000 f821 	bl	8022aec <HAL_RCC_GetSysClockFreq>
 8022aaa:	4601      	mov	r1, r0
 8022aac:	4b0b      	ldr	r3, [pc, #44]	; (8022adc <HAL_RCC_ClockConfig+0x1bc>)
 8022aae:	689b      	ldr	r3, [r3, #8]
 8022ab0:	091b      	lsrs	r3, r3, #4
 8022ab2:	f003 030f 	and.w	r3, r3, #15
 8022ab6:	4a0a      	ldr	r2, [pc, #40]	; (8022ae0 <HAL_RCC_ClockConfig+0x1c0>)
 8022ab8:	5cd3      	ldrb	r3, [r2, r3]
 8022aba:	fa21 f303 	lsr.w	r3, r1, r3
 8022abe:	4a09      	ldr	r2, [pc, #36]	; (8022ae4 <HAL_RCC_ClockConfig+0x1c4>)
 8022ac0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8022ac2:	4b09      	ldr	r3, [pc, #36]	; (8022ae8 <HAL_RCC_ClockConfig+0x1c8>)
 8022ac4:	681b      	ldr	r3, [r3, #0]
 8022ac6:	4618      	mov	r0, r3
 8022ac8:	f7fe fc14 	bl	80212f4 <HAL_InitTick>

  return HAL_OK;
 8022acc:	2300      	movs	r3, #0
}
 8022ace:	4618      	mov	r0, r3
 8022ad0:	3710      	adds	r7, #16
 8022ad2:	46bd      	mov	sp, r7
 8022ad4:	bd80      	pop	{r7, pc}
 8022ad6:	bf00      	nop
 8022ad8:	40023c00 	.word	0x40023c00
 8022adc:	40023800 	.word	0x40023800
 8022ae0:	08024a34 	.word	0x08024a34
 8022ae4:	20000000 	.word	0x20000000
 8022ae8:	20000004 	.word	0x20000004

08022aec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8022aec:	b5f0      	push	{r4, r5, r6, r7, lr}
 8022aee:	b085      	sub	sp, #20
 8022af0:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8022af2:	2300      	movs	r3, #0
 8022af4:	607b      	str	r3, [r7, #4]
 8022af6:	2300      	movs	r3, #0
 8022af8:	60fb      	str	r3, [r7, #12]
 8022afa:	2300      	movs	r3, #0
 8022afc:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8022afe:	2300      	movs	r3, #0
 8022b00:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8022b02:	4b63      	ldr	r3, [pc, #396]	; (8022c90 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8022b04:	689b      	ldr	r3, [r3, #8]
 8022b06:	f003 030c 	and.w	r3, r3, #12
 8022b0a:	2b04      	cmp	r3, #4
 8022b0c:	d007      	beq.n	8022b1e <HAL_RCC_GetSysClockFreq+0x32>
 8022b0e:	2b08      	cmp	r3, #8
 8022b10:	d008      	beq.n	8022b24 <HAL_RCC_GetSysClockFreq+0x38>
 8022b12:	2b00      	cmp	r3, #0
 8022b14:	f040 80b4 	bne.w	8022c80 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8022b18:	4b5e      	ldr	r3, [pc, #376]	; (8022c94 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8022b1a:	60bb      	str	r3, [r7, #8]
       break;
 8022b1c:	e0b3      	b.n	8022c86 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8022b1e:	4b5e      	ldr	r3, [pc, #376]	; (8022c98 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8022b20:	60bb      	str	r3, [r7, #8]
      break;
 8022b22:	e0b0      	b.n	8022c86 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8022b24:	4b5a      	ldr	r3, [pc, #360]	; (8022c90 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8022b26:	685b      	ldr	r3, [r3, #4]
 8022b28:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8022b2c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8022b2e:	4b58      	ldr	r3, [pc, #352]	; (8022c90 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8022b30:	685b      	ldr	r3, [r3, #4]
 8022b32:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8022b36:	2b00      	cmp	r3, #0
 8022b38:	d04a      	beq.n	8022bd0 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8022b3a:	4b55      	ldr	r3, [pc, #340]	; (8022c90 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8022b3c:	685b      	ldr	r3, [r3, #4]
 8022b3e:	099b      	lsrs	r3, r3, #6
 8022b40:	f04f 0400 	mov.w	r4, #0
 8022b44:	f240 11ff 	movw	r1, #511	; 0x1ff
 8022b48:	f04f 0200 	mov.w	r2, #0
 8022b4c:	ea03 0501 	and.w	r5, r3, r1
 8022b50:	ea04 0602 	and.w	r6, r4, r2
 8022b54:	4629      	mov	r1, r5
 8022b56:	4632      	mov	r2, r6
 8022b58:	f04f 0300 	mov.w	r3, #0
 8022b5c:	f04f 0400 	mov.w	r4, #0
 8022b60:	0154      	lsls	r4, r2, #5
 8022b62:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8022b66:	014b      	lsls	r3, r1, #5
 8022b68:	4619      	mov	r1, r3
 8022b6a:	4622      	mov	r2, r4
 8022b6c:	1b49      	subs	r1, r1, r5
 8022b6e:	eb62 0206 	sbc.w	r2, r2, r6
 8022b72:	f04f 0300 	mov.w	r3, #0
 8022b76:	f04f 0400 	mov.w	r4, #0
 8022b7a:	0194      	lsls	r4, r2, #6
 8022b7c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8022b80:	018b      	lsls	r3, r1, #6
 8022b82:	1a5b      	subs	r3, r3, r1
 8022b84:	eb64 0402 	sbc.w	r4, r4, r2
 8022b88:	f04f 0100 	mov.w	r1, #0
 8022b8c:	f04f 0200 	mov.w	r2, #0
 8022b90:	00e2      	lsls	r2, r4, #3
 8022b92:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8022b96:	00d9      	lsls	r1, r3, #3
 8022b98:	460b      	mov	r3, r1
 8022b9a:	4614      	mov	r4, r2
 8022b9c:	195b      	adds	r3, r3, r5
 8022b9e:	eb44 0406 	adc.w	r4, r4, r6
 8022ba2:	f04f 0100 	mov.w	r1, #0
 8022ba6:	f04f 0200 	mov.w	r2, #0
 8022baa:	0262      	lsls	r2, r4, #9
 8022bac:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8022bb0:	0259      	lsls	r1, r3, #9
 8022bb2:	460b      	mov	r3, r1
 8022bb4:	4614      	mov	r4, r2
 8022bb6:	4618      	mov	r0, r3
 8022bb8:	4621      	mov	r1, r4
 8022bba:	687b      	ldr	r3, [r7, #4]
 8022bbc:	f04f 0400 	mov.w	r4, #0
 8022bc0:	461a      	mov	r2, r3
 8022bc2:	4623      	mov	r3, r4
 8022bc4:	f7fd fd64 	bl	8020690 <__aeabi_uldivmod>
 8022bc8:	4603      	mov	r3, r0
 8022bca:	460c      	mov	r4, r1
 8022bcc:	60fb      	str	r3, [r7, #12]
 8022bce:	e049      	b.n	8022c64 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8022bd0:	4b2f      	ldr	r3, [pc, #188]	; (8022c90 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8022bd2:	685b      	ldr	r3, [r3, #4]
 8022bd4:	099b      	lsrs	r3, r3, #6
 8022bd6:	f04f 0400 	mov.w	r4, #0
 8022bda:	f240 11ff 	movw	r1, #511	; 0x1ff
 8022bde:	f04f 0200 	mov.w	r2, #0
 8022be2:	ea03 0501 	and.w	r5, r3, r1
 8022be6:	ea04 0602 	and.w	r6, r4, r2
 8022bea:	4629      	mov	r1, r5
 8022bec:	4632      	mov	r2, r6
 8022bee:	f04f 0300 	mov.w	r3, #0
 8022bf2:	f04f 0400 	mov.w	r4, #0
 8022bf6:	0154      	lsls	r4, r2, #5
 8022bf8:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8022bfc:	014b      	lsls	r3, r1, #5
 8022bfe:	4619      	mov	r1, r3
 8022c00:	4622      	mov	r2, r4
 8022c02:	1b49      	subs	r1, r1, r5
 8022c04:	eb62 0206 	sbc.w	r2, r2, r6
 8022c08:	f04f 0300 	mov.w	r3, #0
 8022c0c:	f04f 0400 	mov.w	r4, #0
 8022c10:	0194      	lsls	r4, r2, #6
 8022c12:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8022c16:	018b      	lsls	r3, r1, #6
 8022c18:	1a5b      	subs	r3, r3, r1
 8022c1a:	eb64 0402 	sbc.w	r4, r4, r2
 8022c1e:	f04f 0100 	mov.w	r1, #0
 8022c22:	f04f 0200 	mov.w	r2, #0
 8022c26:	00e2      	lsls	r2, r4, #3
 8022c28:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8022c2c:	00d9      	lsls	r1, r3, #3
 8022c2e:	460b      	mov	r3, r1
 8022c30:	4614      	mov	r4, r2
 8022c32:	195b      	adds	r3, r3, r5
 8022c34:	eb44 0406 	adc.w	r4, r4, r6
 8022c38:	f04f 0100 	mov.w	r1, #0
 8022c3c:	f04f 0200 	mov.w	r2, #0
 8022c40:	02a2      	lsls	r2, r4, #10
 8022c42:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8022c46:	0299      	lsls	r1, r3, #10
 8022c48:	460b      	mov	r3, r1
 8022c4a:	4614      	mov	r4, r2
 8022c4c:	4618      	mov	r0, r3
 8022c4e:	4621      	mov	r1, r4
 8022c50:	687b      	ldr	r3, [r7, #4]
 8022c52:	f04f 0400 	mov.w	r4, #0
 8022c56:	461a      	mov	r2, r3
 8022c58:	4623      	mov	r3, r4
 8022c5a:	f7fd fd19 	bl	8020690 <__aeabi_uldivmod>
 8022c5e:	4603      	mov	r3, r0
 8022c60:	460c      	mov	r4, r1
 8022c62:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8022c64:	4b0a      	ldr	r3, [pc, #40]	; (8022c90 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8022c66:	685b      	ldr	r3, [r3, #4]
 8022c68:	0c1b      	lsrs	r3, r3, #16
 8022c6a:	f003 0303 	and.w	r3, r3, #3
 8022c6e:	3301      	adds	r3, #1
 8022c70:	005b      	lsls	r3, r3, #1
 8022c72:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8022c74:	68fa      	ldr	r2, [r7, #12]
 8022c76:	683b      	ldr	r3, [r7, #0]
 8022c78:	fbb2 f3f3 	udiv	r3, r2, r3
 8022c7c:	60bb      	str	r3, [r7, #8]
      break;
 8022c7e:	e002      	b.n	8022c86 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8022c80:	4b04      	ldr	r3, [pc, #16]	; (8022c94 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8022c82:	60bb      	str	r3, [r7, #8]
      break;
 8022c84:	bf00      	nop
    }
  }
  return sysclockfreq;
 8022c86:	68bb      	ldr	r3, [r7, #8]
}
 8022c88:	4618      	mov	r0, r3
 8022c8a:	3714      	adds	r7, #20
 8022c8c:	46bd      	mov	sp, r7
 8022c8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8022c90:	40023800 	.word	0x40023800
 8022c94:	00f42400 	.word	0x00f42400
 8022c98:	007a1200 	.word	0x007a1200

08022c9c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8022c9c:	b480      	push	{r7}
 8022c9e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8022ca0:	4b03      	ldr	r3, [pc, #12]	; (8022cb0 <HAL_RCC_GetHCLKFreq+0x14>)
 8022ca2:	681b      	ldr	r3, [r3, #0]
}
 8022ca4:	4618      	mov	r0, r3
 8022ca6:	46bd      	mov	sp, r7
 8022ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022cac:	4770      	bx	lr
 8022cae:	bf00      	nop
 8022cb0:	20000000 	.word	0x20000000

08022cb4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8022cb4:	b580      	push	{r7, lr}
 8022cb6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8022cb8:	f7ff fff0 	bl	8022c9c <HAL_RCC_GetHCLKFreq>
 8022cbc:	4601      	mov	r1, r0
 8022cbe:	4b05      	ldr	r3, [pc, #20]	; (8022cd4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8022cc0:	689b      	ldr	r3, [r3, #8]
 8022cc2:	0a9b      	lsrs	r3, r3, #10
 8022cc4:	f003 0307 	and.w	r3, r3, #7
 8022cc8:	4a03      	ldr	r2, [pc, #12]	; (8022cd8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8022cca:	5cd3      	ldrb	r3, [r2, r3]
 8022ccc:	fa21 f303 	lsr.w	r3, r1, r3
}
 8022cd0:	4618      	mov	r0, r3
 8022cd2:	bd80      	pop	{r7, pc}
 8022cd4:	40023800 	.word	0x40023800
 8022cd8:	08024a44 	.word	0x08024a44

08022cdc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8022cdc:	b580      	push	{r7, lr}
 8022cde:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8022ce0:	f7ff ffdc 	bl	8022c9c <HAL_RCC_GetHCLKFreq>
 8022ce4:	4601      	mov	r1, r0
 8022ce6:	4b05      	ldr	r3, [pc, #20]	; (8022cfc <HAL_RCC_GetPCLK2Freq+0x20>)
 8022ce8:	689b      	ldr	r3, [r3, #8]
 8022cea:	0b5b      	lsrs	r3, r3, #13
 8022cec:	f003 0307 	and.w	r3, r3, #7
 8022cf0:	4a03      	ldr	r2, [pc, #12]	; (8022d00 <HAL_RCC_GetPCLK2Freq+0x24>)
 8022cf2:	5cd3      	ldrb	r3, [r2, r3]
 8022cf4:	fa21 f303 	lsr.w	r3, r1, r3
}
 8022cf8:	4618      	mov	r0, r3
 8022cfa:	bd80      	pop	{r7, pc}
 8022cfc:	40023800 	.word	0x40023800
 8022d00:	08024a44 	.word	0x08024a44

08022d04 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8022d04:	b580      	push	{r7, lr}
 8022d06:	b082      	sub	sp, #8
 8022d08:	af00      	add	r7, sp, #0
 8022d0a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8022d0c:	687b      	ldr	r3, [r7, #4]
 8022d0e:	2b00      	cmp	r3, #0
 8022d10:	d101      	bne.n	8022d16 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8022d12:	2301      	movs	r3, #1
 8022d14:	e03f      	b.n	8022d96 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8022d16:	687b      	ldr	r3, [r7, #4]
 8022d18:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8022d1c:	b2db      	uxtb	r3, r3
 8022d1e:	2b00      	cmp	r3, #0
 8022d20:	d106      	bne.n	8022d30 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8022d22:	687b      	ldr	r3, [r7, #4]
 8022d24:	2200      	movs	r2, #0
 8022d26:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8022d2a:	6878      	ldr	r0, [r7, #4]
 8022d2c:	f7fe f916 	bl	8020f5c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8022d30:	687b      	ldr	r3, [r7, #4]
 8022d32:	2224      	movs	r2, #36	; 0x24
 8022d34:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8022d38:	687b      	ldr	r3, [r7, #4]
 8022d3a:	681b      	ldr	r3, [r3, #0]
 8022d3c:	68da      	ldr	r2, [r3, #12]
 8022d3e:	687b      	ldr	r3, [r7, #4]
 8022d40:	681b      	ldr	r3, [r3, #0]
 8022d42:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8022d46:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8022d48:	6878      	ldr	r0, [r7, #4]
 8022d4a:	f000 f90b 	bl	8022f64 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8022d4e:	687b      	ldr	r3, [r7, #4]
 8022d50:	681b      	ldr	r3, [r3, #0]
 8022d52:	691a      	ldr	r2, [r3, #16]
 8022d54:	687b      	ldr	r3, [r7, #4]
 8022d56:	681b      	ldr	r3, [r3, #0]
 8022d58:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8022d5c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8022d5e:	687b      	ldr	r3, [r7, #4]
 8022d60:	681b      	ldr	r3, [r3, #0]
 8022d62:	695a      	ldr	r2, [r3, #20]
 8022d64:	687b      	ldr	r3, [r7, #4]
 8022d66:	681b      	ldr	r3, [r3, #0]
 8022d68:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8022d6c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8022d6e:	687b      	ldr	r3, [r7, #4]
 8022d70:	681b      	ldr	r3, [r3, #0]
 8022d72:	68da      	ldr	r2, [r3, #12]
 8022d74:	687b      	ldr	r3, [r7, #4]
 8022d76:	681b      	ldr	r3, [r3, #0]
 8022d78:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8022d7c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8022d7e:	687b      	ldr	r3, [r7, #4]
 8022d80:	2200      	movs	r2, #0
 8022d82:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8022d84:	687b      	ldr	r3, [r7, #4]
 8022d86:	2220      	movs	r2, #32
 8022d88:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8022d8c:	687b      	ldr	r3, [r7, #4]
 8022d8e:	2220      	movs	r2, #32
 8022d90:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8022d94:	2300      	movs	r3, #0
}
 8022d96:	4618      	mov	r0, r3
 8022d98:	3708      	adds	r7, #8
 8022d9a:	46bd      	mov	sp, r7
 8022d9c:	bd80      	pop	{r7, pc}

08022d9e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8022d9e:	b580      	push	{r7, lr}
 8022da0:	b088      	sub	sp, #32
 8022da2:	af02      	add	r7, sp, #8
 8022da4:	60f8      	str	r0, [r7, #12]
 8022da6:	60b9      	str	r1, [r7, #8]
 8022da8:	603b      	str	r3, [r7, #0]
 8022daa:	4613      	mov	r3, r2
 8022dac:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8022dae:	2300      	movs	r3, #0
 8022db0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8022db2:	68fb      	ldr	r3, [r7, #12]
 8022db4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8022db8:	b2db      	uxtb	r3, r3
 8022dba:	2b20      	cmp	r3, #32
 8022dbc:	f040 8083 	bne.w	8022ec6 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8022dc0:	68bb      	ldr	r3, [r7, #8]
 8022dc2:	2b00      	cmp	r3, #0
 8022dc4:	d002      	beq.n	8022dcc <HAL_UART_Transmit+0x2e>
 8022dc6:	88fb      	ldrh	r3, [r7, #6]
 8022dc8:	2b00      	cmp	r3, #0
 8022dca:	d101      	bne.n	8022dd0 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8022dcc:	2301      	movs	r3, #1
 8022dce:	e07b      	b.n	8022ec8 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8022dd0:	68fb      	ldr	r3, [r7, #12]
 8022dd2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8022dd6:	2b01      	cmp	r3, #1
 8022dd8:	d101      	bne.n	8022dde <HAL_UART_Transmit+0x40>
 8022dda:	2302      	movs	r3, #2
 8022ddc:	e074      	b.n	8022ec8 <HAL_UART_Transmit+0x12a>
 8022dde:	68fb      	ldr	r3, [r7, #12]
 8022de0:	2201      	movs	r2, #1
 8022de2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8022de6:	68fb      	ldr	r3, [r7, #12]
 8022de8:	2200      	movs	r2, #0
 8022dea:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8022dec:	68fb      	ldr	r3, [r7, #12]
 8022dee:	2221      	movs	r2, #33	; 0x21
 8022df0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8022df4:	f7fe fac2 	bl	802137c <HAL_GetTick>
 8022df8:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8022dfa:	68fb      	ldr	r3, [r7, #12]
 8022dfc:	88fa      	ldrh	r2, [r7, #6]
 8022dfe:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8022e00:	68fb      	ldr	r3, [r7, #12]
 8022e02:	88fa      	ldrh	r2, [r7, #6]
 8022e04:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8022e06:	68fb      	ldr	r3, [r7, #12]
 8022e08:	2200      	movs	r2, #0
 8022e0a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8022e0e:	e042      	b.n	8022e96 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8022e10:	68fb      	ldr	r3, [r7, #12]
 8022e12:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8022e14:	b29b      	uxth	r3, r3
 8022e16:	3b01      	subs	r3, #1
 8022e18:	b29a      	uxth	r2, r3
 8022e1a:	68fb      	ldr	r3, [r7, #12]
 8022e1c:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8022e1e:	68fb      	ldr	r3, [r7, #12]
 8022e20:	689b      	ldr	r3, [r3, #8]
 8022e22:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8022e26:	d122      	bne.n	8022e6e <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8022e28:	683b      	ldr	r3, [r7, #0]
 8022e2a:	9300      	str	r3, [sp, #0]
 8022e2c:	697b      	ldr	r3, [r7, #20]
 8022e2e:	2200      	movs	r2, #0
 8022e30:	2180      	movs	r1, #128	; 0x80
 8022e32:	68f8      	ldr	r0, [r7, #12]
 8022e34:	f000 f84c 	bl	8022ed0 <UART_WaitOnFlagUntilTimeout>
 8022e38:	4603      	mov	r3, r0
 8022e3a:	2b00      	cmp	r3, #0
 8022e3c:	d001      	beq.n	8022e42 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8022e3e:	2303      	movs	r3, #3
 8022e40:	e042      	b.n	8022ec8 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8022e42:	68bb      	ldr	r3, [r7, #8]
 8022e44:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8022e46:	693b      	ldr	r3, [r7, #16]
 8022e48:	881b      	ldrh	r3, [r3, #0]
 8022e4a:	461a      	mov	r2, r3
 8022e4c:	68fb      	ldr	r3, [r7, #12]
 8022e4e:	681b      	ldr	r3, [r3, #0]
 8022e50:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8022e54:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8022e56:	68fb      	ldr	r3, [r7, #12]
 8022e58:	691b      	ldr	r3, [r3, #16]
 8022e5a:	2b00      	cmp	r3, #0
 8022e5c:	d103      	bne.n	8022e66 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8022e5e:	68bb      	ldr	r3, [r7, #8]
 8022e60:	3302      	adds	r3, #2
 8022e62:	60bb      	str	r3, [r7, #8]
 8022e64:	e017      	b.n	8022e96 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8022e66:	68bb      	ldr	r3, [r7, #8]
 8022e68:	3301      	adds	r3, #1
 8022e6a:	60bb      	str	r3, [r7, #8]
 8022e6c:	e013      	b.n	8022e96 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8022e6e:	683b      	ldr	r3, [r7, #0]
 8022e70:	9300      	str	r3, [sp, #0]
 8022e72:	697b      	ldr	r3, [r7, #20]
 8022e74:	2200      	movs	r2, #0
 8022e76:	2180      	movs	r1, #128	; 0x80
 8022e78:	68f8      	ldr	r0, [r7, #12]
 8022e7a:	f000 f829 	bl	8022ed0 <UART_WaitOnFlagUntilTimeout>
 8022e7e:	4603      	mov	r3, r0
 8022e80:	2b00      	cmp	r3, #0
 8022e82:	d001      	beq.n	8022e88 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8022e84:	2303      	movs	r3, #3
 8022e86:	e01f      	b.n	8022ec8 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8022e88:	68bb      	ldr	r3, [r7, #8]
 8022e8a:	1c5a      	adds	r2, r3, #1
 8022e8c:	60ba      	str	r2, [r7, #8]
 8022e8e:	781a      	ldrb	r2, [r3, #0]
 8022e90:	68fb      	ldr	r3, [r7, #12]
 8022e92:	681b      	ldr	r3, [r3, #0]
 8022e94:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8022e96:	68fb      	ldr	r3, [r7, #12]
 8022e98:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8022e9a:	b29b      	uxth	r3, r3
 8022e9c:	2b00      	cmp	r3, #0
 8022e9e:	d1b7      	bne.n	8022e10 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8022ea0:	683b      	ldr	r3, [r7, #0]
 8022ea2:	9300      	str	r3, [sp, #0]
 8022ea4:	697b      	ldr	r3, [r7, #20]
 8022ea6:	2200      	movs	r2, #0
 8022ea8:	2140      	movs	r1, #64	; 0x40
 8022eaa:	68f8      	ldr	r0, [r7, #12]
 8022eac:	f000 f810 	bl	8022ed0 <UART_WaitOnFlagUntilTimeout>
 8022eb0:	4603      	mov	r3, r0
 8022eb2:	2b00      	cmp	r3, #0
 8022eb4:	d001      	beq.n	8022eba <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8022eb6:	2303      	movs	r3, #3
 8022eb8:	e006      	b.n	8022ec8 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8022eba:	68fb      	ldr	r3, [r7, #12]
 8022ebc:	2220      	movs	r2, #32
 8022ebe:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8022ec2:	2300      	movs	r3, #0
 8022ec4:	e000      	b.n	8022ec8 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8022ec6:	2302      	movs	r3, #2
  }
}
 8022ec8:	4618      	mov	r0, r3
 8022eca:	3718      	adds	r7, #24
 8022ecc:	46bd      	mov	sp, r7
 8022ece:	bd80      	pop	{r7, pc}

08022ed0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8022ed0:	b580      	push	{r7, lr}
 8022ed2:	b084      	sub	sp, #16
 8022ed4:	af00      	add	r7, sp, #0
 8022ed6:	60f8      	str	r0, [r7, #12]
 8022ed8:	60b9      	str	r1, [r7, #8]
 8022eda:	603b      	str	r3, [r7, #0]
 8022edc:	4613      	mov	r3, r2
 8022ede:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8022ee0:	e02c      	b.n	8022f3c <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8022ee2:	69bb      	ldr	r3, [r7, #24]
 8022ee4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8022ee8:	d028      	beq.n	8022f3c <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8022eea:	69bb      	ldr	r3, [r7, #24]
 8022eec:	2b00      	cmp	r3, #0
 8022eee:	d007      	beq.n	8022f00 <UART_WaitOnFlagUntilTimeout+0x30>
 8022ef0:	f7fe fa44 	bl	802137c <HAL_GetTick>
 8022ef4:	4602      	mov	r2, r0
 8022ef6:	683b      	ldr	r3, [r7, #0]
 8022ef8:	1ad3      	subs	r3, r2, r3
 8022efa:	69ba      	ldr	r2, [r7, #24]
 8022efc:	429a      	cmp	r2, r3
 8022efe:	d21d      	bcs.n	8022f3c <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8022f00:	68fb      	ldr	r3, [r7, #12]
 8022f02:	681b      	ldr	r3, [r3, #0]
 8022f04:	68da      	ldr	r2, [r3, #12]
 8022f06:	68fb      	ldr	r3, [r7, #12]
 8022f08:	681b      	ldr	r3, [r3, #0]
 8022f0a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8022f0e:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8022f10:	68fb      	ldr	r3, [r7, #12]
 8022f12:	681b      	ldr	r3, [r3, #0]
 8022f14:	695a      	ldr	r2, [r3, #20]
 8022f16:	68fb      	ldr	r3, [r7, #12]
 8022f18:	681b      	ldr	r3, [r3, #0]
 8022f1a:	f022 0201 	bic.w	r2, r2, #1
 8022f1e:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8022f20:	68fb      	ldr	r3, [r7, #12]
 8022f22:	2220      	movs	r2, #32
 8022f24:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8022f28:	68fb      	ldr	r3, [r7, #12]
 8022f2a:	2220      	movs	r2, #32
 8022f2c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8022f30:	68fb      	ldr	r3, [r7, #12]
 8022f32:	2200      	movs	r2, #0
 8022f34:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8022f38:	2303      	movs	r3, #3
 8022f3a:	e00f      	b.n	8022f5c <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8022f3c:	68fb      	ldr	r3, [r7, #12]
 8022f3e:	681b      	ldr	r3, [r3, #0]
 8022f40:	681a      	ldr	r2, [r3, #0]
 8022f42:	68bb      	ldr	r3, [r7, #8]
 8022f44:	4013      	ands	r3, r2
 8022f46:	68ba      	ldr	r2, [r7, #8]
 8022f48:	429a      	cmp	r2, r3
 8022f4a:	bf0c      	ite	eq
 8022f4c:	2301      	moveq	r3, #1
 8022f4e:	2300      	movne	r3, #0
 8022f50:	b2db      	uxtb	r3, r3
 8022f52:	461a      	mov	r2, r3
 8022f54:	79fb      	ldrb	r3, [r7, #7]
 8022f56:	429a      	cmp	r2, r3
 8022f58:	d0c3      	beq.n	8022ee2 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8022f5a:	2300      	movs	r3, #0
}
 8022f5c:	4618      	mov	r0, r3
 8022f5e:	3710      	adds	r7, #16
 8022f60:	46bd      	mov	sp, r7
 8022f62:	bd80      	pop	{r7, pc}

08022f64 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8022f64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022f68:	b085      	sub	sp, #20
 8022f6a:	af00      	add	r7, sp, #0
 8022f6c:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8022f6e:	687b      	ldr	r3, [r7, #4]
 8022f70:	681b      	ldr	r3, [r3, #0]
 8022f72:	691b      	ldr	r3, [r3, #16]
 8022f74:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8022f78:	687b      	ldr	r3, [r7, #4]
 8022f7a:	68da      	ldr	r2, [r3, #12]
 8022f7c:	687b      	ldr	r3, [r7, #4]
 8022f7e:	681b      	ldr	r3, [r3, #0]
 8022f80:	430a      	orrs	r2, r1
 8022f82:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8022f84:	687b      	ldr	r3, [r7, #4]
 8022f86:	689a      	ldr	r2, [r3, #8]
 8022f88:	687b      	ldr	r3, [r7, #4]
 8022f8a:	691b      	ldr	r3, [r3, #16]
 8022f8c:	431a      	orrs	r2, r3
 8022f8e:	687b      	ldr	r3, [r7, #4]
 8022f90:	695b      	ldr	r3, [r3, #20]
 8022f92:	431a      	orrs	r2, r3
 8022f94:	687b      	ldr	r3, [r7, #4]
 8022f96:	69db      	ldr	r3, [r3, #28]
 8022f98:	4313      	orrs	r3, r2
 8022f9a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8022f9c:	687b      	ldr	r3, [r7, #4]
 8022f9e:	681b      	ldr	r3, [r3, #0]
 8022fa0:	68db      	ldr	r3, [r3, #12]
 8022fa2:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8022fa6:	f023 030c 	bic.w	r3, r3, #12
 8022faa:	687a      	ldr	r2, [r7, #4]
 8022fac:	6812      	ldr	r2, [r2, #0]
 8022fae:	68f9      	ldr	r1, [r7, #12]
 8022fb0:	430b      	orrs	r3, r1
 8022fb2:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8022fb4:	687b      	ldr	r3, [r7, #4]
 8022fb6:	681b      	ldr	r3, [r3, #0]
 8022fb8:	695b      	ldr	r3, [r3, #20]
 8022fba:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8022fbe:	687b      	ldr	r3, [r7, #4]
 8022fc0:	699a      	ldr	r2, [r3, #24]
 8022fc2:	687b      	ldr	r3, [r7, #4]
 8022fc4:	681b      	ldr	r3, [r3, #0]
 8022fc6:	430a      	orrs	r2, r1
 8022fc8:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8022fca:	687b      	ldr	r3, [r7, #4]
 8022fcc:	69db      	ldr	r3, [r3, #28]
 8022fce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8022fd2:	f040 818b 	bne.w	80232ec <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8022fd6:	687b      	ldr	r3, [r7, #4]
 8022fd8:	681b      	ldr	r3, [r3, #0]
 8022fda:	4ac1      	ldr	r2, [pc, #772]	; (80232e0 <UART_SetConfig+0x37c>)
 8022fdc:	4293      	cmp	r3, r2
 8022fde:	d005      	beq.n	8022fec <UART_SetConfig+0x88>
 8022fe0:	687b      	ldr	r3, [r7, #4]
 8022fe2:	681b      	ldr	r3, [r3, #0]
 8022fe4:	4abf      	ldr	r2, [pc, #764]	; (80232e4 <UART_SetConfig+0x380>)
 8022fe6:	4293      	cmp	r3, r2
 8022fe8:	f040 80bd 	bne.w	8023166 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8022fec:	f7ff fe76 	bl	8022cdc <HAL_RCC_GetPCLK2Freq>
 8022ff0:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8022ff2:	68bb      	ldr	r3, [r7, #8]
 8022ff4:	461d      	mov	r5, r3
 8022ff6:	f04f 0600 	mov.w	r6, #0
 8022ffa:	46a8      	mov	r8, r5
 8022ffc:	46b1      	mov	r9, r6
 8022ffe:	eb18 0308 	adds.w	r3, r8, r8
 8023002:	eb49 0409 	adc.w	r4, r9, r9
 8023006:	4698      	mov	r8, r3
 8023008:	46a1      	mov	r9, r4
 802300a:	eb18 0805 	adds.w	r8, r8, r5
 802300e:	eb49 0906 	adc.w	r9, r9, r6
 8023012:	f04f 0100 	mov.w	r1, #0
 8023016:	f04f 0200 	mov.w	r2, #0
 802301a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 802301e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8023022:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8023026:	4688      	mov	r8, r1
 8023028:	4691      	mov	r9, r2
 802302a:	eb18 0005 	adds.w	r0, r8, r5
 802302e:	eb49 0106 	adc.w	r1, r9, r6
 8023032:	687b      	ldr	r3, [r7, #4]
 8023034:	685b      	ldr	r3, [r3, #4]
 8023036:	461d      	mov	r5, r3
 8023038:	f04f 0600 	mov.w	r6, #0
 802303c:	196b      	adds	r3, r5, r5
 802303e:	eb46 0406 	adc.w	r4, r6, r6
 8023042:	461a      	mov	r2, r3
 8023044:	4623      	mov	r3, r4
 8023046:	f7fd fb23 	bl	8020690 <__aeabi_uldivmod>
 802304a:	4603      	mov	r3, r0
 802304c:	460c      	mov	r4, r1
 802304e:	461a      	mov	r2, r3
 8023050:	4ba5      	ldr	r3, [pc, #660]	; (80232e8 <UART_SetConfig+0x384>)
 8023052:	fba3 2302 	umull	r2, r3, r3, r2
 8023056:	095b      	lsrs	r3, r3, #5
 8023058:	ea4f 1803 	mov.w	r8, r3, lsl #4
 802305c:	68bb      	ldr	r3, [r7, #8]
 802305e:	461d      	mov	r5, r3
 8023060:	f04f 0600 	mov.w	r6, #0
 8023064:	46a9      	mov	r9, r5
 8023066:	46b2      	mov	sl, r6
 8023068:	eb19 0309 	adds.w	r3, r9, r9
 802306c:	eb4a 040a 	adc.w	r4, sl, sl
 8023070:	4699      	mov	r9, r3
 8023072:	46a2      	mov	sl, r4
 8023074:	eb19 0905 	adds.w	r9, r9, r5
 8023078:	eb4a 0a06 	adc.w	sl, sl, r6
 802307c:	f04f 0100 	mov.w	r1, #0
 8023080:	f04f 0200 	mov.w	r2, #0
 8023084:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8023088:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 802308c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8023090:	4689      	mov	r9, r1
 8023092:	4692      	mov	sl, r2
 8023094:	eb19 0005 	adds.w	r0, r9, r5
 8023098:	eb4a 0106 	adc.w	r1, sl, r6
 802309c:	687b      	ldr	r3, [r7, #4]
 802309e:	685b      	ldr	r3, [r3, #4]
 80230a0:	461d      	mov	r5, r3
 80230a2:	f04f 0600 	mov.w	r6, #0
 80230a6:	196b      	adds	r3, r5, r5
 80230a8:	eb46 0406 	adc.w	r4, r6, r6
 80230ac:	461a      	mov	r2, r3
 80230ae:	4623      	mov	r3, r4
 80230b0:	f7fd faee 	bl	8020690 <__aeabi_uldivmod>
 80230b4:	4603      	mov	r3, r0
 80230b6:	460c      	mov	r4, r1
 80230b8:	461a      	mov	r2, r3
 80230ba:	4b8b      	ldr	r3, [pc, #556]	; (80232e8 <UART_SetConfig+0x384>)
 80230bc:	fba3 1302 	umull	r1, r3, r3, r2
 80230c0:	095b      	lsrs	r3, r3, #5
 80230c2:	2164      	movs	r1, #100	; 0x64
 80230c4:	fb01 f303 	mul.w	r3, r1, r3
 80230c8:	1ad3      	subs	r3, r2, r3
 80230ca:	00db      	lsls	r3, r3, #3
 80230cc:	3332      	adds	r3, #50	; 0x32
 80230ce:	4a86      	ldr	r2, [pc, #536]	; (80232e8 <UART_SetConfig+0x384>)
 80230d0:	fba2 2303 	umull	r2, r3, r2, r3
 80230d4:	095b      	lsrs	r3, r3, #5
 80230d6:	005b      	lsls	r3, r3, #1
 80230d8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80230dc:	4498      	add	r8, r3
 80230de:	68bb      	ldr	r3, [r7, #8]
 80230e0:	461d      	mov	r5, r3
 80230e2:	f04f 0600 	mov.w	r6, #0
 80230e6:	46a9      	mov	r9, r5
 80230e8:	46b2      	mov	sl, r6
 80230ea:	eb19 0309 	adds.w	r3, r9, r9
 80230ee:	eb4a 040a 	adc.w	r4, sl, sl
 80230f2:	4699      	mov	r9, r3
 80230f4:	46a2      	mov	sl, r4
 80230f6:	eb19 0905 	adds.w	r9, r9, r5
 80230fa:	eb4a 0a06 	adc.w	sl, sl, r6
 80230fe:	f04f 0100 	mov.w	r1, #0
 8023102:	f04f 0200 	mov.w	r2, #0
 8023106:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 802310a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 802310e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8023112:	4689      	mov	r9, r1
 8023114:	4692      	mov	sl, r2
 8023116:	eb19 0005 	adds.w	r0, r9, r5
 802311a:	eb4a 0106 	adc.w	r1, sl, r6
 802311e:	687b      	ldr	r3, [r7, #4]
 8023120:	685b      	ldr	r3, [r3, #4]
 8023122:	461d      	mov	r5, r3
 8023124:	f04f 0600 	mov.w	r6, #0
 8023128:	196b      	adds	r3, r5, r5
 802312a:	eb46 0406 	adc.w	r4, r6, r6
 802312e:	461a      	mov	r2, r3
 8023130:	4623      	mov	r3, r4
 8023132:	f7fd faad 	bl	8020690 <__aeabi_uldivmod>
 8023136:	4603      	mov	r3, r0
 8023138:	460c      	mov	r4, r1
 802313a:	461a      	mov	r2, r3
 802313c:	4b6a      	ldr	r3, [pc, #424]	; (80232e8 <UART_SetConfig+0x384>)
 802313e:	fba3 1302 	umull	r1, r3, r3, r2
 8023142:	095b      	lsrs	r3, r3, #5
 8023144:	2164      	movs	r1, #100	; 0x64
 8023146:	fb01 f303 	mul.w	r3, r1, r3
 802314a:	1ad3      	subs	r3, r2, r3
 802314c:	00db      	lsls	r3, r3, #3
 802314e:	3332      	adds	r3, #50	; 0x32
 8023150:	4a65      	ldr	r2, [pc, #404]	; (80232e8 <UART_SetConfig+0x384>)
 8023152:	fba2 2303 	umull	r2, r3, r2, r3
 8023156:	095b      	lsrs	r3, r3, #5
 8023158:	f003 0207 	and.w	r2, r3, #7
 802315c:	687b      	ldr	r3, [r7, #4]
 802315e:	681b      	ldr	r3, [r3, #0]
 8023160:	4442      	add	r2, r8
 8023162:	609a      	str	r2, [r3, #8]
 8023164:	e26f      	b.n	8023646 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8023166:	f7ff fda5 	bl	8022cb4 <HAL_RCC_GetPCLK1Freq>
 802316a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 802316c:	68bb      	ldr	r3, [r7, #8]
 802316e:	461d      	mov	r5, r3
 8023170:	f04f 0600 	mov.w	r6, #0
 8023174:	46a8      	mov	r8, r5
 8023176:	46b1      	mov	r9, r6
 8023178:	eb18 0308 	adds.w	r3, r8, r8
 802317c:	eb49 0409 	adc.w	r4, r9, r9
 8023180:	4698      	mov	r8, r3
 8023182:	46a1      	mov	r9, r4
 8023184:	eb18 0805 	adds.w	r8, r8, r5
 8023188:	eb49 0906 	adc.w	r9, r9, r6
 802318c:	f04f 0100 	mov.w	r1, #0
 8023190:	f04f 0200 	mov.w	r2, #0
 8023194:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8023198:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 802319c:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80231a0:	4688      	mov	r8, r1
 80231a2:	4691      	mov	r9, r2
 80231a4:	eb18 0005 	adds.w	r0, r8, r5
 80231a8:	eb49 0106 	adc.w	r1, r9, r6
 80231ac:	687b      	ldr	r3, [r7, #4]
 80231ae:	685b      	ldr	r3, [r3, #4]
 80231b0:	461d      	mov	r5, r3
 80231b2:	f04f 0600 	mov.w	r6, #0
 80231b6:	196b      	adds	r3, r5, r5
 80231b8:	eb46 0406 	adc.w	r4, r6, r6
 80231bc:	461a      	mov	r2, r3
 80231be:	4623      	mov	r3, r4
 80231c0:	f7fd fa66 	bl	8020690 <__aeabi_uldivmod>
 80231c4:	4603      	mov	r3, r0
 80231c6:	460c      	mov	r4, r1
 80231c8:	461a      	mov	r2, r3
 80231ca:	4b47      	ldr	r3, [pc, #284]	; (80232e8 <UART_SetConfig+0x384>)
 80231cc:	fba3 2302 	umull	r2, r3, r3, r2
 80231d0:	095b      	lsrs	r3, r3, #5
 80231d2:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80231d6:	68bb      	ldr	r3, [r7, #8]
 80231d8:	461d      	mov	r5, r3
 80231da:	f04f 0600 	mov.w	r6, #0
 80231de:	46a9      	mov	r9, r5
 80231e0:	46b2      	mov	sl, r6
 80231e2:	eb19 0309 	adds.w	r3, r9, r9
 80231e6:	eb4a 040a 	adc.w	r4, sl, sl
 80231ea:	4699      	mov	r9, r3
 80231ec:	46a2      	mov	sl, r4
 80231ee:	eb19 0905 	adds.w	r9, r9, r5
 80231f2:	eb4a 0a06 	adc.w	sl, sl, r6
 80231f6:	f04f 0100 	mov.w	r1, #0
 80231fa:	f04f 0200 	mov.w	r2, #0
 80231fe:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8023202:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8023206:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 802320a:	4689      	mov	r9, r1
 802320c:	4692      	mov	sl, r2
 802320e:	eb19 0005 	adds.w	r0, r9, r5
 8023212:	eb4a 0106 	adc.w	r1, sl, r6
 8023216:	687b      	ldr	r3, [r7, #4]
 8023218:	685b      	ldr	r3, [r3, #4]
 802321a:	461d      	mov	r5, r3
 802321c:	f04f 0600 	mov.w	r6, #0
 8023220:	196b      	adds	r3, r5, r5
 8023222:	eb46 0406 	adc.w	r4, r6, r6
 8023226:	461a      	mov	r2, r3
 8023228:	4623      	mov	r3, r4
 802322a:	f7fd fa31 	bl	8020690 <__aeabi_uldivmod>
 802322e:	4603      	mov	r3, r0
 8023230:	460c      	mov	r4, r1
 8023232:	461a      	mov	r2, r3
 8023234:	4b2c      	ldr	r3, [pc, #176]	; (80232e8 <UART_SetConfig+0x384>)
 8023236:	fba3 1302 	umull	r1, r3, r3, r2
 802323a:	095b      	lsrs	r3, r3, #5
 802323c:	2164      	movs	r1, #100	; 0x64
 802323e:	fb01 f303 	mul.w	r3, r1, r3
 8023242:	1ad3      	subs	r3, r2, r3
 8023244:	00db      	lsls	r3, r3, #3
 8023246:	3332      	adds	r3, #50	; 0x32
 8023248:	4a27      	ldr	r2, [pc, #156]	; (80232e8 <UART_SetConfig+0x384>)
 802324a:	fba2 2303 	umull	r2, r3, r2, r3
 802324e:	095b      	lsrs	r3, r3, #5
 8023250:	005b      	lsls	r3, r3, #1
 8023252:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8023256:	4498      	add	r8, r3
 8023258:	68bb      	ldr	r3, [r7, #8]
 802325a:	461d      	mov	r5, r3
 802325c:	f04f 0600 	mov.w	r6, #0
 8023260:	46a9      	mov	r9, r5
 8023262:	46b2      	mov	sl, r6
 8023264:	eb19 0309 	adds.w	r3, r9, r9
 8023268:	eb4a 040a 	adc.w	r4, sl, sl
 802326c:	4699      	mov	r9, r3
 802326e:	46a2      	mov	sl, r4
 8023270:	eb19 0905 	adds.w	r9, r9, r5
 8023274:	eb4a 0a06 	adc.w	sl, sl, r6
 8023278:	f04f 0100 	mov.w	r1, #0
 802327c:	f04f 0200 	mov.w	r2, #0
 8023280:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8023284:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8023288:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 802328c:	4689      	mov	r9, r1
 802328e:	4692      	mov	sl, r2
 8023290:	eb19 0005 	adds.w	r0, r9, r5
 8023294:	eb4a 0106 	adc.w	r1, sl, r6
 8023298:	687b      	ldr	r3, [r7, #4]
 802329a:	685b      	ldr	r3, [r3, #4]
 802329c:	461d      	mov	r5, r3
 802329e:	f04f 0600 	mov.w	r6, #0
 80232a2:	196b      	adds	r3, r5, r5
 80232a4:	eb46 0406 	adc.w	r4, r6, r6
 80232a8:	461a      	mov	r2, r3
 80232aa:	4623      	mov	r3, r4
 80232ac:	f7fd f9f0 	bl	8020690 <__aeabi_uldivmod>
 80232b0:	4603      	mov	r3, r0
 80232b2:	460c      	mov	r4, r1
 80232b4:	461a      	mov	r2, r3
 80232b6:	4b0c      	ldr	r3, [pc, #48]	; (80232e8 <UART_SetConfig+0x384>)
 80232b8:	fba3 1302 	umull	r1, r3, r3, r2
 80232bc:	095b      	lsrs	r3, r3, #5
 80232be:	2164      	movs	r1, #100	; 0x64
 80232c0:	fb01 f303 	mul.w	r3, r1, r3
 80232c4:	1ad3      	subs	r3, r2, r3
 80232c6:	00db      	lsls	r3, r3, #3
 80232c8:	3332      	adds	r3, #50	; 0x32
 80232ca:	4a07      	ldr	r2, [pc, #28]	; (80232e8 <UART_SetConfig+0x384>)
 80232cc:	fba2 2303 	umull	r2, r3, r2, r3
 80232d0:	095b      	lsrs	r3, r3, #5
 80232d2:	f003 0207 	and.w	r2, r3, #7
 80232d6:	687b      	ldr	r3, [r7, #4]
 80232d8:	681b      	ldr	r3, [r3, #0]
 80232da:	4442      	add	r2, r8
 80232dc:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 80232de:	e1b2      	b.n	8023646 <UART_SetConfig+0x6e2>
 80232e0:	40011000 	.word	0x40011000
 80232e4:	40011400 	.word	0x40011400
 80232e8:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80232ec:	687b      	ldr	r3, [r7, #4]
 80232ee:	681b      	ldr	r3, [r3, #0]
 80232f0:	4ad7      	ldr	r2, [pc, #860]	; (8023650 <UART_SetConfig+0x6ec>)
 80232f2:	4293      	cmp	r3, r2
 80232f4:	d005      	beq.n	8023302 <UART_SetConfig+0x39e>
 80232f6:	687b      	ldr	r3, [r7, #4]
 80232f8:	681b      	ldr	r3, [r3, #0]
 80232fa:	4ad6      	ldr	r2, [pc, #856]	; (8023654 <UART_SetConfig+0x6f0>)
 80232fc:	4293      	cmp	r3, r2
 80232fe:	f040 80d1 	bne.w	80234a4 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8023302:	f7ff fceb 	bl	8022cdc <HAL_RCC_GetPCLK2Freq>
 8023306:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8023308:	68bb      	ldr	r3, [r7, #8]
 802330a:	469a      	mov	sl, r3
 802330c:	f04f 0b00 	mov.w	fp, #0
 8023310:	46d0      	mov	r8, sl
 8023312:	46d9      	mov	r9, fp
 8023314:	eb18 0308 	adds.w	r3, r8, r8
 8023318:	eb49 0409 	adc.w	r4, r9, r9
 802331c:	4698      	mov	r8, r3
 802331e:	46a1      	mov	r9, r4
 8023320:	eb18 080a 	adds.w	r8, r8, sl
 8023324:	eb49 090b 	adc.w	r9, r9, fp
 8023328:	f04f 0100 	mov.w	r1, #0
 802332c:	f04f 0200 	mov.w	r2, #0
 8023330:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8023334:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8023338:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 802333c:	4688      	mov	r8, r1
 802333e:	4691      	mov	r9, r2
 8023340:	eb1a 0508 	adds.w	r5, sl, r8
 8023344:	eb4b 0609 	adc.w	r6, fp, r9
 8023348:	687b      	ldr	r3, [r7, #4]
 802334a:	685b      	ldr	r3, [r3, #4]
 802334c:	4619      	mov	r1, r3
 802334e:	f04f 0200 	mov.w	r2, #0
 8023352:	f04f 0300 	mov.w	r3, #0
 8023356:	f04f 0400 	mov.w	r4, #0
 802335a:	0094      	lsls	r4, r2, #2
 802335c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8023360:	008b      	lsls	r3, r1, #2
 8023362:	461a      	mov	r2, r3
 8023364:	4623      	mov	r3, r4
 8023366:	4628      	mov	r0, r5
 8023368:	4631      	mov	r1, r6
 802336a:	f7fd f991 	bl	8020690 <__aeabi_uldivmod>
 802336e:	4603      	mov	r3, r0
 8023370:	460c      	mov	r4, r1
 8023372:	461a      	mov	r2, r3
 8023374:	4bb8      	ldr	r3, [pc, #736]	; (8023658 <UART_SetConfig+0x6f4>)
 8023376:	fba3 2302 	umull	r2, r3, r3, r2
 802337a:	095b      	lsrs	r3, r3, #5
 802337c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8023380:	68bb      	ldr	r3, [r7, #8]
 8023382:	469b      	mov	fp, r3
 8023384:	f04f 0c00 	mov.w	ip, #0
 8023388:	46d9      	mov	r9, fp
 802338a:	46e2      	mov	sl, ip
 802338c:	eb19 0309 	adds.w	r3, r9, r9
 8023390:	eb4a 040a 	adc.w	r4, sl, sl
 8023394:	4699      	mov	r9, r3
 8023396:	46a2      	mov	sl, r4
 8023398:	eb19 090b 	adds.w	r9, r9, fp
 802339c:	eb4a 0a0c 	adc.w	sl, sl, ip
 80233a0:	f04f 0100 	mov.w	r1, #0
 80233a4:	f04f 0200 	mov.w	r2, #0
 80233a8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80233ac:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80233b0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80233b4:	4689      	mov	r9, r1
 80233b6:	4692      	mov	sl, r2
 80233b8:	eb1b 0509 	adds.w	r5, fp, r9
 80233bc:	eb4c 060a 	adc.w	r6, ip, sl
 80233c0:	687b      	ldr	r3, [r7, #4]
 80233c2:	685b      	ldr	r3, [r3, #4]
 80233c4:	4619      	mov	r1, r3
 80233c6:	f04f 0200 	mov.w	r2, #0
 80233ca:	f04f 0300 	mov.w	r3, #0
 80233ce:	f04f 0400 	mov.w	r4, #0
 80233d2:	0094      	lsls	r4, r2, #2
 80233d4:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80233d8:	008b      	lsls	r3, r1, #2
 80233da:	461a      	mov	r2, r3
 80233dc:	4623      	mov	r3, r4
 80233de:	4628      	mov	r0, r5
 80233e0:	4631      	mov	r1, r6
 80233e2:	f7fd f955 	bl	8020690 <__aeabi_uldivmod>
 80233e6:	4603      	mov	r3, r0
 80233e8:	460c      	mov	r4, r1
 80233ea:	461a      	mov	r2, r3
 80233ec:	4b9a      	ldr	r3, [pc, #616]	; (8023658 <UART_SetConfig+0x6f4>)
 80233ee:	fba3 1302 	umull	r1, r3, r3, r2
 80233f2:	095b      	lsrs	r3, r3, #5
 80233f4:	2164      	movs	r1, #100	; 0x64
 80233f6:	fb01 f303 	mul.w	r3, r1, r3
 80233fa:	1ad3      	subs	r3, r2, r3
 80233fc:	011b      	lsls	r3, r3, #4
 80233fe:	3332      	adds	r3, #50	; 0x32
 8023400:	4a95      	ldr	r2, [pc, #596]	; (8023658 <UART_SetConfig+0x6f4>)
 8023402:	fba2 2303 	umull	r2, r3, r2, r3
 8023406:	095b      	lsrs	r3, r3, #5
 8023408:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 802340c:	4498      	add	r8, r3
 802340e:	68bb      	ldr	r3, [r7, #8]
 8023410:	469b      	mov	fp, r3
 8023412:	f04f 0c00 	mov.w	ip, #0
 8023416:	46d9      	mov	r9, fp
 8023418:	46e2      	mov	sl, ip
 802341a:	eb19 0309 	adds.w	r3, r9, r9
 802341e:	eb4a 040a 	adc.w	r4, sl, sl
 8023422:	4699      	mov	r9, r3
 8023424:	46a2      	mov	sl, r4
 8023426:	eb19 090b 	adds.w	r9, r9, fp
 802342a:	eb4a 0a0c 	adc.w	sl, sl, ip
 802342e:	f04f 0100 	mov.w	r1, #0
 8023432:	f04f 0200 	mov.w	r2, #0
 8023436:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 802343a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 802343e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8023442:	4689      	mov	r9, r1
 8023444:	4692      	mov	sl, r2
 8023446:	eb1b 0509 	adds.w	r5, fp, r9
 802344a:	eb4c 060a 	adc.w	r6, ip, sl
 802344e:	687b      	ldr	r3, [r7, #4]
 8023450:	685b      	ldr	r3, [r3, #4]
 8023452:	4619      	mov	r1, r3
 8023454:	f04f 0200 	mov.w	r2, #0
 8023458:	f04f 0300 	mov.w	r3, #0
 802345c:	f04f 0400 	mov.w	r4, #0
 8023460:	0094      	lsls	r4, r2, #2
 8023462:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8023466:	008b      	lsls	r3, r1, #2
 8023468:	461a      	mov	r2, r3
 802346a:	4623      	mov	r3, r4
 802346c:	4628      	mov	r0, r5
 802346e:	4631      	mov	r1, r6
 8023470:	f7fd f90e 	bl	8020690 <__aeabi_uldivmod>
 8023474:	4603      	mov	r3, r0
 8023476:	460c      	mov	r4, r1
 8023478:	461a      	mov	r2, r3
 802347a:	4b77      	ldr	r3, [pc, #476]	; (8023658 <UART_SetConfig+0x6f4>)
 802347c:	fba3 1302 	umull	r1, r3, r3, r2
 8023480:	095b      	lsrs	r3, r3, #5
 8023482:	2164      	movs	r1, #100	; 0x64
 8023484:	fb01 f303 	mul.w	r3, r1, r3
 8023488:	1ad3      	subs	r3, r2, r3
 802348a:	011b      	lsls	r3, r3, #4
 802348c:	3332      	adds	r3, #50	; 0x32
 802348e:	4a72      	ldr	r2, [pc, #456]	; (8023658 <UART_SetConfig+0x6f4>)
 8023490:	fba2 2303 	umull	r2, r3, r2, r3
 8023494:	095b      	lsrs	r3, r3, #5
 8023496:	f003 020f 	and.w	r2, r3, #15
 802349a:	687b      	ldr	r3, [r7, #4]
 802349c:	681b      	ldr	r3, [r3, #0]
 802349e:	4442      	add	r2, r8
 80234a0:	609a      	str	r2, [r3, #8]
 80234a2:	e0d0      	b.n	8023646 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 80234a4:	f7ff fc06 	bl	8022cb4 <HAL_RCC_GetPCLK1Freq>
 80234a8:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80234aa:	68bb      	ldr	r3, [r7, #8]
 80234ac:	469a      	mov	sl, r3
 80234ae:	f04f 0b00 	mov.w	fp, #0
 80234b2:	46d0      	mov	r8, sl
 80234b4:	46d9      	mov	r9, fp
 80234b6:	eb18 0308 	adds.w	r3, r8, r8
 80234ba:	eb49 0409 	adc.w	r4, r9, r9
 80234be:	4698      	mov	r8, r3
 80234c0:	46a1      	mov	r9, r4
 80234c2:	eb18 080a 	adds.w	r8, r8, sl
 80234c6:	eb49 090b 	adc.w	r9, r9, fp
 80234ca:	f04f 0100 	mov.w	r1, #0
 80234ce:	f04f 0200 	mov.w	r2, #0
 80234d2:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80234d6:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80234da:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80234de:	4688      	mov	r8, r1
 80234e0:	4691      	mov	r9, r2
 80234e2:	eb1a 0508 	adds.w	r5, sl, r8
 80234e6:	eb4b 0609 	adc.w	r6, fp, r9
 80234ea:	687b      	ldr	r3, [r7, #4]
 80234ec:	685b      	ldr	r3, [r3, #4]
 80234ee:	4619      	mov	r1, r3
 80234f0:	f04f 0200 	mov.w	r2, #0
 80234f4:	f04f 0300 	mov.w	r3, #0
 80234f8:	f04f 0400 	mov.w	r4, #0
 80234fc:	0094      	lsls	r4, r2, #2
 80234fe:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8023502:	008b      	lsls	r3, r1, #2
 8023504:	461a      	mov	r2, r3
 8023506:	4623      	mov	r3, r4
 8023508:	4628      	mov	r0, r5
 802350a:	4631      	mov	r1, r6
 802350c:	f7fd f8c0 	bl	8020690 <__aeabi_uldivmod>
 8023510:	4603      	mov	r3, r0
 8023512:	460c      	mov	r4, r1
 8023514:	461a      	mov	r2, r3
 8023516:	4b50      	ldr	r3, [pc, #320]	; (8023658 <UART_SetConfig+0x6f4>)
 8023518:	fba3 2302 	umull	r2, r3, r3, r2
 802351c:	095b      	lsrs	r3, r3, #5
 802351e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8023522:	68bb      	ldr	r3, [r7, #8]
 8023524:	469b      	mov	fp, r3
 8023526:	f04f 0c00 	mov.w	ip, #0
 802352a:	46d9      	mov	r9, fp
 802352c:	46e2      	mov	sl, ip
 802352e:	eb19 0309 	adds.w	r3, r9, r9
 8023532:	eb4a 040a 	adc.w	r4, sl, sl
 8023536:	4699      	mov	r9, r3
 8023538:	46a2      	mov	sl, r4
 802353a:	eb19 090b 	adds.w	r9, r9, fp
 802353e:	eb4a 0a0c 	adc.w	sl, sl, ip
 8023542:	f04f 0100 	mov.w	r1, #0
 8023546:	f04f 0200 	mov.w	r2, #0
 802354a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 802354e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8023552:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8023556:	4689      	mov	r9, r1
 8023558:	4692      	mov	sl, r2
 802355a:	eb1b 0509 	adds.w	r5, fp, r9
 802355e:	eb4c 060a 	adc.w	r6, ip, sl
 8023562:	687b      	ldr	r3, [r7, #4]
 8023564:	685b      	ldr	r3, [r3, #4]
 8023566:	4619      	mov	r1, r3
 8023568:	f04f 0200 	mov.w	r2, #0
 802356c:	f04f 0300 	mov.w	r3, #0
 8023570:	f04f 0400 	mov.w	r4, #0
 8023574:	0094      	lsls	r4, r2, #2
 8023576:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 802357a:	008b      	lsls	r3, r1, #2
 802357c:	461a      	mov	r2, r3
 802357e:	4623      	mov	r3, r4
 8023580:	4628      	mov	r0, r5
 8023582:	4631      	mov	r1, r6
 8023584:	f7fd f884 	bl	8020690 <__aeabi_uldivmod>
 8023588:	4603      	mov	r3, r0
 802358a:	460c      	mov	r4, r1
 802358c:	461a      	mov	r2, r3
 802358e:	4b32      	ldr	r3, [pc, #200]	; (8023658 <UART_SetConfig+0x6f4>)
 8023590:	fba3 1302 	umull	r1, r3, r3, r2
 8023594:	095b      	lsrs	r3, r3, #5
 8023596:	2164      	movs	r1, #100	; 0x64
 8023598:	fb01 f303 	mul.w	r3, r1, r3
 802359c:	1ad3      	subs	r3, r2, r3
 802359e:	011b      	lsls	r3, r3, #4
 80235a0:	3332      	adds	r3, #50	; 0x32
 80235a2:	4a2d      	ldr	r2, [pc, #180]	; (8023658 <UART_SetConfig+0x6f4>)
 80235a4:	fba2 2303 	umull	r2, r3, r2, r3
 80235a8:	095b      	lsrs	r3, r3, #5
 80235aa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80235ae:	4498      	add	r8, r3
 80235b0:	68bb      	ldr	r3, [r7, #8]
 80235b2:	469b      	mov	fp, r3
 80235b4:	f04f 0c00 	mov.w	ip, #0
 80235b8:	46d9      	mov	r9, fp
 80235ba:	46e2      	mov	sl, ip
 80235bc:	eb19 0309 	adds.w	r3, r9, r9
 80235c0:	eb4a 040a 	adc.w	r4, sl, sl
 80235c4:	4699      	mov	r9, r3
 80235c6:	46a2      	mov	sl, r4
 80235c8:	eb19 090b 	adds.w	r9, r9, fp
 80235cc:	eb4a 0a0c 	adc.w	sl, sl, ip
 80235d0:	f04f 0100 	mov.w	r1, #0
 80235d4:	f04f 0200 	mov.w	r2, #0
 80235d8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80235dc:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80235e0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80235e4:	4689      	mov	r9, r1
 80235e6:	4692      	mov	sl, r2
 80235e8:	eb1b 0509 	adds.w	r5, fp, r9
 80235ec:	eb4c 060a 	adc.w	r6, ip, sl
 80235f0:	687b      	ldr	r3, [r7, #4]
 80235f2:	685b      	ldr	r3, [r3, #4]
 80235f4:	4619      	mov	r1, r3
 80235f6:	f04f 0200 	mov.w	r2, #0
 80235fa:	f04f 0300 	mov.w	r3, #0
 80235fe:	f04f 0400 	mov.w	r4, #0
 8023602:	0094      	lsls	r4, r2, #2
 8023604:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8023608:	008b      	lsls	r3, r1, #2
 802360a:	461a      	mov	r2, r3
 802360c:	4623      	mov	r3, r4
 802360e:	4628      	mov	r0, r5
 8023610:	4631      	mov	r1, r6
 8023612:	f7fd f83d 	bl	8020690 <__aeabi_uldivmod>
 8023616:	4603      	mov	r3, r0
 8023618:	460c      	mov	r4, r1
 802361a:	461a      	mov	r2, r3
 802361c:	4b0e      	ldr	r3, [pc, #56]	; (8023658 <UART_SetConfig+0x6f4>)
 802361e:	fba3 1302 	umull	r1, r3, r3, r2
 8023622:	095b      	lsrs	r3, r3, #5
 8023624:	2164      	movs	r1, #100	; 0x64
 8023626:	fb01 f303 	mul.w	r3, r1, r3
 802362a:	1ad3      	subs	r3, r2, r3
 802362c:	011b      	lsls	r3, r3, #4
 802362e:	3332      	adds	r3, #50	; 0x32
 8023630:	4a09      	ldr	r2, [pc, #36]	; (8023658 <UART_SetConfig+0x6f4>)
 8023632:	fba2 2303 	umull	r2, r3, r2, r3
 8023636:	095b      	lsrs	r3, r3, #5
 8023638:	f003 020f 	and.w	r2, r3, #15
 802363c:	687b      	ldr	r3, [r7, #4]
 802363e:	681b      	ldr	r3, [r3, #0]
 8023640:	4442      	add	r2, r8
 8023642:	609a      	str	r2, [r3, #8]
}
 8023644:	e7ff      	b.n	8023646 <UART_SetConfig+0x6e2>
 8023646:	bf00      	nop
 8023648:	3714      	adds	r7, #20
 802364a:	46bd      	mov	sp, r7
 802364c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023650:	40011000 	.word	0x40011000
 8023654:	40011400 	.word	0x40011400
 8023658:	51eb851f 	.word	0x51eb851f

0802365c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 802365c:	b084      	sub	sp, #16
 802365e:	b580      	push	{r7, lr}
 8023660:	b084      	sub	sp, #16
 8023662:	af00      	add	r7, sp, #0
 8023664:	6078      	str	r0, [r7, #4]
 8023666:	f107 001c 	add.w	r0, r7, #28
 802366a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 802366e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8023670:	2b01      	cmp	r3, #1
 8023672:	d122      	bne.n	80236ba <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8023674:	687b      	ldr	r3, [r7, #4]
 8023676:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8023678:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 802367c:	687b      	ldr	r3, [r7, #4]
 802367e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8023680:	687b      	ldr	r3, [r7, #4]
 8023682:	68db      	ldr	r3, [r3, #12]
 8023684:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8023688:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 802368c:	687a      	ldr	r2, [r7, #4]
 802368e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8023690:	687b      	ldr	r3, [r7, #4]
 8023692:	68db      	ldr	r3, [r3, #12]
 8023694:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8023698:	687b      	ldr	r3, [r7, #4]
 802369a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 802369c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802369e:	2b01      	cmp	r3, #1
 80236a0:	d105      	bne.n	80236ae <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80236a2:	687b      	ldr	r3, [r7, #4]
 80236a4:	68db      	ldr	r3, [r3, #12]
 80236a6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80236aa:	687b      	ldr	r3, [r7, #4]
 80236ac:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 80236ae:	6878      	ldr	r0, [r7, #4]
 80236b0:	f000 fa56 	bl	8023b60 <USB_CoreReset>
 80236b4:	4603      	mov	r3, r0
 80236b6:	73fb      	strb	r3, [r7, #15]
 80236b8:	e01a      	b.n	80236f0 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80236ba:	687b      	ldr	r3, [r7, #4]
 80236bc:	68db      	ldr	r3, [r3, #12]
 80236be:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80236c2:	687b      	ldr	r3, [r7, #4]
 80236c4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80236c6:	6878      	ldr	r0, [r7, #4]
 80236c8:	f000 fa4a 	bl	8023b60 <USB_CoreReset>
 80236cc:	4603      	mov	r3, r0
 80236ce:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80236d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80236d2:	2b00      	cmp	r3, #0
 80236d4:	d106      	bne.n	80236e4 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80236d6:	687b      	ldr	r3, [r7, #4]
 80236d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80236da:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80236de:	687b      	ldr	r3, [r7, #4]
 80236e0:	639a      	str	r2, [r3, #56]	; 0x38
 80236e2:	e005      	b.n	80236f0 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80236e4:	687b      	ldr	r3, [r7, #4]
 80236e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80236e8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80236ec:	687b      	ldr	r3, [r7, #4]
 80236ee:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80236f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80236f2:	2b01      	cmp	r3, #1
 80236f4:	d10b      	bne.n	802370e <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80236f6:	687b      	ldr	r3, [r7, #4]
 80236f8:	689b      	ldr	r3, [r3, #8]
 80236fa:	f043 0206 	orr.w	r2, r3, #6
 80236fe:	687b      	ldr	r3, [r7, #4]
 8023700:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8023702:	687b      	ldr	r3, [r7, #4]
 8023704:	689b      	ldr	r3, [r3, #8]
 8023706:	f043 0220 	orr.w	r2, r3, #32
 802370a:	687b      	ldr	r3, [r7, #4]
 802370c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 802370e:	7bfb      	ldrb	r3, [r7, #15]
}
 8023710:	4618      	mov	r0, r3
 8023712:	3710      	adds	r7, #16
 8023714:	46bd      	mov	sp, r7
 8023716:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 802371a:	b004      	add	sp, #16
 802371c:	4770      	bx	lr

0802371e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 802371e:	b480      	push	{r7}
 8023720:	b083      	sub	sp, #12
 8023722:	af00      	add	r7, sp, #0
 8023724:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8023726:	687b      	ldr	r3, [r7, #4]
 8023728:	689b      	ldr	r3, [r3, #8]
 802372a:	f023 0201 	bic.w	r2, r3, #1
 802372e:	687b      	ldr	r3, [r7, #4]
 8023730:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8023732:	2300      	movs	r3, #0
}
 8023734:	4618      	mov	r0, r3
 8023736:	370c      	adds	r7, #12
 8023738:	46bd      	mov	sp, r7
 802373a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802373e:	4770      	bx	lr

08023740 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8023740:	b580      	push	{r7, lr}
 8023742:	b082      	sub	sp, #8
 8023744:	af00      	add	r7, sp, #0
 8023746:	6078      	str	r0, [r7, #4]
 8023748:	460b      	mov	r3, r1
 802374a:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 802374c:	687b      	ldr	r3, [r7, #4]
 802374e:	68db      	ldr	r3, [r3, #12]
 8023750:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8023754:	687b      	ldr	r3, [r7, #4]
 8023756:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8023758:	78fb      	ldrb	r3, [r7, #3]
 802375a:	2b01      	cmp	r3, #1
 802375c:	d106      	bne.n	802376c <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 802375e:	687b      	ldr	r3, [r7, #4]
 8023760:	68db      	ldr	r3, [r3, #12]
 8023762:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8023766:	687b      	ldr	r3, [r7, #4]
 8023768:	60da      	str	r2, [r3, #12]
 802376a:	e00b      	b.n	8023784 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 802376c:	78fb      	ldrb	r3, [r7, #3]
 802376e:	2b00      	cmp	r3, #0
 8023770:	d106      	bne.n	8023780 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8023772:	687b      	ldr	r3, [r7, #4]
 8023774:	68db      	ldr	r3, [r3, #12]
 8023776:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 802377a:	687b      	ldr	r3, [r7, #4]
 802377c:	60da      	str	r2, [r3, #12]
 802377e:	e001      	b.n	8023784 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8023780:	2301      	movs	r3, #1
 8023782:	e003      	b.n	802378c <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8023784:	2032      	movs	r0, #50	; 0x32
 8023786:	f7fd fe05 	bl	8021394 <HAL_Delay>

  return HAL_OK;
 802378a:	2300      	movs	r3, #0
}
 802378c:	4618      	mov	r0, r3
 802378e:	3708      	adds	r7, #8
 8023790:	46bd      	mov	sp, r7
 8023792:	bd80      	pop	{r7, pc}

08023794 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8023794:	b084      	sub	sp, #16
 8023796:	b580      	push	{r7, lr}
 8023798:	b086      	sub	sp, #24
 802379a:	af00      	add	r7, sp, #0
 802379c:	6078      	str	r0, [r7, #4]
 802379e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80237a2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80237a6:	2300      	movs	r3, #0
 80237a8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80237aa:	687b      	ldr	r3, [r7, #4]
 80237ac:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80237ae:	2300      	movs	r3, #0
 80237b0:	613b      	str	r3, [r7, #16]
 80237b2:	e009      	b.n	80237c8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80237b4:	687a      	ldr	r2, [r7, #4]
 80237b6:	693b      	ldr	r3, [r7, #16]
 80237b8:	3340      	adds	r3, #64	; 0x40
 80237ba:	009b      	lsls	r3, r3, #2
 80237bc:	4413      	add	r3, r2
 80237be:	2200      	movs	r2, #0
 80237c0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80237c2:	693b      	ldr	r3, [r7, #16]
 80237c4:	3301      	adds	r3, #1
 80237c6:	613b      	str	r3, [r7, #16]
 80237c8:	693b      	ldr	r3, [r7, #16]
 80237ca:	2b0e      	cmp	r3, #14
 80237cc:	d9f2      	bls.n	80237b4 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80237ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80237d0:	2b00      	cmp	r3, #0
 80237d2:	d11c      	bne.n	802380e <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80237d4:	68fb      	ldr	r3, [r7, #12]
 80237d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80237da:	685b      	ldr	r3, [r3, #4]
 80237dc:	68fa      	ldr	r2, [r7, #12]
 80237de:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80237e2:	f043 0302 	orr.w	r3, r3, #2
 80237e6:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80237e8:	687b      	ldr	r3, [r7, #4]
 80237ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80237ec:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80237f0:	687b      	ldr	r3, [r7, #4]
 80237f2:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80237f4:	687b      	ldr	r3, [r7, #4]
 80237f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80237f8:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80237fc:	687b      	ldr	r3, [r7, #4]
 80237fe:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8023800:	687b      	ldr	r3, [r7, #4]
 8023802:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8023804:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8023808:	687b      	ldr	r3, [r7, #4]
 802380a:	639a      	str	r2, [r3, #56]	; 0x38
 802380c:	e00b      	b.n	8023826 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 802380e:	687b      	ldr	r3, [r7, #4]
 8023810:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8023812:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8023816:	687b      	ldr	r3, [r7, #4]
 8023818:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 802381a:	687b      	ldr	r3, [r7, #4]
 802381c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802381e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8023822:	687b      	ldr	r3, [r7, #4]
 8023824:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8023826:	68fb      	ldr	r3, [r7, #12]
 8023828:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 802382c:	461a      	mov	r2, r3
 802382e:	2300      	movs	r3, #0
 8023830:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8023832:	68fb      	ldr	r3, [r7, #12]
 8023834:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8023838:	4619      	mov	r1, r3
 802383a:	68fb      	ldr	r3, [r7, #12]
 802383c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8023840:	461a      	mov	r2, r3
 8023842:	680b      	ldr	r3, [r1, #0]
 8023844:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8023846:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8023848:	2b01      	cmp	r3, #1
 802384a:	d10c      	bne.n	8023866 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 802384c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802384e:	2b00      	cmp	r3, #0
 8023850:	d104      	bne.n	802385c <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8023852:	2100      	movs	r1, #0
 8023854:	6878      	ldr	r0, [r7, #4]
 8023856:	f000 f949 	bl	8023aec <USB_SetDevSpeed>
 802385a:	e008      	b.n	802386e <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 802385c:	2101      	movs	r1, #1
 802385e:	6878      	ldr	r0, [r7, #4]
 8023860:	f000 f944 	bl	8023aec <USB_SetDevSpeed>
 8023864:	e003      	b.n	802386e <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8023866:	2103      	movs	r1, #3
 8023868:	6878      	ldr	r0, [r7, #4]
 802386a:	f000 f93f 	bl	8023aec <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 802386e:	2110      	movs	r1, #16
 8023870:	6878      	ldr	r0, [r7, #4]
 8023872:	f000 f8f3 	bl	8023a5c <USB_FlushTxFifo>
 8023876:	4603      	mov	r3, r0
 8023878:	2b00      	cmp	r3, #0
 802387a:	d001      	beq.n	8023880 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 802387c:	2301      	movs	r3, #1
 802387e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8023880:	6878      	ldr	r0, [r7, #4]
 8023882:	f000 f911 	bl	8023aa8 <USB_FlushRxFifo>
 8023886:	4603      	mov	r3, r0
 8023888:	2b00      	cmp	r3, #0
 802388a:	d001      	beq.n	8023890 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 802388c:	2301      	movs	r3, #1
 802388e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8023890:	68fb      	ldr	r3, [r7, #12]
 8023892:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8023896:	461a      	mov	r2, r3
 8023898:	2300      	movs	r3, #0
 802389a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 802389c:	68fb      	ldr	r3, [r7, #12]
 802389e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80238a2:	461a      	mov	r2, r3
 80238a4:	2300      	movs	r3, #0
 80238a6:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80238a8:	68fb      	ldr	r3, [r7, #12]
 80238aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80238ae:	461a      	mov	r2, r3
 80238b0:	2300      	movs	r3, #0
 80238b2:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80238b4:	2300      	movs	r3, #0
 80238b6:	613b      	str	r3, [r7, #16]
 80238b8:	e043      	b.n	8023942 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80238ba:	693b      	ldr	r3, [r7, #16]
 80238bc:	015a      	lsls	r2, r3, #5
 80238be:	68fb      	ldr	r3, [r7, #12]
 80238c0:	4413      	add	r3, r2
 80238c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80238c6:	681b      	ldr	r3, [r3, #0]
 80238c8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80238cc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80238d0:	d118      	bne.n	8023904 <USB_DevInit+0x170>
    {
      if (i == 0U)
 80238d2:	693b      	ldr	r3, [r7, #16]
 80238d4:	2b00      	cmp	r3, #0
 80238d6:	d10a      	bne.n	80238ee <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80238d8:	693b      	ldr	r3, [r7, #16]
 80238da:	015a      	lsls	r2, r3, #5
 80238dc:	68fb      	ldr	r3, [r7, #12]
 80238de:	4413      	add	r3, r2
 80238e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80238e4:	461a      	mov	r2, r3
 80238e6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80238ea:	6013      	str	r3, [r2, #0]
 80238ec:	e013      	b.n	8023916 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80238ee:	693b      	ldr	r3, [r7, #16]
 80238f0:	015a      	lsls	r2, r3, #5
 80238f2:	68fb      	ldr	r3, [r7, #12]
 80238f4:	4413      	add	r3, r2
 80238f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80238fa:	461a      	mov	r2, r3
 80238fc:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8023900:	6013      	str	r3, [r2, #0]
 8023902:	e008      	b.n	8023916 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8023904:	693b      	ldr	r3, [r7, #16]
 8023906:	015a      	lsls	r2, r3, #5
 8023908:	68fb      	ldr	r3, [r7, #12]
 802390a:	4413      	add	r3, r2
 802390c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8023910:	461a      	mov	r2, r3
 8023912:	2300      	movs	r3, #0
 8023914:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8023916:	693b      	ldr	r3, [r7, #16]
 8023918:	015a      	lsls	r2, r3, #5
 802391a:	68fb      	ldr	r3, [r7, #12]
 802391c:	4413      	add	r3, r2
 802391e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8023922:	461a      	mov	r2, r3
 8023924:	2300      	movs	r3, #0
 8023926:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8023928:	693b      	ldr	r3, [r7, #16]
 802392a:	015a      	lsls	r2, r3, #5
 802392c:	68fb      	ldr	r3, [r7, #12]
 802392e:	4413      	add	r3, r2
 8023930:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8023934:	461a      	mov	r2, r3
 8023936:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 802393a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 802393c:	693b      	ldr	r3, [r7, #16]
 802393e:	3301      	adds	r3, #1
 8023940:	613b      	str	r3, [r7, #16]
 8023942:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8023944:	693a      	ldr	r2, [r7, #16]
 8023946:	429a      	cmp	r2, r3
 8023948:	d3b7      	bcc.n	80238ba <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 802394a:	2300      	movs	r3, #0
 802394c:	613b      	str	r3, [r7, #16]
 802394e:	e043      	b.n	80239d8 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8023950:	693b      	ldr	r3, [r7, #16]
 8023952:	015a      	lsls	r2, r3, #5
 8023954:	68fb      	ldr	r3, [r7, #12]
 8023956:	4413      	add	r3, r2
 8023958:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802395c:	681b      	ldr	r3, [r3, #0]
 802395e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8023962:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8023966:	d118      	bne.n	802399a <USB_DevInit+0x206>
    {
      if (i == 0U)
 8023968:	693b      	ldr	r3, [r7, #16]
 802396a:	2b00      	cmp	r3, #0
 802396c:	d10a      	bne.n	8023984 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 802396e:	693b      	ldr	r3, [r7, #16]
 8023970:	015a      	lsls	r2, r3, #5
 8023972:	68fb      	ldr	r3, [r7, #12]
 8023974:	4413      	add	r3, r2
 8023976:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802397a:	461a      	mov	r2, r3
 802397c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8023980:	6013      	str	r3, [r2, #0]
 8023982:	e013      	b.n	80239ac <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8023984:	693b      	ldr	r3, [r7, #16]
 8023986:	015a      	lsls	r2, r3, #5
 8023988:	68fb      	ldr	r3, [r7, #12]
 802398a:	4413      	add	r3, r2
 802398c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8023990:	461a      	mov	r2, r3
 8023992:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8023996:	6013      	str	r3, [r2, #0]
 8023998:	e008      	b.n	80239ac <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 802399a:	693b      	ldr	r3, [r7, #16]
 802399c:	015a      	lsls	r2, r3, #5
 802399e:	68fb      	ldr	r3, [r7, #12]
 80239a0:	4413      	add	r3, r2
 80239a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80239a6:	461a      	mov	r2, r3
 80239a8:	2300      	movs	r3, #0
 80239aa:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80239ac:	693b      	ldr	r3, [r7, #16]
 80239ae:	015a      	lsls	r2, r3, #5
 80239b0:	68fb      	ldr	r3, [r7, #12]
 80239b2:	4413      	add	r3, r2
 80239b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80239b8:	461a      	mov	r2, r3
 80239ba:	2300      	movs	r3, #0
 80239bc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80239be:	693b      	ldr	r3, [r7, #16]
 80239c0:	015a      	lsls	r2, r3, #5
 80239c2:	68fb      	ldr	r3, [r7, #12]
 80239c4:	4413      	add	r3, r2
 80239c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80239ca:	461a      	mov	r2, r3
 80239cc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80239d0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80239d2:	693b      	ldr	r3, [r7, #16]
 80239d4:	3301      	adds	r3, #1
 80239d6:	613b      	str	r3, [r7, #16]
 80239d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80239da:	693a      	ldr	r2, [r7, #16]
 80239dc:	429a      	cmp	r2, r3
 80239de:	d3b7      	bcc.n	8023950 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80239e0:	68fb      	ldr	r3, [r7, #12]
 80239e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80239e6:	691b      	ldr	r3, [r3, #16]
 80239e8:	68fa      	ldr	r2, [r7, #12]
 80239ea:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80239ee:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80239f2:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80239f4:	687b      	ldr	r3, [r7, #4]
 80239f6:	2200      	movs	r2, #0
 80239f8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80239fa:	687b      	ldr	r3, [r7, #4]
 80239fc:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8023a00:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8023a02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8023a04:	2b00      	cmp	r3, #0
 8023a06:	d105      	bne.n	8023a14 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8023a08:	687b      	ldr	r3, [r7, #4]
 8023a0a:	699b      	ldr	r3, [r3, #24]
 8023a0c:	f043 0210 	orr.w	r2, r3, #16
 8023a10:	687b      	ldr	r3, [r7, #4]
 8023a12:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8023a14:	687b      	ldr	r3, [r7, #4]
 8023a16:	699a      	ldr	r2, [r3, #24]
 8023a18:	4b0f      	ldr	r3, [pc, #60]	; (8023a58 <USB_DevInit+0x2c4>)
 8023a1a:	4313      	orrs	r3, r2
 8023a1c:	687a      	ldr	r2, [r7, #4]
 8023a1e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8023a20:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8023a22:	2b00      	cmp	r3, #0
 8023a24:	d005      	beq.n	8023a32 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8023a26:	687b      	ldr	r3, [r7, #4]
 8023a28:	699b      	ldr	r3, [r3, #24]
 8023a2a:	f043 0208 	orr.w	r2, r3, #8
 8023a2e:	687b      	ldr	r3, [r7, #4]
 8023a30:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8023a32:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8023a34:	2b01      	cmp	r3, #1
 8023a36:	d107      	bne.n	8023a48 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8023a38:	687b      	ldr	r3, [r7, #4]
 8023a3a:	699b      	ldr	r3, [r3, #24]
 8023a3c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8023a40:	f043 0304 	orr.w	r3, r3, #4
 8023a44:	687a      	ldr	r2, [r7, #4]
 8023a46:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8023a48:	7dfb      	ldrb	r3, [r7, #23]
}
 8023a4a:	4618      	mov	r0, r3
 8023a4c:	3718      	adds	r7, #24
 8023a4e:	46bd      	mov	sp, r7
 8023a50:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8023a54:	b004      	add	sp, #16
 8023a56:	4770      	bx	lr
 8023a58:	803c3800 	.word	0x803c3800

08023a5c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8023a5c:	b480      	push	{r7}
 8023a5e:	b085      	sub	sp, #20
 8023a60:	af00      	add	r7, sp, #0
 8023a62:	6078      	str	r0, [r7, #4]
 8023a64:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8023a66:	2300      	movs	r3, #0
 8023a68:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8023a6a:	683b      	ldr	r3, [r7, #0]
 8023a6c:	019b      	lsls	r3, r3, #6
 8023a6e:	f043 0220 	orr.w	r2, r3, #32
 8023a72:	687b      	ldr	r3, [r7, #4]
 8023a74:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8023a76:	68fb      	ldr	r3, [r7, #12]
 8023a78:	3301      	adds	r3, #1
 8023a7a:	60fb      	str	r3, [r7, #12]
 8023a7c:	68fb      	ldr	r3, [r7, #12]
 8023a7e:	4a09      	ldr	r2, [pc, #36]	; (8023aa4 <USB_FlushTxFifo+0x48>)
 8023a80:	4293      	cmp	r3, r2
 8023a82:	d901      	bls.n	8023a88 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8023a84:	2303      	movs	r3, #3
 8023a86:	e006      	b.n	8023a96 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8023a88:	687b      	ldr	r3, [r7, #4]
 8023a8a:	691b      	ldr	r3, [r3, #16]
 8023a8c:	f003 0320 	and.w	r3, r3, #32
 8023a90:	2b20      	cmp	r3, #32
 8023a92:	d0f0      	beq.n	8023a76 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8023a94:	2300      	movs	r3, #0
}
 8023a96:	4618      	mov	r0, r3
 8023a98:	3714      	adds	r7, #20
 8023a9a:	46bd      	mov	sp, r7
 8023a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023aa0:	4770      	bx	lr
 8023aa2:	bf00      	nop
 8023aa4:	00030d40 	.word	0x00030d40

08023aa8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8023aa8:	b480      	push	{r7}
 8023aaa:	b085      	sub	sp, #20
 8023aac:	af00      	add	r7, sp, #0
 8023aae:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8023ab0:	2300      	movs	r3, #0
 8023ab2:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8023ab4:	687b      	ldr	r3, [r7, #4]
 8023ab6:	2210      	movs	r2, #16
 8023ab8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8023aba:	68fb      	ldr	r3, [r7, #12]
 8023abc:	3301      	adds	r3, #1
 8023abe:	60fb      	str	r3, [r7, #12]
 8023ac0:	68fb      	ldr	r3, [r7, #12]
 8023ac2:	4a09      	ldr	r2, [pc, #36]	; (8023ae8 <USB_FlushRxFifo+0x40>)
 8023ac4:	4293      	cmp	r3, r2
 8023ac6:	d901      	bls.n	8023acc <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8023ac8:	2303      	movs	r3, #3
 8023aca:	e006      	b.n	8023ada <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8023acc:	687b      	ldr	r3, [r7, #4]
 8023ace:	691b      	ldr	r3, [r3, #16]
 8023ad0:	f003 0310 	and.w	r3, r3, #16
 8023ad4:	2b10      	cmp	r3, #16
 8023ad6:	d0f0      	beq.n	8023aba <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8023ad8:	2300      	movs	r3, #0
}
 8023ada:	4618      	mov	r0, r3
 8023adc:	3714      	adds	r7, #20
 8023ade:	46bd      	mov	sp, r7
 8023ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023ae4:	4770      	bx	lr
 8023ae6:	bf00      	nop
 8023ae8:	00030d40 	.word	0x00030d40

08023aec <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8023aec:	b480      	push	{r7}
 8023aee:	b085      	sub	sp, #20
 8023af0:	af00      	add	r7, sp, #0
 8023af2:	6078      	str	r0, [r7, #4]
 8023af4:	460b      	mov	r3, r1
 8023af6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8023af8:	687b      	ldr	r3, [r7, #4]
 8023afa:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8023afc:	68fb      	ldr	r3, [r7, #12]
 8023afe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8023b02:	681a      	ldr	r2, [r3, #0]
 8023b04:	78fb      	ldrb	r3, [r7, #3]
 8023b06:	68f9      	ldr	r1, [r7, #12]
 8023b08:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8023b0c:	4313      	orrs	r3, r2
 8023b0e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8023b10:	2300      	movs	r3, #0
}
 8023b12:	4618      	mov	r0, r3
 8023b14:	3714      	adds	r7, #20
 8023b16:	46bd      	mov	sp, r7
 8023b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023b1c:	4770      	bx	lr

08023b1e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8023b1e:	b480      	push	{r7}
 8023b20:	b085      	sub	sp, #20
 8023b22:	af00      	add	r7, sp, #0
 8023b24:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8023b26:	687b      	ldr	r3, [r7, #4]
 8023b28:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8023b2a:	68fb      	ldr	r3, [r7, #12]
 8023b2c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8023b30:	681b      	ldr	r3, [r3, #0]
 8023b32:	68fa      	ldr	r2, [r7, #12]
 8023b34:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8023b38:	f023 0303 	bic.w	r3, r3, #3
 8023b3c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8023b3e:	68fb      	ldr	r3, [r7, #12]
 8023b40:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8023b44:	685b      	ldr	r3, [r3, #4]
 8023b46:	68fa      	ldr	r2, [r7, #12]
 8023b48:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8023b4c:	f043 0302 	orr.w	r3, r3, #2
 8023b50:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8023b52:	2300      	movs	r3, #0
}
 8023b54:	4618      	mov	r0, r3
 8023b56:	3714      	adds	r7, #20
 8023b58:	46bd      	mov	sp, r7
 8023b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023b5e:	4770      	bx	lr

08023b60 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8023b60:	b480      	push	{r7}
 8023b62:	b085      	sub	sp, #20
 8023b64:	af00      	add	r7, sp, #0
 8023b66:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8023b68:	2300      	movs	r3, #0
 8023b6a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8023b6c:	68fb      	ldr	r3, [r7, #12]
 8023b6e:	3301      	adds	r3, #1
 8023b70:	60fb      	str	r3, [r7, #12]
 8023b72:	68fb      	ldr	r3, [r7, #12]
 8023b74:	4a13      	ldr	r2, [pc, #76]	; (8023bc4 <USB_CoreReset+0x64>)
 8023b76:	4293      	cmp	r3, r2
 8023b78:	d901      	bls.n	8023b7e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8023b7a:	2303      	movs	r3, #3
 8023b7c:	e01b      	b.n	8023bb6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8023b7e:	687b      	ldr	r3, [r7, #4]
 8023b80:	691b      	ldr	r3, [r3, #16]
 8023b82:	2b00      	cmp	r3, #0
 8023b84:	daf2      	bge.n	8023b6c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8023b86:	2300      	movs	r3, #0
 8023b88:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8023b8a:	687b      	ldr	r3, [r7, #4]
 8023b8c:	691b      	ldr	r3, [r3, #16]
 8023b8e:	f043 0201 	orr.w	r2, r3, #1
 8023b92:	687b      	ldr	r3, [r7, #4]
 8023b94:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8023b96:	68fb      	ldr	r3, [r7, #12]
 8023b98:	3301      	adds	r3, #1
 8023b9a:	60fb      	str	r3, [r7, #12]
 8023b9c:	68fb      	ldr	r3, [r7, #12]
 8023b9e:	4a09      	ldr	r2, [pc, #36]	; (8023bc4 <USB_CoreReset+0x64>)
 8023ba0:	4293      	cmp	r3, r2
 8023ba2:	d901      	bls.n	8023ba8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8023ba4:	2303      	movs	r3, #3
 8023ba6:	e006      	b.n	8023bb6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8023ba8:	687b      	ldr	r3, [r7, #4]
 8023baa:	691b      	ldr	r3, [r3, #16]
 8023bac:	f003 0301 	and.w	r3, r3, #1
 8023bb0:	2b01      	cmp	r3, #1
 8023bb2:	d0f0      	beq.n	8023b96 <USB_CoreReset+0x36>

  return HAL_OK;
 8023bb4:	2300      	movs	r3, #0
}
 8023bb6:	4618      	mov	r0, r3
 8023bb8:	3714      	adds	r7, #20
 8023bba:	46bd      	mov	sp, r7
 8023bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023bc0:	4770      	bx	lr
 8023bc2:	bf00      	nop
 8023bc4:	00030d40 	.word	0x00030d40

08023bc8 <__errno>:
 8023bc8:	4b01      	ldr	r3, [pc, #4]	; (8023bd0 <__errno+0x8>)
 8023bca:	6818      	ldr	r0, [r3, #0]
 8023bcc:	4770      	bx	lr
 8023bce:	bf00      	nop
 8023bd0:	2000000c 	.word	0x2000000c

08023bd4 <__libc_init_array>:
 8023bd4:	b570      	push	{r4, r5, r6, lr}
 8023bd6:	4e0d      	ldr	r6, [pc, #52]	; (8023c0c <__libc_init_array+0x38>)
 8023bd8:	4c0d      	ldr	r4, [pc, #52]	; (8023c10 <__libc_init_array+0x3c>)
 8023bda:	1ba4      	subs	r4, r4, r6
 8023bdc:	10a4      	asrs	r4, r4, #2
 8023bde:	2500      	movs	r5, #0
 8023be0:	42a5      	cmp	r5, r4
 8023be2:	d109      	bne.n	8023bf8 <__libc_init_array+0x24>
 8023be4:	4e0b      	ldr	r6, [pc, #44]	; (8023c14 <__libc_init_array+0x40>)
 8023be6:	4c0c      	ldr	r4, [pc, #48]	; (8023c18 <__libc_init_array+0x44>)
 8023be8:	f000 ff04 	bl	80249f4 <_init>
 8023bec:	1ba4      	subs	r4, r4, r6
 8023bee:	10a4      	asrs	r4, r4, #2
 8023bf0:	2500      	movs	r5, #0
 8023bf2:	42a5      	cmp	r5, r4
 8023bf4:	d105      	bne.n	8023c02 <__libc_init_array+0x2e>
 8023bf6:	bd70      	pop	{r4, r5, r6, pc}
 8023bf8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8023bfc:	4798      	blx	r3
 8023bfe:	3501      	adds	r5, #1
 8023c00:	e7ee      	b.n	8023be0 <__libc_init_array+0xc>
 8023c02:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8023c06:	4798      	blx	r3
 8023c08:	3501      	adds	r5, #1
 8023c0a:	e7f2      	b.n	8023bf2 <__libc_init_array+0x1e>
 8023c0c:	08024aec 	.word	0x08024aec
 8023c10:	08024aec 	.word	0x08024aec
 8023c14:	08024aec 	.word	0x08024aec
 8023c18:	08024af0 	.word	0x08024af0

08023c1c <memset>:
 8023c1c:	4402      	add	r2, r0
 8023c1e:	4603      	mov	r3, r0
 8023c20:	4293      	cmp	r3, r2
 8023c22:	d100      	bne.n	8023c26 <memset+0xa>
 8023c24:	4770      	bx	lr
 8023c26:	f803 1b01 	strb.w	r1, [r3], #1
 8023c2a:	e7f9      	b.n	8023c20 <memset+0x4>

08023c2c <iprintf>:
 8023c2c:	b40f      	push	{r0, r1, r2, r3}
 8023c2e:	4b0a      	ldr	r3, [pc, #40]	; (8023c58 <iprintf+0x2c>)
 8023c30:	b513      	push	{r0, r1, r4, lr}
 8023c32:	681c      	ldr	r4, [r3, #0]
 8023c34:	b124      	cbz	r4, 8023c40 <iprintf+0x14>
 8023c36:	69a3      	ldr	r3, [r4, #24]
 8023c38:	b913      	cbnz	r3, 8023c40 <iprintf+0x14>
 8023c3a:	4620      	mov	r0, r4
 8023c3c:	f000 f84e 	bl	8023cdc <__sinit>
 8023c40:	ab05      	add	r3, sp, #20
 8023c42:	9a04      	ldr	r2, [sp, #16]
 8023c44:	68a1      	ldr	r1, [r4, #8]
 8023c46:	9301      	str	r3, [sp, #4]
 8023c48:	4620      	mov	r0, r4
 8023c4a:	f000 f955 	bl	8023ef8 <_vfiprintf_r>
 8023c4e:	b002      	add	sp, #8
 8023c50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8023c54:	b004      	add	sp, #16
 8023c56:	4770      	bx	lr
 8023c58:	2000000c 	.word	0x2000000c

08023c5c <std>:
 8023c5c:	2300      	movs	r3, #0
 8023c5e:	b510      	push	{r4, lr}
 8023c60:	4604      	mov	r4, r0
 8023c62:	e9c0 3300 	strd	r3, r3, [r0]
 8023c66:	6083      	str	r3, [r0, #8]
 8023c68:	8181      	strh	r1, [r0, #12]
 8023c6a:	6643      	str	r3, [r0, #100]	; 0x64
 8023c6c:	81c2      	strh	r2, [r0, #14]
 8023c6e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8023c72:	6183      	str	r3, [r0, #24]
 8023c74:	4619      	mov	r1, r3
 8023c76:	2208      	movs	r2, #8
 8023c78:	305c      	adds	r0, #92	; 0x5c
 8023c7a:	f7ff ffcf 	bl	8023c1c <memset>
 8023c7e:	4b05      	ldr	r3, [pc, #20]	; (8023c94 <std+0x38>)
 8023c80:	6263      	str	r3, [r4, #36]	; 0x24
 8023c82:	4b05      	ldr	r3, [pc, #20]	; (8023c98 <std+0x3c>)
 8023c84:	62a3      	str	r3, [r4, #40]	; 0x28
 8023c86:	4b05      	ldr	r3, [pc, #20]	; (8023c9c <std+0x40>)
 8023c88:	62e3      	str	r3, [r4, #44]	; 0x2c
 8023c8a:	4b05      	ldr	r3, [pc, #20]	; (8023ca0 <std+0x44>)
 8023c8c:	6224      	str	r4, [r4, #32]
 8023c8e:	6323      	str	r3, [r4, #48]	; 0x30
 8023c90:	bd10      	pop	{r4, pc}
 8023c92:	bf00      	nop
 8023c94:	08024455 	.word	0x08024455
 8023c98:	08024477 	.word	0x08024477
 8023c9c:	080244af 	.word	0x080244af
 8023ca0:	080244d3 	.word	0x080244d3

08023ca4 <_cleanup_r>:
 8023ca4:	4901      	ldr	r1, [pc, #4]	; (8023cac <_cleanup_r+0x8>)
 8023ca6:	f000 b885 	b.w	8023db4 <_fwalk_reent>
 8023caa:	bf00      	nop
 8023cac:	080247ad 	.word	0x080247ad

08023cb0 <__sfmoreglue>:
 8023cb0:	b570      	push	{r4, r5, r6, lr}
 8023cb2:	1e4a      	subs	r2, r1, #1
 8023cb4:	2568      	movs	r5, #104	; 0x68
 8023cb6:	4355      	muls	r5, r2
 8023cb8:	460e      	mov	r6, r1
 8023cba:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8023cbe:	f000 f897 	bl	8023df0 <_malloc_r>
 8023cc2:	4604      	mov	r4, r0
 8023cc4:	b140      	cbz	r0, 8023cd8 <__sfmoreglue+0x28>
 8023cc6:	2100      	movs	r1, #0
 8023cc8:	e9c0 1600 	strd	r1, r6, [r0]
 8023ccc:	300c      	adds	r0, #12
 8023cce:	60a0      	str	r0, [r4, #8]
 8023cd0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8023cd4:	f7ff ffa2 	bl	8023c1c <memset>
 8023cd8:	4620      	mov	r0, r4
 8023cda:	bd70      	pop	{r4, r5, r6, pc}

08023cdc <__sinit>:
 8023cdc:	6983      	ldr	r3, [r0, #24]
 8023cde:	b510      	push	{r4, lr}
 8023ce0:	4604      	mov	r4, r0
 8023ce2:	bb33      	cbnz	r3, 8023d32 <__sinit+0x56>
 8023ce4:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8023ce8:	6503      	str	r3, [r0, #80]	; 0x50
 8023cea:	4b12      	ldr	r3, [pc, #72]	; (8023d34 <__sinit+0x58>)
 8023cec:	4a12      	ldr	r2, [pc, #72]	; (8023d38 <__sinit+0x5c>)
 8023cee:	681b      	ldr	r3, [r3, #0]
 8023cf0:	6282      	str	r2, [r0, #40]	; 0x28
 8023cf2:	4298      	cmp	r0, r3
 8023cf4:	bf04      	itt	eq
 8023cf6:	2301      	moveq	r3, #1
 8023cf8:	6183      	streq	r3, [r0, #24]
 8023cfa:	f000 f81f 	bl	8023d3c <__sfp>
 8023cfe:	6060      	str	r0, [r4, #4]
 8023d00:	4620      	mov	r0, r4
 8023d02:	f000 f81b 	bl	8023d3c <__sfp>
 8023d06:	60a0      	str	r0, [r4, #8]
 8023d08:	4620      	mov	r0, r4
 8023d0a:	f000 f817 	bl	8023d3c <__sfp>
 8023d0e:	2200      	movs	r2, #0
 8023d10:	60e0      	str	r0, [r4, #12]
 8023d12:	2104      	movs	r1, #4
 8023d14:	6860      	ldr	r0, [r4, #4]
 8023d16:	f7ff ffa1 	bl	8023c5c <std>
 8023d1a:	2201      	movs	r2, #1
 8023d1c:	2109      	movs	r1, #9
 8023d1e:	68a0      	ldr	r0, [r4, #8]
 8023d20:	f7ff ff9c 	bl	8023c5c <std>
 8023d24:	2202      	movs	r2, #2
 8023d26:	2112      	movs	r1, #18
 8023d28:	68e0      	ldr	r0, [r4, #12]
 8023d2a:	f7ff ff97 	bl	8023c5c <std>
 8023d2e:	2301      	movs	r3, #1
 8023d30:	61a3      	str	r3, [r4, #24]
 8023d32:	bd10      	pop	{r4, pc}
 8023d34:	08024a4c 	.word	0x08024a4c
 8023d38:	08023ca5 	.word	0x08023ca5

08023d3c <__sfp>:
 8023d3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8023d3e:	4b1b      	ldr	r3, [pc, #108]	; (8023dac <__sfp+0x70>)
 8023d40:	681e      	ldr	r6, [r3, #0]
 8023d42:	69b3      	ldr	r3, [r6, #24]
 8023d44:	4607      	mov	r7, r0
 8023d46:	b913      	cbnz	r3, 8023d4e <__sfp+0x12>
 8023d48:	4630      	mov	r0, r6
 8023d4a:	f7ff ffc7 	bl	8023cdc <__sinit>
 8023d4e:	3648      	adds	r6, #72	; 0x48
 8023d50:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8023d54:	3b01      	subs	r3, #1
 8023d56:	d503      	bpl.n	8023d60 <__sfp+0x24>
 8023d58:	6833      	ldr	r3, [r6, #0]
 8023d5a:	b133      	cbz	r3, 8023d6a <__sfp+0x2e>
 8023d5c:	6836      	ldr	r6, [r6, #0]
 8023d5e:	e7f7      	b.n	8023d50 <__sfp+0x14>
 8023d60:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8023d64:	b16d      	cbz	r5, 8023d82 <__sfp+0x46>
 8023d66:	3468      	adds	r4, #104	; 0x68
 8023d68:	e7f4      	b.n	8023d54 <__sfp+0x18>
 8023d6a:	2104      	movs	r1, #4
 8023d6c:	4638      	mov	r0, r7
 8023d6e:	f7ff ff9f 	bl	8023cb0 <__sfmoreglue>
 8023d72:	6030      	str	r0, [r6, #0]
 8023d74:	2800      	cmp	r0, #0
 8023d76:	d1f1      	bne.n	8023d5c <__sfp+0x20>
 8023d78:	230c      	movs	r3, #12
 8023d7a:	603b      	str	r3, [r7, #0]
 8023d7c:	4604      	mov	r4, r0
 8023d7e:	4620      	mov	r0, r4
 8023d80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8023d82:	4b0b      	ldr	r3, [pc, #44]	; (8023db0 <__sfp+0x74>)
 8023d84:	6665      	str	r5, [r4, #100]	; 0x64
 8023d86:	e9c4 5500 	strd	r5, r5, [r4]
 8023d8a:	60a5      	str	r5, [r4, #8]
 8023d8c:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8023d90:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8023d94:	2208      	movs	r2, #8
 8023d96:	4629      	mov	r1, r5
 8023d98:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8023d9c:	f7ff ff3e 	bl	8023c1c <memset>
 8023da0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8023da4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8023da8:	e7e9      	b.n	8023d7e <__sfp+0x42>
 8023daa:	bf00      	nop
 8023dac:	08024a4c 	.word	0x08024a4c
 8023db0:	ffff0001 	.word	0xffff0001

08023db4 <_fwalk_reent>:
 8023db4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8023db8:	4680      	mov	r8, r0
 8023dba:	4689      	mov	r9, r1
 8023dbc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8023dc0:	2600      	movs	r6, #0
 8023dc2:	b914      	cbnz	r4, 8023dca <_fwalk_reent+0x16>
 8023dc4:	4630      	mov	r0, r6
 8023dc6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8023dca:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8023dce:	3f01      	subs	r7, #1
 8023dd0:	d501      	bpl.n	8023dd6 <_fwalk_reent+0x22>
 8023dd2:	6824      	ldr	r4, [r4, #0]
 8023dd4:	e7f5      	b.n	8023dc2 <_fwalk_reent+0xe>
 8023dd6:	89ab      	ldrh	r3, [r5, #12]
 8023dd8:	2b01      	cmp	r3, #1
 8023dda:	d907      	bls.n	8023dec <_fwalk_reent+0x38>
 8023ddc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8023de0:	3301      	adds	r3, #1
 8023de2:	d003      	beq.n	8023dec <_fwalk_reent+0x38>
 8023de4:	4629      	mov	r1, r5
 8023de6:	4640      	mov	r0, r8
 8023de8:	47c8      	blx	r9
 8023dea:	4306      	orrs	r6, r0
 8023dec:	3568      	adds	r5, #104	; 0x68
 8023dee:	e7ee      	b.n	8023dce <_fwalk_reent+0x1a>

08023df0 <_malloc_r>:
 8023df0:	b570      	push	{r4, r5, r6, lr}
 8023df2:	1ccd      	adds	r5, r1, #3
 8023df4:	f025 0503 	bic.w	r5, r5, #3
 8023df8:	3508      	adds	r5, #8
 8023dfa:	2d0c      	cmp	r5, #12
 8023dfc:	bf38      	it	cc
 8023dfe:	250c      	movcc	r5, #12
 8023e00:	2d00      	cmp	r5, #0
 8023e02:	4606      	mov	r6, r0
 8023e04:	db01      	blt.n	8023e0a <_malloc_r+0x1a>
 8023e06:	42a9      	cmp	r1, r5
 8023e08:	d903      	bls.n	8023e12 <_malloc_r+0x22>
 8023e0a:	230c      	movs	r3, #12
 8023e0c:	6033      	str	r3, [r6, #0]
 8023e0e:	2000      	movs	r0, #0
 8023e10:	bd70      	pop	{r4, r5, r6, pc}
 8023e12:	f000 fd6b 	bl	80248ec <__malloc_lock>
 8023e16:	4a21      	ldr	r2, [pc, #132]	; (8023e9c <_malloc_r+0xac>)
 8023e18:	6814      	ldr	r4, [r2, #0]
 8023e1a:	4621      	mov	r1, r4
 8023e1c:	b991      	cbnz	r1, 8023e44 <_malloc_r+0x54>
 8023e1e:	4c20      	ldr	r4, [pc, #128]	; (8023ea0 <_malloc_r+0xb0>)
 8023e20:	6823      	ldr	r3, [r4, #0]
 8023e22:	b91b      	cbnz	r3, 8023e2c <_malloc_r+0x3c>
 8023e24:	4630      	mov	r0, r6
 8023e26:	f000 fb05 	bl	8024434 <_sbrk_r>
 8023e2a:	6020      	str	r0, [r4, #0]
 8023e2c:	4629      	mov	r1, r5
 8023e2e:	4630      	mov	r0, r6
 8023e30:	f000 fb00 	bl	8024434 <_sbrk_r>
 8023e34:	1c43      	adds	r3, r0, #1
 8023e36:	d124      	bne.n	8023e82 <_malloc_r+0x92>
 8023e38:	230c      	movs	r3, #12
 8023e3a:	6033      	str	r3, [r6, #0]
 8023e3c:	4630      	mov	r0, r6
 8023e3e:	f000 fd56 	bl	80248ee <__malloc_unlock>
 8023e42:	e7e4      	b.n	8023e0e <_malloc_r+0x1e>
 8023e44:	680b      	ldr	r3, [r1, #0]
 8023e46:	1b5b      	subs	r3, r3, r5
 8023e48:	d418      	bmi.n	8023e7c <_malloc_r+0x8c>
 8023e4a:	2b0b      	cmp	r3, #11
 8023e4c:	d90f      	bls.n	8023e6e <_malloc_r+0x7e>
 8023e4e:	600b      	str	r3, [r1, #0]
 8023e50:	50cd      	str	r5, [r1, r3]
 8023e52:	18cc      	adds	r4, r1, r3
 8023e54:	4630      	mov	r0, r6
 8023e56:	f000 fd4a 	bl	80248ee <__malloc_unlock>
 8023e5a:	f104 000b 	add.w	r0, r4, #11
 8023e5e:	1d23      	adds	r3, r4, #4
 8023e60:	f020 0007 	bic.w	r0, r0, #7
 8023e64:	1ac3      	subs	r3, r0, r3
 8023e66:	d0d3      	beq.n	8023e10 <_malloc_r+0x20>
 8023e68:	425a      	negs	r2, r3
 8023e6a:	50e2      	str	r2, [r4, r3]
 8023e6c:	e7d0      	b.n	8023e10 <_malloc_r+0x20>
 8023e6e:	428c      	cmp	r4, r1
 8023e70:	684b      	ldr	r3, [r1, #4]
 8023e72:	bf16      	itet	ne
 8023e74:	6063      	strne	r3, [r4, #4]
 8023e76:	6013      	streq	r3, [r2, #0]
 8023e78:	460c      	movne	r4, r1
 8023e7a:	e7eb      	b.n	8023e54 <_malloc_r+0x64>
 8023e7c:	460c      	mov	r4, r1
 8023e7e:	6849      	ldr	r1, [r1, #4]
 8023e80:	e7cc      	b.n	8023e1c <_malloc_r+0x2c>
 8023e82:	1cc4      	adds	r4, r0, #3
 8023e84:	f024 0403 	bic.w	r4, r4, #3
 8023e88:	42a0      	cmp	r0, r4
 8023e8a:	d005      	beq.n	8023e98 <_malloc_r+0xa8>
 8023e8c:	1a21      	subs	r1, r4, r0
 8023e8e:	4630      	mov	r0, r6
 8023e90:	f000 fad0 	bl	8024434 <_sbrk_r>
 8023e94:	3001      	adds	r0, #1
 8023e96:	d0cf      	beq.n	8023e38 <_malloc_r+0x48>
 8023e98:	6025      	str	r5, [r4, #0]
 8023e9a:	e7db      	b.n	8023e54 <_malloc_r+0x64>
 8023e9c:	20000090 	.word	0x20000090
 8023ea0:	20000094 	.word	0x20000094

08023ea4 <__sfputc_r>:
 8023ea4:	6893      	ldr	r3, [r2, #8]
 8023ea6:	3b01      	subs	r3, #1
 8023ea8:	2b00      	cmp	r3, #0
 8023eaa:	b410      	push	{r4}
 8023eac:	6093      	str	r3, [r2, #8]
 8023eae:	da08      	bge.n	8023ec2 <__sfputc_r+0x1e>
 8023eb0:	6994      	ldr	r4, [r2, #24]
 8023eb2:	42a3      	cmp	r3, r4
 8023eb4:	db01      	blt.n	8023eba <__sfputc_r+0x16>
 8023eb6:	290a      	cmp	r1, #10
 8023eb8:	d103      	bne.n	8023ec2 <__sfputc_r+0x1e>
 8023eba:	f85d 4b04 	ldr.w	r4, [sp], #4
 8023ebe:	f000 bb0d 	b.w	80244dc <__swbuf_r>
 8023ec2:	6813      	ldr	r3, [r2, #0]
 8023ec4:	1c58      	adds	r0, r3, #1
 8023ec6:	6010      	str	r0, [r2, #0]
 8023ec8:	7019      	strb	r1, [r3, #0]
 8023eca:	4608      	mov	r0, r1
 8023ecc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8023ed0:	4770      	bx	lr

08023ed2 <__sfputs_r>:
 8023ed2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8023ed4:	4606      	mov	r6, r0
 8023ed6:	460f      	mov	r7, r1
 8023ed8:	4614      	mov	r4, r2
 8023eda:	18d5      	adds	r5, r2, r3
 8023edc:	42ac      	cmp	r4, r5
 8023ede:	d101      	bne.n	8023ee4 <__sfputs_r+0x12>
 8023ee0:	2000      	movs	r0, #0
 8023ee2:	e007      	b.n	8023ef4 <__sfputs_r+0x22>
 8023ee4:	463a      	mov	r2, r7
 8023ee6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8023eea:	4630      	mov	r0, r6
 8023eec:	f7ff ffda 	bl	8023ea4 <__sfputc_r>
 8023ef0:	1c43      	adds	r3, r0, #1
 8023ef2:	d1f3      	bne.n	8023edc <__sfputs_r+0xa>
 8023ef4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08023ef8 <_vfiprintf_r>:
 8023ef8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023efc:	460c      	mov	r4, r1
 8023efe:	b09d      	sub	sp, #116	; 0x74
 8023f00:	4617      	mov	r7, r2
 8023f02:	461d      	mov	r5, r3
 8023f04:	4606      	mov	r6, r0
 8023f06:	b118      	cbz	r0, 8023f10 <_vfiprintf_r+0x18>
 8023f08:	6983      	ldr	r3, [r0, #24]
 8023f0a:	b90b      	cbnz	r3, 8023f10 <_vfiprintf_r+0x18>
 8023f0c:	f7ff fee6 	bl	8023cdc <__sinit>
 8023f10:	4b7c      	ldr	r3, [pc, #496]	; (8024104 <_vfiprintf_r+0x20c>)
 8023f12:	429c      	cmp	r4, r3
 8023f14:	d158      	bne.n	8023fc8 <_vfiprintf_r+0xd0>
 8023f16:	6874      	ldr	r4, [r6, #4]
 8023f18:	89a3      	ldrh	r3, [r4, #12]
 8023f1a:	0718      	lsls	r0, r3, #28
 8023f1c:	d55e      	bpl.n	8023fdc <_vfiprintf_r+0xe4>
 8023f1e:	6923      	ldr	r3, [r4, #16]
 8023f20:	2b00      	cmp	r3, #0
 8023f22:	d05b      	beq.n	8023fdc <_vfiprintf_r+0xe4>
 8023f24:	2300      	movs	r3, #0
 8023f26:	9309      	str	r3, [sp, #36]	; 0x24
 8023f28:	2320      	movs	r3, #32
 8023f2a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8023f2e:	2330      	movs	r3, #48	; 0x30
 8023f30:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8023f34:	9503      	str	r5, [sp, #12]
 8023f36:	f04f 0b01 	mov.w	fp, #1
 8023f3a:	46b8      	mov	r8, r7
 8023f3c:	4645      	mov	r5, r8
 8023f3e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8023f42:	b10b      	cbz	r3, 8023f48 <_vfiprintf_r+0x50>
 8023f44:	2b25      	cmp	r3, #37	; 0x25
 8023f46:	d154      	bne.n	8023ff2 <_vfiprintf_r+0xfa>
 8023f48:	ebb8 0a07 	subs.w	sl, r8, r7
 8023f4c:	d00b      	beq.n	8023f66 <_vfiprintf_r+0x6e>
 8023f4e:	4653      	mov	r3, sl
 8023f50:	463a      	mov	r2, r7
 8023f52:	4621      	mov	r1, r4
 8023f54:	4630      	mov	r0, r6
 8023f56:	f7ff ffbc 	bl	8023ed2 <__sfputs_r>
 8023f5a:	3001      	adds	r0, #1
 8023f5c:	f000 80c2 	beq.w	80240e4 <_vfiprintf_r+0x1ec>
 8023f60:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8023f62:	4453      	add	r3, sl
 8023f64:	9309      	str	r3, [sp, #36]	; 0x24
 8023f66:	f898 3000 	ldrb.w	r3, [r8]
 8023f6a:	2b00      	cmp	r3, #0
 8023f6c:	f000 80ba 	beq.w	80240e4 <_vfiprintf_r+0x1ec>
 8023f70:	2300      	movs	r3, #0
 8023f72:	f04f 32ff 	mov.w	r2, #4294967295
 8023f76:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8023f7a:	9304      	str	r3, [sp, #16]
 8023f7c:	9307      	str	r3, [sp, #28]
 8023f7e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8023f82:	931a      	str	r3, [sp, #104]	; 0x68
 8023f84:	46a8      	mov	r8, r5
 8023f86:	2205      	movs	r2, #5
 8023f88:	f818 1b01 	ldrb.w	r1, [r8], #1
 8023f8c:	485e      	ldr	r0, [pc, #376]	; (8024108 <_vfiprintf_r+0x210>)
 8023f8e:	f7fc fb2f 	bl	80205f0 <memchr>
 8023f92:	9b04      	ldr	r3, [sp, #16]
 8023f94:	bb78      	cbnz	r0, 8023ff6 <_vfiprintf_r+0xfe>
 8023f96:	06d9      	lsls	r1, r3, #27
 8023f98:	bf44      	itt	mi
 8023f9a:	2220      	movmi	r2, #32
 8023f9c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8023fa0:	071a      	lsls	r2, r3, #28
 8023fa2:	bf44      	itt	mi
 8023fa4:	222b      	movmi	r2, #43	; 0x2b
 8023fa6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8023faa:	782a      	ldrb	r2, [r5, #0]
 8023fac:	2a2a      	cmp	r2, #42	; 0x2a
 8023fae:	d02a      	beq.n	8024006 <_vfiprintf_r+0x10e>
 8023fb0:	9a07      	ldr	r2, [sp, #28]
 8023fb2:	46a8      	mov	r8, r5
 8023fb4:	2000      	movs	r0, #0
 8023fb6:	250a      	movs	r5, #10
 8023fb8:	4641      	mov	r1, r8
 8023fba:	f811 3b01 	ldrb.w	r3, [r1], #1
 8023fbe:	3b30      	subs	r3, #48	; 0x30
 8023fc0:	2b09      	cmp	r3, #9
 8023fc2:	d969      	bls.n	8024098 <_vfiprintf_r+0x1a0>
 8023fc4:	b360      	cbz	r0, 8024020 <_vfiprintf_r+0x128>
 8023fc6:	e024      	b.n	8024012 <_vfiprintf_r+0x11a>
 8023fc8:	4b50      	ldr	r3, [pc, #320]	; (802410c <_vfiprintf_r+0x214>)
 8023fca:	429c      	cmp	r4, r3
 8023fcc:	d101      	bne.n	8023fd2 <_vfiprintf_r+0xda>
 8023fce:	68b4      	ldr	r4, [r6, #8]
 8023fd0:	e7a2      	b.n	8023f18 <_vfiprintf_r+0x20>
 8023fd2:	4b4f      	ldr	r3, [pc, #316]	; (8024110 <_vfiprintf_r+0x218>)
 8023fd4:	429c      	cmp	r4, r3
 8023fd6:	bf08      	it	eq
 8023fd8:	68f4      	ldreq	r4, [r6, #12]
 8023fda:	e79d      	b.n	8023f18 <_vfiprintf_r+0x20>
 8023fdc:	4621      	mov	r1, r4
 8023fde:	4630      	mov	r0, r6
 8023fe0:	f000 fae0 	bl	80245a4 <__swsetup_r>
 8023fe4:	2800      	cmp	r0, #0
 8023fe6:	d09d      	beq.n	8023f24 <_vfiprintf_r+0x2c>
 8023fe8:	f04f 30ff 	mov.w	r0, #4294967295
 8023fec:	b01d      	add	sp, #116	; 0x74
 8023fee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023ff2:	46a8      	mov	r8, r5
 8023ff4:	e7a2      	b.n	8023f3c <_vfiprintf_r+0x44>
 8023ff6:	4a44      	ldr	r2, [pc, #272]	; (8024108 <_vfiprintf_r+0x210>)
 8023ff8:	1a80      	subs	r0, r0, r2
 8023ffa:	fa0b f000 	lsl.w	r0, fp, r0
 8023ffe:	4318      	orrs	r0, r3
 8024000:	9004      	str	r0, [sp, #16]
 8024002:	4645      	mov	r5, r8
 8024004:	e7be      	b.n	8023f84 <_vfiprintf_r+0x8c>
 8024006:	9a03      	ldr	r2, [sp, #12]
 8024008:	1d11      	adds	r1, r2, #4
 802400a:	6812      	ldr	r2, [r2, #0]
 802400c:	9103      	str	r1, [sp, #12]
 802400e:	2a00      	cmp	r2, #0
 8024010:	db01      	blt.n	8024016 <_vfiprintf_r+0x11e>
 8024012:	9207      	str	r2, [sp, #28]
 8024014:	e004      	b.n	8024020 <_vfiprintf_r+0x128>
 8024016:	4252      	negs	r2, r2
 8024018:	f043 0302 	orr.w	r3, r3, #2
 802401c:	9207      	str	r2, [sp, #28]
 802401e:	9304      	str	r3, [sp, #16]
 8024020:	f898 3000 	ldrb.w	r3, [r8]
 8024024:	2b2e      	cmp	r3, #46	; 0x2e
 8024026:	d10e      	bne.n	8024046 <_vfiprintf_r+0x14e>
 8024028:	f898 3001 	ldrb.w	r3, [r8, #1]
 802402c:	2b2a      	cmp	r3, #42	; 0x2a
 802402e:	d138      	bne.n	80240a2 <_vfiprintf_r+0x1aa>
 8024030:	9b03      	ldr	r3, [sp, #12]
 8024032:	1d1a      	adds	r2, r3, #4
 8024034:	681b      	ldr	r3, [r3, #0]
 8024036:	9203      	str	r2, [sp, #12]
 8024038:	2b00      	cmp	r3, #0
 802403a:	bfb8      	it	lt
 802403c:	f04f 33ff 	movlt.w	r3, #4294967295
 8024040:	f108 0802 	add.w	r8, r8, #2
 8024044:	9305      	str	r3, [sp, #20]
 8024046:	4d33      	ldr	r5, [pc, #204]	; (8024114 <_vfiprintf_r+0x21c>)
 8024048:	f898 1000 	ldrb.w	r1, [r8]
 802404c:	2203      	movs	r2, #3
 802404e:	4628      	mov	r0, r5
 8024050:	f7fc face 	bl	80205f0 <memchr>
 8024054:	b140      	cbz	r0, 8024068 <_vfiprintf_r+0x170>
 8024056:	2340      	movs	r3, #64	; 0x40
 8024058:	1b40      	subs	r0, r0, r5
 802405a:	fa03 f000 	lsl.w	r0, r3, r0
 802405e:	9b04      	ldr	r3, [sp, #16]
 8024060:	4303      	orrs	r3, r0
 8024062:	f108 0801 	add.w	r8, r8, #1
 8024066:	9304      	str	r3, [sp, #16]
 8024068:	f898 1000 	ldrb.w	r1, [r8]
 802406c:	482a      	ldr	r0, [pc, #168]	; (8024118 <_vfiprintf_r+0x220>)
 802406e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8024072:	2206      	movs	r2, #6
 8024074:	f108 0701 	add.w	r7, r8, #1
 8024078:	f7fc faba 	bl	80205f0 <memchr>
 802407c:	2800      	cmp	r0, #0
 802407e:	d037      	beq.n	80240f0 <_vfiprintf_r+0x1f8>
 8024080:	4b26      	ldr	r3, [pc, #152]	; (802411c <_vfiprintf_r+0x224>)
 8024082:	bb1b      	cbnz	r3, 80240cc <_vfiprintf_r+0x1d4>
 8024084:	9b03      	ldr	r3, [sp, #12]
 8024086:	3307      	adds	r3, #7
 8024088:	f023 0307 	bic.w	r3, r3, #7
 802408c:	3308      	adds	r3, #8
 802408e:	9303      	str	r3, [sp, #12]
 8024090:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8024092:	444b      	add	r3, r9
 8024094:	9309      	str	r3, [sp, #36]	; 0x24
 8024096:	e750      	b.n	8023f3a <_vfiprintf_r+0x42>
 8024098:	fb05 3202 	mla	r2, r5, r2, r3
 802409c:	2001      	movs	r0, #1
 802409e:	4688      	mov	r8, r1
 80240a0:	e78a      	b.n	8023fb8 <_vfiprintf_r+0xc0>
 80240a2:	2300      	movs	r3, #0
 80240a4:	f108 0801 	add.w	r8, r8, #1
 80240a8:	9305      	str	r3, [sp, #20]
 80240aa:	4619      	mov	r1, r3
 80240ac:	250a      	movs	r5, #10
 80240ae:	4640      	mov	r0, r8
 80240b0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80240b4:	3a30      	subs	r2, #48	; 0x30
 80240b6:	2a09      	cmp	r2, #9
 80240b8:	d903      	bls.n	80240c2 <_vfiprintf_r+0x1ca>
 80240ba:	2b00      	cmp	r3, #0
 80240bc:	d0c3      	beq.n	8024046 <_vfiprintf_r+0x14e>
 80240be:	9105      	str	r1, [sp, #20]
 80240c0:	e7c1      	b.n	8024046 <_vfiprintf_r+0x14e>
 80240c2:	fb05 2101 	mla	r1, r5, r1, r2
 80240c6:	2301      	movs	r3, #1
 80240c8:	4680      	mov	r8, r0
 80240ca:	e7f0      	b.n	80240ae <_vfiprintf_r+0x1b6>
 80240cc:	ab03      	add	r3, sp, #12
 80240ce:	9300      	str	r3, [sp, #0]
 80240d0:	4622      	mov	r2, r4
 80240d2:	4b13      	ldr	r3, [pc, #76]	; (8024120 <_vfiprintf_r+0x228>)
 80240d4:	a904      	add	r1, sp, #16
 80240d6:	4630      	mov	r0, r6
 80240d8:	f3af 8000 	nop.w
 80240dc:	f1b0 3fff 	cmp.w	r0, #4294967295
 80240e0:	4681      	mov	r9, r0
 80240e2:	d1d5      	bne.n	8024090 <_vfiprintf_r+0x198>
 80240e4:	89a3      	ldrh	r3, [r4, #12]
 80240e6:	065b      	lsls	r3, r3, #25
 80240e8:	f53f af7e 	bmi.w	8023fe8 <_vfiprintf_r+0xf0>
 80240ec:	9809      	ldr	r0, [sp, #36]	; 0x24
 80240ee:	e77d      	b.n	8023fec <_vfiprintf_r+0xf4>
 80240f0:	ab03      	add	r3, sp, #12
 80240f2:	9300      	str	r3, [sp, #0]
 80240f4:	4622      	mov	r2, r4
 80240f6:	4b0a      	ldr	r3, [pc, #40]	; (8024120 <_vfiprintf_r+0x228>)
 80240f8:	a904      	add	r1, sp, #16
 80240fa:	4630      	mov	r0, r6
 80240fc:	f000 f888 	bl	8024210 <_printf_i>
 8024100:	e7ec      	b.n	80240dc <_vfiprintf_r+0x1e4>
 8024102:	bf00      	nop
 8024104:	08024a70 	.word	0x08024a70
 8024108:	08024ab0 	.word	0x08024ab0
 802410c:	08024a90 	.word	0x08024a90
 8024110:	08024a50 	.word	0x08024a50
 8024114:	08024ab6 	.word	0x08024ab6
 8024118:	08024aba 	.word	0x08024aba
 802411c:	00000000 	.word	0x00000000
 8024120:	08023ed3 	.word	0x08023ed3

08024124 <_printf_common>:
 8024124:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8024128:	4691      	mov	r9, r2
 802412a:	461f      	mov	r7, r3
 802412c:	688a      	ldr	r2, [r1, #8]
 802412e:	690b      	ldr	r3, [r1, #16]
 8024130:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8024134:	4293      	cmp	r3, r2
 8024136:	bfb8      	it	lt
 8024138:	4613      	movlt	r3, r2
 802413a:	f8c9 3000 	str.w	r3, [r9]
 802413e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8024142:	4606      	mov	r6, r0
 8024144:	460c      	mov	r4, r1
 8024146:	b112      	cbz	r2, 802414e <_printf_common+0x2a>
 8024148:	3301      	adds	r3, #1
 802414a:	f8c9 3000 	str.w	r3, [r9]
 802414e:	6823      	ldr	r3, [r4, #0]
 8024150:	0699      	lsls	r1, r3, #26
 8024152:	bf42      	ittt	mi
 8024154:	f8d9 3000 	ldrmi.w	r3, [r9]
 8024158:	3302      	addmi	r3, #2
 802415a:	f8c9 3000 	strmi.w	r3, [r9]
 802415e:	6825      	ldr	r5, [r4, #0]
 8024160:	f015 0506 	ands.w	r5, r5, #6
 8024164:	d107      	bne.n	8024176 <_printf_common+0x52>
 8024166:	f104 0a19 	add.w	sl, r4, #25
 802416a:	68e3      	ldr	r3, [r4, #12]
 802416c:	f8d9 2000 	ldr.w	r2, [r9]
 8024170:	1a9b      	subs	r3, r3, r2
 8024172:	42ab      	cmp	r3, r5
 8024174:	dc28      	bgt.n	80241c8 <_printf_common+0xa4>
 8024176:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 802417a:	6822      	ldr	r2, [r4, #0]
 802417c:	3300      	adds	r3, #0
 802417e:	bf18      	it	ne
 8024180:	2301      	movne	r3, #1
 8024182:	0692      	lsls	r2, r2, #26
 8024184:	d42d      	bmi.n	80241e2 <_printf_common+0xbe>
 8024186:	f104 0243 	add.w	r2, r4, #67	; 0x43
 802418a:	4639      	mov	r1, r7
 802418c:	4630      	mov	r0, r6
 802418e:	47c0      	blx	r8
 8024190:	3001      	adds	r0, #1
 8024192:	d020      	beq.n	80241d6 <_printf_common+0xb2>
 8024194:	6823      	ldr	r3, [r4, #0]
 8024196:	68e5      	ldr	r5, [r4, #12]
 8024198:	f8d9 2000 	ldr.w	r2, [r9]
 802419c:	f003 0306 	and.w	r3, r3, #6
 80241a0:	2b04      	cmp	r3, #4
 80241a2:	bf08      	it	eq
 80241a4:	1aad      	subeq	r5, r5, r2
 80241a6:	68a3      	ldr	r3, [r4, #8]
 80241a8:	6922      	ldr	r2, [r4, #16]
 80241aa:	bf0c      	ite	eq
 80241ac:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80241b0:	2500      	movne	r5, #0
 80241b2:	4293      	cmp	r3, r2
 80241b4:	bfc4      	itt	gt
 80241b6:	1a9b      	subgt	r3, r3, r2
 80241b8:	18ed      	addgt	r5, r5, r3
 80241ba:	f04f 0900 	mov.w	r9, #0
 80241be:	341a      	adds	r4, #26
 80241c0:	454d      	cmp	r5, r9
 80241c2:	d11a      	bne.n	80241fa <_printf_common+0xd6>
 80241c4:	2000      	movs	r0, #0
 80241c6:	e008      	b.n	80241da <_printf_common+0xb6>
 80241c8:	2301      	movs	r3, #1
 80241ca:	4652      	mov	r2, sl
 80241cc:	4639      	mov	r1, r7
 80241ce:	4630      	mov	r0, r6
 80241d0:	47c0      	blx	r8
 80241d2:	3001      	adds	r0, #1
 80241d4:	d103      	bne.n	80241de <_printf_common+0xba>
 80241d6:	f04f 30ff 	mov.w	r0, #4294967295
 80241da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80241de:	3501      	adds	r5, #1
 80241e0:	e7c3      	b.n	802416a <_printf_common+0x46>
 80241e2:	18e1      	adds	r1, r4, r3
 80241e4:	1c5a      	adds	r2, r3, #1
 80241e6:	2030      	movs	r0, #48	; 0x30
 80241e8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80241ec:	4422      	add	r2, r4
 80241ee:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80241f2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80241f6:	3302      	adds	r3, #2
 80241f8:	e7c5      	b.n	8024186 <_printf_common+0x62>
 80241fa:	2301      	movs	r3, #1
 80241fc:	4622      	mov	r2, r4
 80241fe:	4639      	mov	r1, r7
 8024200:	4630      	mov	r0, r6
 8024202:	47c0      	blx	r8
 8024204:	3001      	adds	r0, #1
 8024206:	d0e6      	beq.n	80241d6 <_printf_common+0xb2>
 8024208:	f109 0901 	add.w	r9, r9, #1
 802420c:	e7d8      	b.n	80241c0 <_printf_common+0x9c>
	...

08024210 <_printf_i>:
 8024210:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8024214:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8024218:	460c      	mov	r4, r1
 802421a:	7e09      	ldrb	r1, [r1, #24]
 802421c:	b085      	sub	sp, #20
 802421e:	296e      	cmp	r1, #110	; 0x6e
 8024220:	4617      	mov	r7, r2
 8024222:	4606      	mov	r6, r0
 8024224:	4698      	mov	r8, r3
 8024226:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8024228:	f000 80b3 	beq.w	8024392 <_printf_i+0x182>
 802422c:	d822      	bhi.n	8024274 <_printf_i+0x64>
 802422e:	2963      	cmp	r1, #99	; 0x63
 8024230:	d036      	beq.n	80242a0 <_printf_i+0x90>
 8024232:	d80a      	bhi.n	802424a <_printf_i+0x3a>
 8024234:	2900      	cmp	r1, #0
 8024236:	f000 80b9 	beq.w	80243ac <_printf_i+0x19c>
 802423a:	2958      	cmp	r1, #88	; 0x58
 802423c:	f000 8083 	beq.w	8024346 <_printf_i+0x136>
 8024240:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8024244:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8024248:	e032      	b.n	80242b0 <_printf_i+0xa0>
 802424a:	2964      	cmp	r1, #100	; 0x64
 802424c:	d001      	beq.n	8024252 <_printf_i+0x42>
 802424e:	2969      	cmp	r1, #105	; 0x69
 8024250:	d1f6      	bne.n	8024240 <_printf_i+0x30>
 8024252:	6820      	ldr	r0, [r4, #0]
 8024254:	6813      	ldr	r3, [r2, #0]
 8024256:	0605      	lsls	r5, r0, #24
 8024258:	f103 0104 	add.w	r1, r3, #4
 802425c:	d52a      	bpl.n	80242b4 <_printf_i+0xa4>
 802425e:	681b      	ldr	r3, [r3, #0]
 8024260:	6011      	str	r1, [r2, #0]
 8024262:	2b00      	cmp	r3, #0
 8024264:	da03      	bge.n	802426e <_printf_i+0x5e>
 8024266:	222d      	movs	r2, #45	; 0x2d
 8024268:	425b      	negs	r3, r3
 802426a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 802426e:	486f      	ldr	r0, [pc, #444]	; (802442c <_printf_i+0x21c>)
 8024270:	220a      	movs	r2, #10
 8024272:	e039      	b.n	80242e8 <_printf_i+0xd8>
 8024274:	2973      	cmp	r1, #115	; 0x73
 8024276:	f000 809d 	beq.w	80243b4 <_printf_i+0x1a4>
 802427a:	d808      	bhi.n	802428e <_printf_i+0x7e>
 802427c:	296f      	cmp	r1, #111	; 0x6f
 802427e:	d020      	beq.n	80242c2 <_printf_i+0xb2>
 8024280:	2970      	cmp	r1, #112	; 0x70
 8024282:	d1dd      	bne.n	8024240 <_printf_i+0x30>
 8024284:	6823      	ldr	r3, [r4, #0]
 8024286:	f043 0320 	orr.w	r3, r3, #32
 802428a:	6023      	str	r3, [r4, #0]
 802428c:	e003      	b.n	8024296 <_printf_i+0x86>
 802428e:	2975      	cmp	r1, #117	; 0x75
 8024290:	d017      	beq.n	80242c2 <_printf_i+0xb2>
 8024292:	2978      	cmp	r1, #120	; 0x78
 8024294:	d1d4      	bne.n	8024240 <_printf_i+0x30>
 8024296:	2378      	movs	r3, #120	; 0x78
 8024298:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 802429c:	4864      	ldr	r0, [pc, #400]	; (8024430 <_printf_i+0x220>)
 802429e:	e055      	b.n	802434c <_printf_i+0x13c>
 80242a0:	6813      	ldr	r3, [r2, #0]
 80242a2:	1d19      	adds	r1, r3, #4
 80242a4:	681b      	ldr	r3, [r3, #0]
 80242a6:	6011      	str	r1, [r2, #0]
 80242a8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80242ac:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80242b0:	2301      	movs	r3, #1
 80242b2:	e08c      	b.n	80243ce <_printf_i+0x1be>
 80242b4:	681b      	ldr	r3, [r3, #0]
 80242b6:	6011      	str	r1, [r2, #0]
 80242b8:	f010 0f40 	tst.w	r0, #64	; 0x40
 80242bc:	bf18      	it	ne
 80242be:	b21b      	sxthne	r3, r3
 80242c0:	e7cf      	b.n	8024262 <_printf_i+0x52>
 80242c2:	6813      	ldr	r3, [r2, #0]
 80242c4:	6825      	ldr	r5, [r4, #0]
 80242c6:	1d18      	adds	r0, r3, #4
 80242c8:	6010      	str	r0, [r2, #0]
 80242ca:	0628      	lsls	r0, r5, #24
 80242cc:	d501      	bpl.n	80242d2 <_printf_i+0xc2>
 80242ce:	681b      	ldr	r3, [r3, #0]
 80242d0:	e002      	b.n	80242d8 <_printf_i+0xc8>
 80242d2:	0668      	lsls	r0, r5, #25
 80242d4:	d5fb      	bpl.n	80242ce <_printf_i+0xbe>
 80242d6:	881b      	ldrh	r3, [r3, #0]
 80242d8:	4854      	ldr	r0, [pc, #336]	; (802442c <_printf_i+0x21c>)
 80242da:	296f      	cmp	r1, #111	; 0x6f
 80242dc:	bf14      	ite	ne
 80242de:	220a      	movne	r2, #10
 80242e0:	2208      	moveq	r2, #8
 80242e2:	2100      	movs	r1, #0
 80242e4:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80242e8:	6865      	ldr	r5, [r4, #4]
 80242ea:	60a5      	str	r5, [r4, #8]
 80242ec:	2d00      	cmp	r5, #0
 80242ee:	f2c0 8095 	blt.w	802441c <_printf_i+0x20c>
 80242f2:	6821      	ldr	r1, [r4, #0]
 80242f4:	f021 0104 	bic.w	r1, r1, #4
 80242f8:	6021      	str	r1, [r4, #0]
 80242fa:	2b00      	cmp	r3, #0
 80242fc:	d13d      	bne.n	802437a <_printf_i+0x16a>
 80242fe:	2d00      	cmp	r5, #0
 8024300:	f040 808e 	bne.w	8024420 <_printf_i+0x210>
 8024304:	4665      	mov	r5, ip
 8024306:	2a08      	cmp	r2, #8
 8024308:	d10b      	bne.n	8024322 <_printf_i+0x112>
 802430a:	6823      	ldr	r3, [r4, #0]
 802430c:	07db      	lsls	r3, r3, #31
 802430e:	d508      	bpl.n	8024322 <_printf_i+0x112>
 8024310:	6923      	ldr	r3, [r4, #16]
 8024312:	6862      	ldr	r2, [r4, #4]
 8024314:	429a      	cmp	r2, r3
 8024316:	bfde      	ittt	le
 8024318:	2330      	movle	r3, #48	; 0x30
 802431a:	f805 3c01 	strble.w	r3, [r5, #-1]
 802431e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8024322:	ebac 0305 	sub.w	r3, ip, r5
 8024326:	6123      	str	r3, [r4, #16]
 8024328:	f8cd 8000 	str.w	r8, [sp]
 802432c:	463b      	mov	r3, r7
 802432e:	aa03      	add	r2, sp, #12
 8024330:	4621      	mov	r1, r4
 8024332:	4630      	mov	r0, r6
 8024334:	f7ff fef6 	bl	8024124 <_printf_common>
 8024338:	3001      	adds	r0, #1
 802433a:	d14d      	bne.n	80243d8 <_printf_i+0x1c8>
 802433c:	f04f 30ff 	mov.w	r0, #4294967295
 8024340:	b005      	add	sp, #20
 8024342:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8024346:	4839      	ldr	r0, [pc, #228]	; (802442c <_printf_i+0x21c>)
 8024348:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 802434c:	6813      	ldr	r3, [r2, #0]
 802434e:	6821      	ldr	r1, [r4, #0]
 8024350:	1d1d      	adds	r5, r3, #4
 8024352:	681b      	ldr	r3, [r3, #0]
 8024354:	6015      	str	r5, [r2, #0]
 8024356:	060a      	lsls	r2, r1, #24
 8024358:	d50b      	bpl.n	8024372 <_printf_i+0x162>
 802435a:	07ca      	lsls	r2, r1, #31
 802435c:	bf44      	itt	mi
 802435e:	f041 0120 	orrmi.w	r1, r1, #32
 8024362:	6021      	strmi	r1, [r4, #0]
 8024364:	b91b      	cbnz	r3, 802436e <_printf_i+0x15e>
 8024366:	6822      	ldr	r2, [r4, #0]
 8024368:	f022 0220 	bic.w	r2, r2, #32
 802436c:	6022      	str	r2, [r4, #0]
 802436e:	2210      	movs	r2, #16
 8024370:	e7b7      	b.n	80242e2 <_printf_i+0xd2>
 8024372:	064d      	lsls	r5, r1, #25
 8024374:	bf48      	it	mi
 8024376:	b29b      	uxthmi	r3, r3
 8024378:	e7ef      	b.n	802435a <_printf_i+0x14a>
 802437a:	4665      	mov	r5, ip
 802437c:	fbb3 f1f2 	udiv	r1, r3, r2
 8024380:	fb02 3311 	mls	r3, r2, r1, r3
 8024384:	5cc3      	ldrb	r3, [r0, r3]
 8024386:	f805 3d01 	strb.w	r3, [r5, #-1]!
 802438a:	460b      	mov	r3, r1
 802438c:	2900      	cmp	r1, #0
 802438e:	d1f5      	bne.n	802437c <_printf_i+0x16c>
 8024390:	e7b9      	b.n	8024306 <_printf_i+0xf6>
 8024392:	6813      	ldr	r3, [r2, #0]
 8024394:	6825      	ldr	r5, [r4, #0]
 8024396:	6961      	ldr	r1, [r4, #20]
 8024398:	1d18      	adds	r0, r3, #4
 802439a:	6010      	str	r0, [r2, #0]
 802439c:	0628      	lsls	r0, r5, #24
 802439e:	681b      	ldr	r3, [r3, #0]
 80243a0:	d501      	bpl.n	80243a6 <_printf_i+0x196>
 80243a2:	6019      	str	r1, [r3, #0]
 80243a4:	e002      	b.n	80243ac <_printf_i+0x19c>
 80243a6:	066a      	lsls	r2, r5, #25
 80243a8:	d5fb      	bpl.n	80243a2 <_printf_i+0x192>
 80243aa:	8019      	strh	r1, [r3, #0]
 80243ac:	2300      	movs	r3, #0
 80243ae:	6123      	str	r3, [r4, #16]
 80243b0:	4665      	mov	r5, ip
 80243b2:	e7b9      	b.n	8024328 <_printf_i+0x118>
 80243b4:	6813      	ldr	r3, [r2, #0]
 80243b6:	1d19      	adds	r1, r3, #4
 80243b8:	6011      	str	r1, [r2, #0]
 80243ba:	681d      	ldr	r5, [r3, #0]
 80243bc:	6862      	ldr	r2, [r4, #4]
 80243be:	2100      	movs	r1, #0
 80243c0:	4628      	mov	r0, r5
 80243c2:	f7fc f915 	bl	80205f0 <memchr>
 80243c6:	b108      	cbz	r0, 80243cc <_printf_i+0x1bc>
 80243c8:	1b40      	subs	r0, r0, r5
 80243ca:	6060      	str	r0, [r4, #4]
 80243cc:	6863      	ldr	r3, [r4, #4]
 80243ce:	6123      	str	r3, [r4, #16]
 80243d0:	2300      	movs	r3, #0
 80243d2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80243d6:	e7a7      	b.n	8024328 <_printf_i+0x118>
 80243d8:	6923      	ldr	r3, [r4, #16]
 80243da:	462a      	mov	r2, r5
 80243dc:	4639      	mov	r1, r7
 80243de:	4630      	mov	r0, r6
 80243e0:	47c0      	blx	r8
 80243e2:	3001      	adds	r0, #1
 80243e4:	d0aa      	beq.n	802433c <_printf_i+0x12c>
 80243e6:	6823      	ldr	r3, [r4, #0]
 80243e8:	079b      	lsls	r3, r3, #30
 80243ea:	d413      	bmi.n	8024414 <_printf_i+0x204>
 80243ec:	68e0      	ldr	r0, [r4, #12]
 80243ee:	9b03      	ldr	r3, [sp, #12]
 80243f0:	4298      	cmp	r0, r3
 80243f2:	bfb8      	it	lt
 80243f4:	4618      	movlt	r0, r3
 80243f6:	e7a3      	b.n	8024340 <_printf_i+0x130>
 80243f8:	2301      	movs	r3, #1
 80243fa:	464a      	mov	r2, r9
 80243fc:	4639      	mov	r1, r7
 80243fe:	4630      	mov	r0, r6
 8024400:	47c0      	blx	r8
 8024402:	3001      	adds	r0, #1
 8024404:	d09a      	beq.n	802433c <_printf_i+0x12c>
 8024406:	3501      	adds	r5, #1
 8024408:	68e3      	ldr	r3, [r4, #12]
 802440a:	9a03      	ldr	r2, [sp, #12]
 802440c:	1a9b      	subs	r3, r3, r2
 802440e:	42ab      	cmp	r3, r5
 8024410:	dcf2      	bgt.n	80243f8 <_printf_i+0x1e8>
 8024412:	e7eb      	b.n	80243ec <_printf_i+0x1dc>
 8024414:	2500      	movs	r5, #0
 8024416:	f104 0919 	add.w	r9, r4, #25
 802441a:	e7f5      	b.n	8024408 <_printf_i+0x1f8>
 802441c:	2b00      	cmp	r3, #0
 802441e:	d1ac      	bne.n	802437a <_printf_i+0x16a>
 8024420:	7803      	ldrb	r3, [r0, #0]
 8024422:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8024426:	f104 0542 	add.w	r5, r4, #66	; 0x42
 802442a:	e76c      	b.n	8024306 <_printf_i+0xf6>
 802442c:	08024ac1 	.word	0x08024ac1
 8024430:	08024ad2 	.word	0x08024ad2

08024434 <_sbrk_r>:
 8024434:	b538      	push	{r3, r4, r5, lr}
 8024436:	4c06      	ldr	r4, [pc, #24]	; (8024450 <_sbrk_r+0x1c>)
 8024438:	2300      	movs	r3, #0
 802443a:	4605      	mov	r5, r0
 802443c:	4608      	mov	r0, r1
 802443e:	6023      	str	r3, [r4, #0]
 8024440:	f7fc feca 	bl	80211d8 <_sbrk>
 8024444:	1c43      	adds	r3, r0, #1
 8024446:	d102      	bne.n	802444e <_sbrk_r+0x1a>
 8024448:	6823      	ldr	r3, [r4, #0]
 802444a:	b103      	cbz	r3, 802444e <_sbrk_r+0x1a>
 802444c:	602b      	str	r3, [r5, #0]
 802444e:	bd38      	pop	{r3, r4, r5, pc}
 8024450:	2000052c 	.word	0x2000052c

08024454 <__sread>:
 8024454:	b510      	push	{r4, lr}
 8024456:	460c      	mov	r4, r1
 8024458:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802445c:	f000 fa96 	bl	802498c <_read_r>
 8024460:	2800      	cmp	r0, #0
 8024462:	bfab      	itete	ge
 8024464:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8024466:	89a3      	ldrhlt	r3, [r4, #12]
 8024468:	181b      	addge	r3, r3, r0
 802446a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 802446e:	bfac      	ite	ge
 8024470:	6563      	strge	r3, [r4, #84]	; 0x54
 8024472:	81a3      	strhlt	r3, [r4, #12]
 8024474:	bd10      	pop	{r4, pc}

08024476 <__swrite>:
 8024476:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802447a:	461f      	mov	r7, r3
 802447c:	898b      	ldrh	r3, [r1, #12]
 802447e:	05db      	lsls	r3, r3, #23
 8024480:	4605      	mov	r5, r0
 8024482:	460c      	mov	r4, r1
 8024484:	4616      	mov	r6, r2
 8024486:	d505      	bpl.n	8024494 <__swrite+0x1e>
 8024488:	2302      	movs	r3, #2
 802448a:	2200      	movs	r2, #0
 802448c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8024490:	f000 f9b6 	bl	8024800 <_lseek_r>
 8024494:	89a3      	ldrh	r3, [r4, #12]
 8024496:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 802449a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 802449e:	81a3      	strh	r3, [r4, #12]
 80244a0:	4632      	mov	r2, r6
 80244a2:	463b      	mov	r3, r7
 80244a4:	4628      	mov	r0, r5
 80244a6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80244aa:	f000 b869 	b.w	8024580 <_write_r>

080244ae <__sseek>:
 80244ae:	b510      	push	{r4, lr}
 80244b0:	460c      	mov	r4, r1
 80244b2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80244b6:	f000 f9a3 	bl	8024800 <_lseek_r>
 80244ba:	1c43      	adds	r3, r0, #1
 80244bc:	89a3      	ldrh	r3, [r4, #12]
 80244be:	bf15      	itete	ne
 80244c0:	6560      	strne	r0, [r4, #84]	; 0x54
 80244c2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80244c6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80244ca:	81a3      	strheq	r3, [r4, #12]
 80244cc:	bf18      	it	ne
 80244ce:	81a3      	strhne	r3, [r4, #12]
 80244d0:	bd10      	pop	{r4, pc}

080244d2 <__sclose>:
 80244d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80244d6:	f000 b8d3 	b.w	8024680 <_close_r>
	...

080244dc <__swbuf_r>:
 80244dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80244de:	460e      	mov	r6, r1
 80244e0:	4614      	mov	r4, r2
 80244e2:	4605      	mov	r5, r0
 80244e4:	b118      	cbz	r0, 80244ee <__swbuf_r+0x12>
 80244e6:	6983      	ldr	r3, [r0, #24]
 80244e8:	b90b      	cbnz	r3, 80244ee <__swbuf_r+0x12>
 80244ea:	f7ff fbf7 	bl	8023cdc <__sinit>
 80244ee:	4b21      	ldr	r3, [pc, #132]	; (8024574 <__swbuf_r+0x98>)
 80244f0:	429c      	cmp	r4, r3
 80244f2:	d12a      	bne.n	802454a <__swbuf_r+0x6e>
 80244f4:	686c      	ldr	r4, [r5, #4]
 80244f6:	69a3      	ldr	r3, [r4, #24]
 80244f8:	60a3      	str	r3, [r4, #8]
 80244fa:	89a3      	ldrh	r3, [r4, #12]
 80244fc:	071a      	lsls	r2, r3, #28
 80244fe:	d52e      	bpl.n	802455e <__swbuf_r+0x82>
 8024500:	6923      	ldr	r3, [r4, #16]
 8024502:	b363      	cbz	r3, 802455e <__swbuf_r+0x82>
 8024504:	6923      	ldr	r3, [r4, #16]
 8024506:	6820      	ldr	r0, [r4, #0]
 8024508:	1ac0      	subs	r0, r0, r3
 802450a:	6963      	ldr	r3, [r4, #20]
 802450c:	b2f6      	uxtb	r6, r6
 802450e:	4283      	cmp	r3, r0
 8024510:	4637      	mov	r7, r6
 8024512:	dc04      	bgt.n	802451e <__swbuf_r+0x42>
 8024514:	4621      	mov	r1, r4
 8024516:	4628      	mov	r0, r5
 8024518:	f000 f948 	bl	80247ac <_fflush_r>
 802451c:	bb28      	cbnz	r0, 802456a <__swbuf_r+0x8e>
 802451e:	68a3      	ldr	r3, [r4, #8]
 8024520:	3b01      	subs	r3, #1
 8024522:	60a3      	str	r3, [r4, #8]
 8024524:	6823      	ldr	r3, [r4, #0]
 8024526:	1c5a      	adds	r2, r3, #1
 8024528:	6022      	str	r2, [r4, #0]
 802452a:	701e      	strb	r6, [r3, #0]
 802452c:	6963      	ldr	r3, [r4, #20]
 802452e:	3001      	adds	r0, #1
 8024530:	4283      	cmp	r3, r0
 8024532:	d004      	beq.n	802453e <__swbuf_r+0x62>
 8024534:	89a3      	ldrh	r3, [r4, #12]
 8024536:	07db      	lsls	r3, r3, #31
 8024538:	d519      	bpl.n	802456e <__swbuf_r+0x92>
 802453a:	2e0a      	cmp	r6, #10
 802453c:	d117      	bne.n	802456e <__swbuf_r+0x92>
 802453e:	4621      	mov	r1, r4
 8024540:	4628      	mov	r0, r5
 8024542:	f000 f933 	bl	80247ac <_fflush_r>
 8024546:	b190      	cbz	r0, 802456e <__swbuf_r+0x92>
 8024548:	e00f      	b.n	802456a <__swbuf_r+0x8e>
 802454a:	4b0b      	ldr	r3, [pc, #44]	; (8024578 <__swbuf_r+0x9c>)
 802454c:	429c      	cmp	r4, r3
 802454e:	d101      	bne.n	8024554 <__swbuf_r+0x78>
 8024550:	68ac      	ldr	r4, [r5, #8]
 8024552:	e7d0      	b.n	80244f6 <__swbuf_r+0x1a>
 8024554:	4b09      	ldr	r3, [pc, #36]	; (802457c <__swbuf_r+0xa0>)
 8024556:	429c      	cmp	r4, r3
 8024558:	bf08      	it	eq
 802455a:	68ec      	ldreq	r4, [r5, #12]
 802455c:	e7cb      	b.n	80244f6 <__swbuf_r+0x1a>
 802455e:	4621      	mov	r1, r4
 8024560:	4628      	mov	r0, r5
 8024562:	f000 f81f 	bl	80245a4 <__swsetup_r>
 8024566:	2800      	cmp	r0, #0
 8024568:	d0cc      	beq.n	8024504 <__swbuf_r+0x28>
 802456a:	f04f 37ff 	mov.w	r7, #4294967295
 802456e:	4638      	mov	r0, r7
 8024570:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8024572:	bf00      	nop
 8024574:	08024a70 	.word	0x08024a70
 8024578:	08024a90 	.word	0x08024a90
 802457c:	08024a50 	.word	0x08024a50

08024580 <_write_r>:
 8024580:	b538      	push	{r3, r4, r5, lr}
 8024582:	4c07      	ldr	r4, [pc, #28]	; (80245a0 <_write_r+0x20>)
 8024584:	4605      	mov	r5, r0
 8024586:	4608      	mov	r0, r1
 8024588:	4611      	mov	r1, r2
 802458a:	2200      	movs	r2, #0
 802458c:	6022      	str	r2, [r4, #0]
 802458e:	461a      	mov	r2, r3
 8024590:	f7fc fdd1 	bl	8021136 <_write>
 8024594:	1c43      	adds	r3, r0, #1
 8024596:	d102      	bne.n	802459e <_write_r+0x1e>
 8024598:	6823      	ldr	r3, [r4, #0]
 802459a:	b103      	cbz	r3, 802459e <_write_r+0x1e>
 802459c:	602b      	str	r3, [r5, #0]
 802459e:	bd38      	pop	{r3, r4, r5, pc}
 80245a0:	2000052c 	.word	0x2000052c

080245a4 <__swsetup_r>:
 80245a4:	4b32      	ldr	r3, [pc, #200]	; (8024670 <__swsetup_r+0xcc>)
 80245a6:	b570      	push	{r4, r5, r6, lr}
 80245a8:	681d      	ldr	r5, [r3, #0]
 80245aa:	4606      	mov	r6, r0
 80245ac:	460c      	mov	r4, r1
 80245ae:	b125      	cbz	r5, 80245ba <__swsetup_r+0x16>
 80245b0:	69ab      	ldr	r3, [r5, #24]
 80245b2:	b913      	cbnz	r3, 80245ba <__swsetup_r+0x16>
 80245b4:	4628      	mov	r0, r5
 80245b6:	f7ff fb91 	bl	8023cdc <__sinit>
 80245ba:	4b2e      	ldr	r3, [pc, #184]	; (8024674 <__swsetup_r+0xd0>)
 80245bc:	429c      	cmp	r4, r3
 80245be:	d10f      	bne.n	80245e0 <__swsetup_r+0x3c>
 80245c0:	686c      	ldr	r4, [r5, #4]
 80245c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80245c6:	b29a      	uxth	r2, r3
 80245c8:	0715      	lsls	r5, r2, #28
 80245ca:	d42c      	bmi.n	8024626 <__swsetup_r+0x82>
 80245cc:	06d0      	lsls	r0, r2, #27
 80245ce:	d411      	bmi.n	80245f4 <__swsetup_r+0x50>
 80245d0:	2209      	movs	r2, #9
 80245d2:	6032      	str	r2, [r6, #0]
 80245d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80245d8:	81a3      	strh	r3, [r4, #12]
 80245da:	f04f 30ff 	mov.w	r0, #4294967295
 80245de:	e03e      	b.n	802465e <__swsetup_r+0xba>
 80245e0:	4b25      	ldr	r3, [pc, #148]	; (8024678 <__swsetup_r+0xd4>)
 80245e2:	429c      	cmp	r4, r3
 80245e4:	d101      	bne.n	80245ea <__swsetup_r+0x46>
 80245e6:	68ac      	ldr	r4, [r5, #8]
 80245e8:	e7eb      	b.n	80245c2 <__swsetup_r+0x1e>
 80245ea:	4b24      	ldr	r3, [pc, #144]	; (802467c <__swsetup_r+0xd8>)
 80245ec:	429c      	cmp	r4, r3
 80245ee:	bf08      	it	eq
 80245f0:	68ec      	ldreq	r4, [r5, #12]
 80245f2:	e7e6      	b.n	80245c2 <__swsetup_r+0x1e>
 80245f4:	0751      	lsls	r1, r2, #29
 80245f6:	d512      	bpl.n	802461e <__swsetup_r+0x7a>
 80245f8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80245fa:	b141      	cbz	r1, 802460e <__swsetup_r+0x6a>
 80245fc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8024600:	4299      	cmp	r1, r3
 8024602:	d002      	beq.n	802460a <__swsetup_r+0x66>
 8024604:	4630      	mov	r0, r6
 8024606:	f000 f973 	bl	80248f0 <_free_r>
 802460a:	2300      	movs	r3, #0
 802460c:	6363      	str	r3, [r4, #52]	; 0x34
 802460e:	89a3      	ldrh	r3, [r4, #12]
 8024610:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8024614:	81a3      	strh	r3, [r4, #12]
 8024616:	2300      	movs	r3, #0
 8024618:	6063      	str	r3, [r4, #4]
 802461a:	6923      	ldr	r3, [r4, #16]
 802461c:	6023      	str	r3, [r4, #0]
 802461e:	89a3      	ldrh	r3, [r4, #12]
 8024620:	f043 0308 	orr.w	r3, r3, #8
 8024624:	81a3      	strh	r3, [r4, #12]
 8024626:	6923      	ldr	r3, [r4, #16]
 8024628:	b94b      	cbnz	r3, 802463e <__swsetup_r+0x9a>
 802462a:	89a3      	ldrh	r3, [r4, #12]
 802462c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8024630:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8024634:	d003      	beq.n	802463e <__swsetup_r+0x9a>
 8024636:	4621      	mov	r1, r4
 8024638:	4630      	mov	r0, r6
 802463a:	f000 f917 	bl	802486c <__smakebuf_r>
 802463e:	89a2      	ldrh	r2, [r4, #12]
 8024640:	f012 0301 	ands.w	r3, r2, #1
 8024644:	d00c      	beq.n	8024660 <__swsetup_r+0xbc>
 8024646:	2300      	movs	r3, #0
 8024648:	60a3      	str	r3, [r4, #8]
 802464a:	6963      	ldr	r3, [r4, #20]
 802464c:	425b      	negs	r3, r3
 802464e:	61a3      	str	r3, [r4, #24]
 8024650:	6923      	ldr	r3, [r4, #16]
 8024652:	b953      	cbnz	r3, 802466a <__swsetup_r+0xc6>
 8024654:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8024658:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 802465c:	d1ba      	bne.n	80245d4 <__swsetup_r+0x30>
 802465e:	bd70      	pop	{r4, r5, r6, pc}
 8024660:	0792      	lsls	r2, r2, #30
 8024662:	bf58      	it	pl
 8024664:	6963      	ldrpl	r3, [r4, #20]
 8024666:	60a3      	str	r3, [r4, #8]
 8024668:	e7f2      	b.n	8024650 <__swsetup_r+0xac>
 802466a:	2000      	movs	r0, #0
 802466c:	e7f7      	b.n	802465e <__swsetup_r+0xba>
 802466e:	bf00      	nop
 8024670:	2000000c 	.word	0x2000000c
 8024674:	08024a70 	.word	0x08024a70
 8024678:	08024a90 	.word	0x08024a90
 802467c:	08024a50 	.word	0x08024a50

08024680 <_close_r>:
 8024680:	b538      	push	{r3, r4, r5, lr}
 8024682:	4c06      	ldr	r4, [pc, #24]	; (802469c <_close_r+0x1c>)
 8024684:	2300      	movs	r3, #0
 8024686:	4605      	mov	r5, r0
 8024688:	4608      	mov	r0, r1
 802468a:	6023      	str	r3, [r4, #0]
 802468c:	f7fc fd6f 	bl	802116e <_close>
 8024690:	1c43      	adds	r3, r0, #1
 8024692:	d102      	bne.n	802469a <_close_r+0x1a>
 8024694:	6823      	ldr	r3, [r4, #0]
 8024696:	b103      	cbz	r3, 802469a <_close_r+0x1a>
 8024698:	602b      	str	r3, [r5, #0]
 802469a:	bd38      	pop	{r3, r4, r5, pc}
 802469c:	2000052c 	.word	0x2000052c

080246a0 <__sflush_r>:
 80246a0:	898a      	ldrh	r2, [r1, #12]
 80246a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80246a6:	4605      	mov	r5, r0
 80246a8:	0710      	lsls	r0, r2, #28
 80246aa:	460c      	mov	r4, r1
 80246ac:	d458      	bmi.n	8024760 <__sflush_r+0xc0>
 80246ae:	684b      	ldr	r3, [r1, #4]
 80246b0:	2b00      	cmp	r3, #0
 80246b2:	dc05      	bgt.n	80246c0 <__sflush_r+0x20>
 80246b4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80246b6:	2b00      	cmp	r3, #0
 80246b8:	dc02      	bgt.n	80246c0 <__sflush_r+0x20>
 80246ba:	2000      	movs	r0, #0
 80246bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80246c0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80246c2:	2e00      	cmp	r6, #0
 80246c4:	d0f9      	beq.n	80246ba <__sflush_r+0x1a>
 80246c6:	2300      	movs	r3, #0
 80246c8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80246cc:	682f      	ldr	r7, [r5, #0]
 80246ce:	6a21      	ldr	r1, [r4, #32]
 80246d0:	602b      	str	r3, [r5, #0]
 80246d2:	d032      	beq.n	802473a <__sflush_r+0x9a>
 80246d4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80246d6:	89a3      	ldrh	r3, [r4, #12]
 80246d8:	075a      	lsls	r2, r3, #29
 80246da:	d505      	bpl.n	80246e8 <__sflush_r+0x48>
 80246dc:	6863      	ldr	r3, [r4, #4]
 80246de:	1ac0      	subs	r0, r0, r3
 80246e0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80246e2:	b10b      	cbz	r3, 80246e8 <__sflush_r+0x48>
 80246e4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80246e6:	1ac0      	subs	r0, r0, r3
 80246e8:	2300      	movs	r3, #0
 80246ea:	4602      	mov	r2, r0
 80246ec:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80246ee:	6a21      	ldr	r1, [r4, #32]
 80246f0:	4628      	mov	r0, r5
 80246f2:	47b0      	blx	r6
 80246f4:	1c43      	adds	r3, r0, #1
 80246f6:	89a3      	ldrh	r3, [r4, #12]
 80246f8:	d106      	bne.n	8024708 <__sflush_r+0x68>
 80246fa:	6829      	ldr	r1, [r5, #0]
 80246fc:	291d      	cmp	r1, #29
 80246fe:	d848      	bhi.n	8024792 <__sflush_r+0xf2>
 8024700:	4a29      	ldr	r2, [pc, #164]	; (80247a8 <__sflush_r+0x108>)
 8024702:	40ca      	lsrs	r2, r1
 8024704:	07d6      	lsls	r6, r2, #31
 8024706:	d544      	bpl.n	8024792 <__sflush_r+0xf2>
 8024708:	2200      	movs	r2, #0
 802470a:	6062      	str	r2, [r4, #4]
 802470c:	04d9      	lsls	r1, r3, #19
 802470e:	6922      	ldr	r2, [r4, #16]
 8024710:	6022      	str	r2, [r4, #0]
 8024712:	d504      	bpl.n	802471e <__sflush_r+0x7e>
 8024714:	1c42      	adds	r2, r0, #1
 8024716:	d101      	bne.n	802471c <__sflush_r+0x7c>
 8024718:	682b      	ldr	r3, [r5, #0]
 802471a:	b903      	cbnz	r3, 802471e <__sflush_r+0x7e>
 802471c:	6560      	str	r0, [r4, #84]	; 0x54
 802471e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8024720:	602f      	str	r7, [r5, #0]
 8024722:	2900      	cmp	r1, #0
 8024724:	d0c9      	beq.n	80246ba <__sflush_r+0x1a>
 8024726:	f104 0344 	add.w	r3, r4, #68	; 0x44
 802472a:	4299      	cmp	r1, r3
 802472c:	d002      	beq.n	8024734 <__sflush_r+0x94>
 802472e:	4628      	mov	r0, r5
 8024730:	f000 f8de 	bl	80248f0 <_free_r>
 8024734:	2000      	movs	r0, #0
 8024736:	6360      	str	r0, [r4, #52]	; 0x34
 8024738:	e7c0      	b.n	80246bc <__sflush_r+0x1c>
 802473a:	2301      	movs	r3, #1
 802473c:	4628      	mov	r0, r5
 802473e:	47b0      	blx	r6
 8024740:	1c41      	adds	r1, r0, #1
 8024742:	d1c8      	bne.n	80246d6 <__sflush_r+0x36>
 8024744:	682b      	ldr	r3, [r5, #0]
 8024746:	2b00      	cmp	r3, #0
 8024748:	d0c5      	beq.n	80246d6 <__sflush_r+0x36>
 802474a:	2b1d      	cmp	r3, #29
 802474c:	d001      	beq.n	8024752 <__sflush_r+0xb2>
 802474e:	2b16      	cmp	r3, #22
 8024750:	d101      	bne.n	8024756 <__sflush_r+0xb6>
 8024752:	602f      	str	r7, [r5, #0]
 8024754:	e7b1      	b.n	80246ba <__sflush_r+0x1a>
 8024756:	89a3      	ldrh	r3, [r4, #12]
 8024758:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802475c:	81a3      	strh	r3, [r4, #12]
 802475e:	e7ad      	b.n	80246bc <__sflush_r+0x1c>
 8024760:	690f      	ldr	r7, [r1, #16]
 8024762:	2f00      	cmp	r7, #0
 8024764:	d0a9      	beq.n	80246ba <__sflush_r+0x1a>
 8024766:	0793      	lsls	r3, r2, #30
 8024768:	680e      	ldr	r6, [r1, #0]
 802476a:	bf08      	it	eq
 802476c:	694b      	ldreq	r3, [r1, #20]
 802476e:	600f      	str	r7, [r1, #0]
 8024770:	bf18      	it	ne
 8024772:	2300      	movne	r3, #0
 8024774:	eba6 0807 	sub.w	r8, r6, r7
 8024778:	608b      	str	r3, [r1, #8]
 802477a:	f1b8 0f00 	cmp.w	r8, #0
 802477e:	dd9c      	ble.n	80246ba <__sflush_r+0x1a>
 8024780:	4643      	mov	r3, r8
 8024782:	463a      	mov	r2, r7
 8024784:	6a21      	ldr	r1, [r4, #32]
 8024786:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8024788:	4628      	mov	r0, r5
 802478a:	47b0      	blx	r6
 802478c:	2800      	cmp	r0, #0
 802478e:	dc06      	bgt.n	802479e <__sflush_r+0xfe>
 8024790:	89a3      	ldrh	r3, [r4, #12]
 8024792:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8024796:	81a3      	strh	r3, [r4, #12]
 8024798:	f04f 30ff 	mov.w	r0, #4294967295
 802479c:	e78e      	b.n	80246bc <__sflush_r+0x1c>
 802479e:	4407      	add	r7, r0
 80247a0:	eba8 0800 	sub.w	r8, r8, r0
 80247a4:	e7e9      	b.n	802477a <__sflush_r+0xda>
 80247a6:	bf00      	nop
 80247a8:	20400001 	.word	0x20400001

080247ac <_fflush_r>:
 80247ac:	b538      	push	{r3, r4, r5, lr}
 80247ae:	690b      	ldr	r3, [r1, #16]
 80247b0:	4605      	mov	r5, r0
 80247b2:	460c      	mov	r4, r1
 80247b4:	b1db      	cbz	r3, 80247ee <_fflush_r+0x42>
 80247b6:	b118      	cbz	r0, 80247c0 <_fflush_r+0x14>
 80247b8:	6983      	ldr	r3, [r0, #24]
 80247ba:	b90b      	cbnz	r3, 80247c0 <_fflush_r+0x14>
 80247bc:	f7ff fa8e 	bl	8023cdc <__sinit>
 80247c0:	4b0c      	ldr	r3, [pc, #48]	; (80247f4 <_fflush_r+0x48>)
 80247c2:	429c      	cmp	r4, r3
 80247c4:	d109      	bne.n	80247da <_fflush_r+0x2e>
 80247c6:	686c      	ldr	r4, [r5, #4]
 80247c8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80247cc:	b17b      	cbz	r3, 80247ee <_fflush_r+0x42>
 80247ce:	4621      	mov	r1, r4
 80247d0:	4628      	mov	r0, r5
 80247d2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80247d6:	f7ff bf63 	b.w	80246a0 <__sflush_r>
 80247da:	4b07      	ldr	r3, [pc, #28]	; (80247f8 <_fflush_r+0x4c>)
 80247dc:	429c      	cmp	r4, r3
 80247de:	d101      	bne.n	80247e4 <_fflush_r+0x38>
 80247e0:	68ac      	ldr	r4, [r5, #8]
 80247e2:	e7f1      	b.n	80247c8 <_fflush_r+0x1c>
 80247e4:	4b05      	ldr	r3, [pc, #20]	; (80247fc <_fflush_r+0x50>)
 80247e6:	429c      	cmp	r4, r3
 80247e8:	bf08      	it	eq
 80247ea:	68ec      	ldreq	r4, [r5, #12]
 80247ec:	e7ec      	b.n	80247c8 <_fflush_r+0x1c>
 80247ee:	2000      	movs	r0, #0
 80247f0:	bd38      	pop	{r3, r4, r5, pc}
 80247f2:	bf00      	nop
 80247f4:	08024a70 	.word	0x08024a70
 80247f8:	08024a90 	.word	0x08024a90
 80247fc:	08024a50 	.word	0x08024a50

08024800 <_lseek_r>:
 8024800:	b538      	push	{r3, r4, r5, lr}
 8024802:	4c07      	ldr	r4, [pc, #28]	; (8024820 <_lseek_r+0x20>)
 8024804:	4605      	mov	r5, r0
 8024806:	4608      	mov	r0, r1
 8024808:	4611      	mov	r1, r2
 802480a:	2200      	movs	r2, #0
 802480c:	6022      	str	r2, [r4, #0]
 802480e:	461a      	mov	r2, r3
 8024810:	f7fc fcd4 	bl	80211bc <_lseek>
 8024814:	1c43      	adds	r3, r0, #1
 8024816:	d102      	bne.n	802481e <_lseek_r+0x1e>
 8024818:	6823      	ldr	r3, [r4, #0]
 802481a:	b103      	cbz	r3, 802481e <_lseek_r+0x1e>
 802481c:	602b      	str	r3, [r5, #0]
 802481e:	bd38      	pop	{r3, r4, r5, pc}
 8024820:	2000052c 	.word	0x2000052c

08024824 <__swhatbuf_r>:
 8024824:	b570      	push	{r4, r5, r6, lr}
 8024826:	460e      	mov	r6, r1
 8024828:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802482c:	2900      	cmp	r1, #0
 802482e:	b096      	sub	sp, #88	; 0x58
 8024830:	4614      	mov	r4, r2
 8024832:	461d      	mov	r5, r3
 8024834:	da07      	bge.n	8024846 <__swhatbuf_r+0x22>
 8024836:	2300      	movs	r3, #0
 8024838:	602b      	str	r3, [r5, #0]
 802483a:	89b3      	ldrh	r3, [r6, #12]
 802483c:	061a      	lsls	r2, r3, #24
 802483e:	d410      	bmi.n	8024862 <__swhatbuf_r+0x3e>
 8024840:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8024844:	e00e      	b.n	8024864 <__swhatbuf_r+0x40>
 8024846:	466a      	mov	r2, sp
 8024848:	f000 f8b2 	bl	80249b0 <_fstat_r>
 802484c:	2800      	cmp	r0, #0
 802484e:	dbf2      	blt.n	8024836 <__swhatbuf_r+0x12>
 8024850:	9a01      	ldr	r2, [sp, #4]
 8024852:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8024856:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 802485a:	425a      	negs	r2, r3
 802485c:	415a      	adcs	r2, r3
 802485e:	602a      	str	r2, [r5, #0]
 8024860:	e7ee      	b.n	8024840 <__swhatbuf_r+0x1c>
 8024862:	2340      	movs	r3, #64	; 0x40
 8024864:	2000      	movs	r0, #0
 8024866:	6023      	str	r3, [r4, #0]
 8024868:	b016      	add	sp, #88	; 0x58
 802486a:	bd70      	pop	{r4, r5, r6, pc}

0802486c <__smakebuf_r>:
 802486c:	898b      	ldrh	r3, [r1, #12]
 802486e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8024870:	079d      	lsls	r5, r3, #30
 8024872:	4606      	mov	r6, r0
 8024874:	460c      	mov	r4, r1
 8024876:	d507      	bpl.n	8024888 <__smakebuf_r+0x1c>
 8024878:	f104 0347 	add.w	r3, r4, #71	; 0x47
 802487c:	6023      	str	r3, [r4, #0]
 802487e:	6123      	str	r3, [r4, #16]
 8024880:	2301      	movs	r3, #1
 8024882:	6163      	str	r3, [r4, #20]
 8024884:	b002      	add	sp, #8
 8024886:	bd70      	pop	{r4, r5, r6, pc}
 8024888:	ab01      	add	r3, sp, #4
 802488a:	466a      	mov	r2, sp
 802488c:	f7ff ffca 	bl	8024824 <__swhatbuf_r>
 8024890:	9900      	ldr	r1, [sp, #0]
 8024892:	4605      	mov	r5, r0
 8024894:	4630      	mov	r0, r6
 8024896:	f7ff faab 	bl	8023df0 <_malloc_r>
 802489a:	b948      	cbnz	r0, 80248b0 <__smakebuf_r+0x44>
 802489c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80248a0:	059a      	lsls	r2, r3, #22
 80248a2:	d4ef      	bmi.n	8024884 <__smakebuf_r+0x18>
 80248a4:	f023 0303 	bic.w	r3, r3, #3
 80248a8:	f043 0302 	orr.w	r3, r3, #2
 80248ac:	81a3      	strh	r3, [r4, #12]
 80248ae:	e7e3      	b.n	8024878 <__smakebuf_r+0xc>
 80248b0:	4b0d      	ldr	r3, [pc, #52]	; (80248e8 <__smakebuf_r+0x7c>)
 80248b2:	62b3      	str	r3, [r6, #40]	; 0x28
 80248b4:	89a3      	ldrh	r3, [r4, #12]
 80248b6:	6020      	str	r0, [r4, #0]
 80248b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80248bc:	81a3      	strh	r3, [r4, #12]
 80248be:	9b00      	ldr	r3, [sp, #0]
 80248c0:	6163      	str	r3, [r4, #20]
 80248c2:	9b01      	ldr	r3, [sp, #4]
 80248c4:	6120      	str	r0, [r4, #16]
 80248c6:	b15b      	cbz	r3, 80248e0 <__smakebuf_r+0x74>
 80248c8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80248cc:	4630      	mov	r0, r6
 80248ce:	f000 f881 	bl	80249d4 <_isatty_r>
 80248d2:	b128      	cbz	r0, 80248e0 <__smakebuf_r+0x74>
 80248d4:	89a3      	ldrh	r3, [r4, #12]
 80248d6:	f023 0303 	bic.w	r3, r3, #3
 80248da:	f043 0301 	orr.w	r3, r3, #1
 80248de:	81a3      	strh	r3, [r4, #12]
 80248e0:	89a3      	ldrh	r3, [r4, #12]
 80248e2:	431d      	orrs	r5, r3
 80248e4:	81a5      	strh	r5, [r4, #12]
 80248e6:	e7cd      	b.n	8024884 <__smakebuf_r+0x18>
 80248e8:	08023ca5 	.word	0x08023ca5

080248ec <__malloc_lock>:
 80248ec:	4770      	bx	lr

080248ee <__malloc_unlock>:
 80248ee:	4770      	bx	lr

080248f0 <_free_r>:
 80248f0:	b538      	push	{r3, r4, r5, lr}
 80248f2:	4605      	mov	r5, r0
 80248f4:	2900      	cmp	r1, #0
 80248f6:	d045      	beq.n	8024984 <_free_r+0x94>
 80248f8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80248fc:	1f0c      	subs	r4, r1, #4
 80248fe:	2b00      	cmp	r3, #0
 8024900:	bfb8      	it	lt
 8024902:	18e4      	addlt	r4, r4, r3
 8024904:	f7ff fff2 	bl	80248ec <__malloc_lock>
 8024908:	4a1f      	ldr	r2, [pc, #124]	; (8024988 <_free_r+0x98>)
 802490a:	6813      	ldr	r3, [r2, #0]
 802490c:	4610      	mov	r0, r2
 802490e:	b933      	cbnz	r3, 802491e <_free_r+0x2e>
 8024910:	6063      	str	r3, [r4, #4]
 8024912:	6014      	str	r4, [r2, #0]
 8024914:	4628      	mov	r0, r5
 8024916:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 802491a:	f7ff bfe8 	b.w	80248ee <__malloc_unlock>
 802491e:	42a3      	cmp	r3, r4
 8024920:	d90c      	bls.n	802493c <_free_r+0x4c>
 8024922:	6821      	ldr	r1, [r4, #0]
 8024924:	1862      	adds	r2, r4, r1
 8024926:	4293      	cmp	r3, r2
 8024928:	bf04      	itt	eq
 802492a:	681a      	ldreq	r2, [r3, #0]
 802492c:	685b      	ldreq	r3, [r3, #4]
 802492e:	6063      	str	r3, [r4, #4]
 8024930:	bf04      	itt	eq
 8024932:	1852      	addeq	r2, r2, r1
 8024934:	6022      	streq	r2, [r4, #0]
 8024936:	6004      	str	r4, [r0, #0]
 8024938:	e7ec      	b.n	8024914 <_free_r+0x24>
 802493a:	4613      	mov	r3, r2
 802493c:	685a      	ldr	r2, [r3, #4]
 802493e:	b10a      	cbz	r2, 8024944 <_free_r+0x54>
 8024940:	42a2      	cmp	r2, r4
 8024942:	d9fa      	bls.n	802493a <_free_r+0x4a>
 8024944:	6819      	ldr	r1, [r3, #0]
 8024946:	1858      	adds	r0, r3, r1
 8024948:	42a0      	cmp	r0, r4
 802494a:	d10b      	bne.n	8024964 <_free_r+0x74>
 802494c:	6820      	ldr	r0, [r4, #0]
 802494e:	4401      	add	r1, r0
 8024950:	1858      	adds	r0, r3, r1
 8024952:	4282      	cmp	r2, r0
 8024954:	6019      	str	r1, [r3, #0]
 8024956:	d1dd      	bne.n	8024914 <_free_r+0x24>
 8024958:	6810      	ldr	r0, [r2, #0]
 802495a:	6852      	ldr	r2, [r2, #4]
 802495c:	605a      	str	r2, [r3, #4]
 802495e:	4401      	add	r1, r0
 8024960:	6019      	str	r1, [r3, #0]
 8024962:	e7d7      	b.n	8024914 <_free_r+0x24>
 8024964:	d902      	bls.n	802496c <_free_r+0x7c>
 8024966:	230c      	movs	r3, #12
 8024968:	602b      	str	r3, [r5, #0]
 802496a:	e7d3      	b.n	8024914 <_free_r+0x24>
 802496c:	6820      	ldr	r0, [r4, #0]
 802496e:	1821      	adds	r1, r4, r0
 8024970:	428a      	cmp	r2, r1
 8024972:	bf04      	itt	eq
 8024974:	6811      	ldreq	r1, [r2, #0]
 8024976:	6852      	ldreq	r2, [r2, #4]
 8024978:	6062      	str	r2, [r4, #4]
 802497a:	bf04      	itt	eq
 802497c:	1809      	addeq	r1, r1, r0
 802497e:	6021      	streq	r1, [r4, #0]
 8024980:	605c      	str	r4, [r3, #4]
 8024982:	e7c7      	b.n	8024914 <_free_r+0x24>
 8024984:	bd38      	pop	{r3, r4, r5, pc}
 8024986:	bf00      	nop
 8024988:	20000090 	.word	0x20000090

0802498c <_read_r>:
 802498c:	b538      	push	{r3, r4, r5, lr}
 802498e:	4c07      	ldr	r4, [pc, #28]	; (80249ac <_read_r+0x20>)
 8024990:	4605      	mov	r5, r0
 8024992:	4608      	mov	r0, r1
 8024994:	4611      	mov	r1, r2
 8024996:	2200      	movs	r2, #0
 8024998:	6022      	str	r2, [r4, #0]
 802499a:	461a      	mov	r2, r3
 802499c:	f7fc fbae 	bl	80210fc <_read>
 80249a0:	1c43      	adds	r3, r0, #1
 80249a2:	d102      	bne.n	80249aa <_read_r+0x1e>
 80249a4:	6823      	ldr	r3, [r4, #0]
 80249a6:	b103      	cbz	r3, 80249aa <_read_r+0x1e>
 80249a8:	602b      	str	r3, [r5, #0]
 80249aa:	bd38      	pop	{r3, r4, r5, pc}
 80249ac:	2000052c 	.word	0x2000052c

080249b0 <_fstat_r>:
 80249b0:	b538      	push	{r3, r4, r5, lr}
 80249b2:	4c07      	ldr	r4, [pc, #28]	; (80249d0 <_fstat_r+0x20>)
 80249b4:	2300      	movs	r3, #0
 80249b6:	4605      	mov	r5, r0
 80249b8:	4608      	mov	r0, r1
 80249ba:	4611      	mov	r1, r2
 80249bc:	6023      	str	r3, [r4, #0]
 80249be:	f7fc fbe2 	bl	8021186 <_fstat>
 80249c2:	1c43      	adds	r3, r0, #1
 80249c4:	d102      	bne.n	80249cc <_fstat_r+0x1c>
 80249c6:	6823      	ldr	r3, [r4, #0]
 80249c8:	b103      	cbz	r3, 80249cc <_fstat_r+0x1c>
 80249ca:	602b      	str	r3, [r5, #0]
 80249cc:	bd38      	pop	{r3, r4, r5, pc}
 80249ce:	bf00      	nop
 80249d0:	2000052c 	.word	0x2000052c

080249d4 <_isatty_r>:
 80249d4:	b538      	push	{r3, r4, r5, lr}
 80249d6:	4c06      	ldr	r4, [pc, #24]	; (80249f0 <_isatty_r+0x1c>)
 80249d8:	2300      	movs	r3, #0
 80249da:	4605      	mov	r5, r0
 80249dc:	4608      	mov	r0, r1
 80249de:	6023      	str	r3, [r4, #0]
 80249e0:	f7fc fbe1 	bl	80211a6 <_isatty>
 80249e4:	1c43      	adds	r3, r0, #1
 80249e6:	d102      	bne.n	80249ee <_isatty_r+0x1a>
 80249e8:	6823      	ldr	r3, [r4, #0]
 80249ea:	b103      	cbz	r3, 80249ee <_isatty_r+0x1a>
 80249ec:	602b      	str	r3, [r5, #0]
 80249ee:	bd38      	pop	{r3, r4, r5, pc}
 80249f0:	2000052c 	.word	0x2000052c

080249f4 <_init>:
 80249f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80249f6:	bf00      	nop
 80249f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80249fa:	bc08      	pop	{r3}
 80249fc:	469e      	mov	lr, r3
 80249fe:	4770      	bx	lr

08024a00 <_fini>:
 8024a00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8024a02:	bf00      	nop
 8024a04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8024a06:	bc08      	pop	{r3}
 8024a08:	469e      	mov	lr, r3
 8024a0a:	4770      	bx	lr
