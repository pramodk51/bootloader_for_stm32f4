
app2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .fw_header    0000000c  080a0000  080a0000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  1 .isr_vector   000001ac  080a0400  080a0400  00010400  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00004464  080a05b0  080a05b0  000105b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000000d8  080a4a14  080a4a14  00014a14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM.extab    00000000  080a4aec  080a4aec  00020070  2**0
                  CONTENTS
  5 .ARM          00000008  080a4aec  080a4aec  00014aec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .preinit_array 00000000  080a4af4  080a4af4  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  7 .init_array   00000004  080a4af4  080a4af4  00014af4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .fini_array   00000004  080a4af8  080a4af8  00014af8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .data         00000070  20000000  080a4afc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          000004c0  20000070  080a4b6c  00020070  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000530  080a4b6c  00020530  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000ce4d  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_abbrev 00001d20  00000000  00000000  0002ceed  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00000ad0  00000000  00000000  0002ec10  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000009e8  00000000  00000000  0002f6e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  00024c75  00000000  00000000  000300c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   00008b16  00000000  00000000  00054d3d  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    000dc785  00000000  00000000  0005d853  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  00139fd8  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000033a8  00000000  00000000  0013a054  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080a05b0 <__do_global_dtors_aux>:
 80a05b0:	b510      	push	{r4, lr}
 80a05b2:	4c05      	ldr	r4, [pc, #20]	; (80a05c8 <__do_global_dtors_aux+0x18>)
 80a05b4:	7823      	ldrb	r3, [r4, #0]
 80a05b6:	b933      	cbnz	r3, 80a05c6 <__do_global_dtors_aux+0x16>
 80a05b8:	4b04      	ldr	r3, [pc, #16]	; (80a05cc <__do_global_dtors_aux+0x1c>)
 80a05ba:	b113      	cbz	r3, 80a05c2 <__do_global_dtors_aux+0x12>
 80a05bc:	4804      	ldr	r0, [pc, #16]	; (80a05d0 <__do_global_dtors_aux+0x20>)
 80a05be:	f3af 8000 	nop.w
 80a05c2:	2301      	movs	r3, #1
 80a05c4:	7023      	strb	r3, [r4, #0]
 80a05c6:	bd10      	pop	{r4, pc}
 80a05c8:	20000070 	.word	0x20000070
 80a05cc:	00000000 	.word	0x00000000
 80a05d0:	080a49fc 	.word	0x080a49fc

080a05d4 <frame_dummy>:
 80a05d4:	b508      	push	{r3, lr}
 80a05d6:	4b03      	ldr	r3, [pc, #12]	; (80a05e4 <frame_dummy+0x10>)
 80a05d8:	b11b      	cbz	r3, 80a05e2 <frame_dummy+0xe>
 80a05da:	4903      	ldr	r1, [pc, #12]	; (80a05e8 <frame_dummy+0x14>)
 80a05dc:	4803      	ldr	r0, [pc, #12]	; (80a05ec <frame_dummy+0x18>)
 80a05de:	f3af 8000 	nop.w
 80a05e2:	bd08      	pop	{r3, pc}
 80a05e4:	00000000 	.word	0x00000000
 80a05e8:	20000074 	.word	0x20000074
 80a05ec:	080a49fc 	.word	0x080a49fc

080a05f0 <memchr>:
 80a05f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80a05f4:	2a10      	cmp	r2, #16
 80a05f6:	db2b      	blt.n	80a0650 <memchr+0x60>
 80a05f8:	f010 0f07 	tst.w	r0, #7
 80a05fc:	d008      	beq.n	80a0610 <memchr+0x20>
 80a05fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 80a0602:	3a01      	subs	r2, #1
 80a0604:	428b      	cmp	r3, r1
 80a0606:	d02d      	beq.n	80a0664 <memchr+0x74>
 80a0608:	f010 0f07 	tst.w	r0, #7
 80a060c:	b342      	cbz	r2, 80a0660 <memchr+0x70>
 80a060e:	d1f6      	bne.n	80a05fe <memchr+0xe>
 80a0610:	b4f0      	push	{r4, r5, r6, r7}
 80a0612:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80a0616:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80a061a:	f022 0407 	bic.w	r4, r2, #7
 80a061e:	f07f 0700 	mvns.w	r7, #0
 80a0622:	2300      	movs	r3, #0
 80a0624:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80a0628:	3c08      	subs	r4, #8
 80a062a:	ea85 0501 	eor.w	r5, r5, r1
 80a062e:	ea86 0601 	eor.w	r6, r6, r1
 80a0632:	fa85 f547 	uadd8	r5, r5, r7
 80a0636:	faa3 f587 	sel	r5, r3, r7
 80a063a:	fa86 f647 	uadd8	r6, r6, r7
 80a063e:	faa5 f687 	sel	r6, r5, r7
 80a0642:	b98e      	cbnz	r6, 80a0668 <memchr+0x78>
 80a0644:	d1ee      	bne.n	80a0624 <memchr+0x34>
 80a0646:	bcf0      	pop	{r4, r5, r6, r7}
 80a0648:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80a064c:	f002 0207 	and.w	r2, r2, #7
 80a0650:	b132      	cbz	r2, 80a0660 <memchr+0x70>
 80a0652:	f810 3b01 	ldrb.w	r3, [r0], #1
 80a0656:	3a01      	subs	r2, #1
 80a0658:	ea83 0301 	eor.w	r3, r3, r1
 80a065c:	b113      	cbz	r3, 80a0664 <memchr+0x74>
 80a065e:	d1f8      	bne.n	80a0652 <memchr+0x62>
 80a0660:	2000      	movs	r0, #0
 80a0662:	4770      	bx	lr
 80a0664:	3801      	subs	r0, #1
 80a0666:	4770      	bx	lr
 80a0668:	2d00      	cmp	r5, #0
 80a066a:	bf06      	itte	eq
 80a066c:	4635      	moveq	r5, r6
 80a066e:	3803      	subeq	r0, #3
 80a0670:	3807      	subne	r0, #7
 80a0672:	f015 0f01 	tst.w	r5, #1
 80a0676:	d107      	bne.n	80a0688 <memchr+0x98>
 80a0678:	3001      	adds	r0, #1
 80a067a:	f415 7f80 	tst.w	r5, #256	; 0x100
 80a067e:	bf02      	ittt	eq
 80a0680:	3001      	addeq	r0, #1
 80a0682:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80a0686:	3001      	addeq	r0, #1
 80a0688:	bcf0      	pop	{r4, r5, r6, r7}
 80a068a:	3801      	subs	r0, #1
 80a068c:	4770      	bx	lr
 80a068e:	bf00      	nop

080a0690 <__aeabi_uldivmod>:
 80a0690:	b953      	cbnz	r3, 80a06a8 <__aeabi_uldivmod+0x18>
 80a0692:	b94a      	cbnz	r2, 80a06a8 <__aeabi_uldivmod+0x18>
 80a0694:	2900      	cmp	r1, #0
 80a0696:	bf08      	it	eq
 80a0698:	2800      	cmpeq	r0, #0
 80a069a:	bf1c      	itt	ne
 80a069c:	f04f 31ff 	movne.w	r1, #4294967295
 80a06a0:	f04f 30ff 	movne.w	r0, #4294967295
 80a06a4:	f000 b972 	b.w	80a098c <__aeabi_idiv0>
 80a06a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80a06ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80a06b0:	f000 f806 	bl	80a06c0 <__udivmoddi4>
 80a06b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80a06b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80a06bc:	b004      	add	sp, #16
 80a06be:	4770      	bx	lr

080a06c0 <__udivmoddi4>:
 80a06c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80a06c4:	9e08      	ldr	r6, [sp, #32]
 80a06c6:	4604      	mov	r4, r0
 80a06c8:	4688      	mov	r8, r1
 80a06ca:	2b00      	cmp	r3, #0
 80a06cc:	d14b      	bne.n	80a0766 <__udivmoddi4+0xa6>
 80a06ce:	428a      	cmp	r2, r1
 80a06d0:	4615      	mov	r5, r2
 80a06d2:	d967      	bls.n	80a07a4 <__udivmoddi4+0xe4>
 80a06d4:	fab2 f282 	clz	r2, r2
 80a06d8:	b14a      	cbz	r2, 80a06ee <__udivmoddi4+0x2e>
 80a06da:	f1c2 0720 	rsb	r7, r2, #32
 80a06de:	fa01 f302 	lsl.w	r3, r1, r2
 80a06e2:	fa20 f707 	lsr.w	r7, r0, r7
 80a06e6:	4095      	lsls	r5, r2
 80a06e8:	ea47 0803 	orr.w	r8, r7, r3
 80a06ec:	4094      	lsls	r4, r2
 80a06ee:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80a06f2:	0c23      	lsrs	r3, r4, #16
 80a06f4:	fbb8 f7fe 	udiv	r7, r8, lr
 80a06f8:	fa1f fc85 	uxth.w	ip, r5
 80a06fc:	fb0e 8817 	mls	r8, lr, r7, r8
 80a0700:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80a0704:	fb07 f10c 	mul.w	r1, r7, ip
 80a0708:	4299      	cmp	r1, r3
 80a070a:	d909      	bls.n	80a0720 <__udivmoddi4+0x60>
 80a070c:	18eb      	adds	r3, r5, r3
 80a070e:	f107 30ff 	add.w	r0, r7, #4294967295
 80a0712:	f080 811b 	bcs.w	80a094c <__udivmoddi4+0x28c>
 80a0716:	4299      	cmp	r1, r3
 80a0718:	f240 8118 	bls.w	80a094c <__udivmoddi4+0x28c>
 80a071c:	3f02      	subs	r7, #2
 80a071e:	442b      	add	r3, r5
 80a0720:	1a5b      	subs	r3, r3, r1
 80a0722:	b2a4      	uxth	r4, r4
 80a0724:	fbb3 f0fe 	udiv	r0, r3, lr
 80a0728:	fb0e 3310 	mls	r3, lr, r0, r3
 80a072c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80a0730:	fb00 fc0c 	mul.w	ip, r0, ip
 80a0734:	45a4      	cmp	ip, r4
 80a0736:	d909      	bls.n	80a074c <__udivmoddi4+0x8c>
 80a0738:	192c      	adds	r4, r5, r4
 80a073a:	f100 33ff 	add.w	r3, r0, #4294967295
 80a073e:	f080 8107 	bcs.w	80a0950 <__udivmoddi4+0x290>
 80a0742:	45a4      	cmp	ip, r4
 80a0744:	f240 8104 	bls.w	80a0950 <__udivmoddi4+0x290>
 80a0748:	3802      	subs	r0, #2
 80a074a:	442c      	add	r4, r5
 80a074c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80a0750:	eba4 040c 	sub.w	r4, r4, ip
 80a0754:	2700      	movs	r7, #0
 80a0756:	b11e      	cbz	r6, 80a0760 <__udivmoddi4+0xa0>
 80a0758:	40d4      	lsrs	r4, r2
 80a075a:	2300      	movs	r3, #0
 80a075c:	e9c6 4300 	strd	r4, r3, [r6]
 80a0760:	4639      	mov	r1, r7
 80a0762:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80a0766:	428b      	cmp	r3, r1
 80a0768:	d909      	bls.n	80a077e <__udivmoddi4+0xbe>
 80a076a:	2e00      	cmp	r6, #0
 80a076c:	f000 80eb 	beq.w	80a0946 <__udivmoddi4+0x286>
 80a0770:	2700      	movs	r7, #0
 80a0772:	e9c6 0100 	strd	r0, r1, [r6]
 80a0776:	4638      	mov	r0, r7
 80a0778:	4639      	mov	r1, r7
 80a077a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80a077e:	fab3 f783 	clz	r7, r3
 80a0782:	2f00      	cmp	r7, #0
 80a0784:	d147      	bne.n	80a0816 <__udivmoddi4+0x156>
 80a0786:	428b      	cmp	r3, r1
 80a0788:	d302      	bcc.n	80a0790 <__udivmoddi4+0xd0>
 80a078a:	4282      	cmp	r2, r0
 80a078c:	f200 80fa 	bhi.w	80a0984 <__udivmoddi4+0x2c4>
 80a0790:	1a84      	subs	r4, r0, r2
 80a0792:	eb61 0303 	sbc.w	r3, r1, r3
 80a0796:	2001      	movs	r0, #1
 80a0798:	4698      	mov	r8, r3
 80a079a:	2e00      	cmp	r6, #0
 80a079c:	d0e0      	beq.n	80a0760 <__udivmoddi4+0xa0>
 80a079e:	e9c6 4800 	strd	r4, r8, [r6]
 80a07a2:	e7dd      	b.n	80a0760 <__udivmoddi4+0xa0>
 80a07a4:	b902      	cbnz	r2, 80a07a8 <__udivmoddi4+0xe8>
 80a07a6:	deff      	udf	#255	; 0xff
 80a07a8:	fab2 f282 	clz	r2, r2
 80a07ac:	2a00      	cmp	r2, #0
 80a07ae:	f040 808f 	bne.w	80a08d0 <__udivmoddi4+0x210>
 80a07b2:	1b49      	subs	r1, r1, r5
 80a07b4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80a07b8:	fa1f f885 	uxth.w	r8, r5
 80a07bc:	2701      	movs	r7, #1
 80a07be:	fbb1 fcfe 	udiv	ip, r1, lr
 80a07c2:	0c23      	lsrs	r3, r4, #16
 80a07c4:	fb0e 111c 	mls	r1, lr, ip, r1
 80a07c8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80a07cc:	fb08 f10c 	mul.w	r1, r8, ip
 80a07d0:	4299      	cmp	r1, r3
 80a07d2:	d907      	bls.n	80a07e4 <__udivmoddi4+0x124>
 80a07d4:	18eb      	adds	r3, r5, r3
 80a07d6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80a07da:	d202      	bcs.n	80a07e2 <__udivmoddi4+0x122>
 80a07dc:	4299      	cmp	r1, r3
 80a07de:	f200 80cd 	bhi.w	80a097c <__udivmoddi4+0x2bc>
 80a07e2:	4684      	mov	ip, r0
 80a07e4:	1a59      	subs	r1, r3, r1
 80a07e6:	b2a3      	uxth	r3, r4
 80a07e8:	fbb1 f0fe 	udiv	r0, r1, lr
 80a07ec:	fb0e 1410 	mls	r4, lr, r0, r1
 80a07f0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80a07f4:	fb08 f800 	mul.w	r8, r8, r0
 80a07f8:	45a0      	cmp	r8, r4
 80a07fa:	d907      	bls.n	80a080c <__udivmoddi4+0x14c>
 80a07fc:	192c      	adds	r4, r5, r4
 80a07fe:	f100 33ff 	add.w	r3, r0, #4294967295
 80a0802:	d202      	bcs.n	80a080a <__udivmoddi4+0x14a>
 80a0804:	45a0      	cmp	r8, r4
 80a0806:	f200 80b6 	bhi.w	80a0976 <__udivmoddi4+0x2b6>
 80a080a:	4618      	mov	r0, r3
 80a080c:	eba4 0408 	sub.w	r4, r4, r8
 80a0810:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80a0814:	e79f      	b.n	80a0756 <__udivmoddi4+0x96>
 80a0816:	f1c7 0c20 	rsb	ip, r7, #32
 80a081a:	40bb      	lsls	r3, r7
 80a081c:	fa22 fe0c 	lsr.w	lr, r2, ip
 80a0820:	ea4e 0e03 	orr.w	lr, lr, r3
 80a0824:	fa01 f407 	lsl.w	r4, r1, r7
 80a0828:	fa20 f50c 	lsr.w	r5, r0, ip
 80a082c:	fa21 f30c 	lsr.w	r3, r1, ip
 80a0830:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80a0834:	4325      	orrs	r5, r4
 80a0836:	fbb3 f9f8 	udiv	r9, r3, r8
 80a083a:	0c2c      	lsrs	r4, r5, #16
 80a083c:	fb08 3319 	mls	r3, r8, r9, r3
 80a0840:	fa1f fa8e 	uxth.w	sl, lr
 80a0844:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80a0848:	fb09 f40a 	mul.w	r4, r9, sl
 80a084c:	429c      	cmp	r4, r3
 80a084e:	fa02 f207 	lsl.w	r2, r2, r7
 80a0852:	fa00 f107 	lsl.w	r1, r0, r7
 80a0856:	d90b      	bls.n	80a0870 <__udivmoddi4+0x1b0>
 80a0858:	eb1e 0303 	adds.w	r3, lr, r3
 80a085c:	f109 30ff 	add.w	r0, r9, #4294967295
 80a0860:	f080 8087 	bcs.w	80a0972 <__udivmoddi4+0x2b2>
 80a0864:	429c      	cmp	r4, r3
 80a0866:	f240 8084 	bls.w	80a0972 <__udivmoddi4+0x2b2>
 80a086a:	f1a9 0902 	sub.w	r9, r9, #2
 80a086e:	4473      	add	r3, lr
 80a0870:	1b1b      	subs	r3, r3, r4
 80a0872:	b2ad      	uxth	r5, r5
 80a0874:	fbb3 f0f8 	udiv	r0, r3, r8
 80a0878:	fb08 3310 	mls	r3, r8, r0, r3
 80a087c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80a0880:	fb00 fa0a 	mul.w	sl, r0, sl
 80a0884:	45a2      	cmp	sl, r4
 80a0886:	d908      	bls.n	80a089a <__udivmoddi4+0x1da>
 80a0888:	eb1e 0404 	adds.w	r4, lr, r4
 80a088c:	f100 33ff 	add.w	r3, r0, #4294967295
 80a0890:	d26b      	bcs.n	80a096a <__udivmoddi4+0x2aa>
 80a0892:	45a2      	cmp	sl, r4
 80a0894:	d969      	bls.n	80a096a <__udivmoddi4+0x2aa>
 80a0896:	3802      	subs	r0, #2
 80a0898:	4474      	add	r4, lr
 80a089a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80a089e:	fba0 8902 	umull	r8, r9, r0, r2
 80a08a2:	eba4 040a 	sub.w	r4, r4, sl
 80a08a6:	454c      	cmp	r4, r9
 80a08a8:	46c2      	mov	sl, r8
 80a08aa:	464b      	mov	r3, r9
 80a08ac:	d354      	bcc.n	80a0958 <__udivmoddi4+0x298>
 80a08ae:	d051      	beq.n	80a0954 <__udivmoddi4+0x294>
 80a08b0:	2e00      	cmp	r6, #0
 80a08b2:	d069      	beq.n	80a0988 <__udivmoddi4+0x2c8>
 80a08b4:	ebb1 050a 	subs.w	r5, r1, sl
 80a08b8:	eb64 0403 	sbc.w	r4, r4, r3
 80a08bc:	fa04 fc0c 	lsl.w	ip, r4, ip
 80a08c0:	40fd      	lsrs	r5, r7
 80a08c2:	40fc      	lsrs	r4, r7
 80a08c4:	ea4c 0505 	orr.w	r5, ip, r5
 80a08c8:	e9c6 5400 	strd	r5, r4, [r6]
 80a08cc:	2700      	movs	r7, #0
 80a08ce:	e747      	b.n	80a0760 <__udivmoddi4+0xa0>
 80a08d0:	f1c2 0320 	rsb	r3, r2, #32
 80a08d4:	fa20 f703 	lsr.w	r7, r0, r3
 80a08d8:	4095      	lsls	r5, r2
 80a08da:	fa01 f002 	lsl.w	r0, r1, r2
 80a08de:	fa21 f303 	lsr.w	r3, r1, r3
 80a08e2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80a08e6:	4338      	orrs	r0, r7
 80a08e8:	0c01      	lsrs	r1, r0, #16
 80a08ea:	fbb3 f7fe 	udiv	r7, r3, lr
 80a08ee:	fa1f f885 	uxth.w	r8, r5
 80a08f2:	fb0e 3317 	mls	r3, lr, r7, r3
 80a08f6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80a08fa:	fb07 f308 	mul.w	r3, r7, r8
 80a08fe:	428b      	cmp	r3, r1
 80a0900:	fa04 f402 	lsl.w	r4, r4, r2
 80a0904:	d907      	bls.n	80a0916 <__udivmoddi4+0x256>
 80a0906:	1869      	adds	r1, r5, r1
 80a0908:	f107 3cff 	add.w	ip, r7, #4294967295
 80a090c:	d22f      	bcs.n	80a096e <__udivmoddi4+0x2ae>
 80a090e:	428b      	cmp	r3, r1
 80a0910:	d92d      	bls.n	80a096e <__udivmoddi4+0x2ae>
 80a0912:	3f02      	subs	r7, #2
 80a0914:	4429      	add	r1, r5
 80a0916:	1acb      	subs	r3, r1, r3
 80a0918:	b281      	uxth	r1, r0
 80a091a:	fbb3 f0fe 	udiv	r0, r3, lr
 80a091e:	fb0e 3310 	mls	r3, lr, r0, r3
 80a0922:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80a0926:	fb00 f308 	mul.w	r3, r0, r8
 80a092a:	428b      	cmp	r3, r1
 80a092c:	d907      	bls.n	80a093e <__udivmoddi4+0x27e>
 80a092e:	1869      	adds	r1, r5, r1
 80a0930:	f100 3cff 	add.w	ip, r0, #4294967295
 80a0934:	d217      	bcs.n	80a0966 <__udivmoddi4+0x2a6>
 80a0936:	428b      	cmp	r3, r1
 80a0938:	d915      	bls.n	80a0966 <__udivmoddi4+0x2a6>
 80a093a:	3802      	subs	r0, #2
 80a093c:	4429      	add	r1, r5
 80a093e:	1ac9      	subs	r1, r1, r3
 80a0940:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80a0944:	e73b      	b.n	80a07be <__udivmoddi4+0xfe>
 80a0946:	4637      	mov	r7, r6
 80a0948:	4630      	mov	r0, r6
 80a094a:	e709      	b.n	80a0760 <__udivmoddi4+0xa0>
 80a094c:	4607      	mov	r7, r0
 80a094e:	e6e7      	b.n	80a0720 <__udivmoddi4+0x60>
 80a0950:	4618      	mov	r0, r3
 80a0952:	e6fb      	b.n	80a074c <__udivmoddi4+0x8c>
 80a0954:	4541      	cmp	r1, r8
 80a0956:	d2ab      	bcs.n	80a08b0 <__udivmoddi4+0x1f0>
 80a0958:	ebb8 0a02 	subs.w	sl, r8, r2
 80a095c:	eb69 020e 	sbc.w	r2, r9, lr
 80a0960:	3801      	subs	r0, #1
 80a0962:	4613      	mov	r3, r2
 80a0964:	e7a4      	b.n	80a08b0 <__udivmoddi4+0x1f0>
 80a0966:	4660      	mov	r0, ip
 80a0968:	e7e9      	b.n	80a093e <__udivmoddi4+0x27e>
 80a096a:	4618      	mov	r0, r3
 80a096c:	e795      	b.n	80a089a <__udivmoddi4+0x1da>
 80a096e:	4667      	mov	r7, ip
 80a0970:	e7d1      	b.n	80a0916 <__udivmoddi4+0x256>
 80a0972:	4681      	mov	r9, r0
 80a0974:	e77c      	b.n	80a0870 <__udivmoddi4+0x1b0>
 80a0976:	3802      	subs	r0, #2
 80a0978:	442c      	add	r4, r5
 80a097a:	e747      	b.n	80a080c <__udivmoddi4+0x14c>
 80a097c:	f1ac 0c02 	sub.w	ip, ip, #2
 80a0980:	442b      	add	r3, r5
 80a0982:	e72f      	b.n	80a07e4 <__udivmoddi4+0x124>
 80a0984:	4638      	mov	r0, r7
 80a0986:	e708      	b.n	80a079a <__udivmoddi4+0xda>
 80a0988:	4637      	mov	r7, r6
 80a098a:	e6e9      	b.n	80a0760 <__udivmoddi4+0xa0>

080a098c <__aeabi_idiv0>:
 80a098c:	4770      	bx	lr
 80a098e:	bf00      	nop

080a0990 <__io_putchar>:
#ifdef __GNUC__
# define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
#else
# define PUTCHAR_PROTOTYPE int fputc(int ch, FILE * f)
# endif
PUTCHAR_PROTOTYPE {
 80a0990:	b580      	push	{r7, lr}
 80a0992:	b082      	sub	sp, #8
 80a0994:	af00      	add	r7, sp, #0
 80a0996:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit( & huart3, (uint8_t * ) & ch, 1, 10);
 80a0998:	1d39      	adds	r1, r7, #4
 80a099a:	230a      	movs	r3, #10
 80a099c:	2201      	movs	r2, #1
 80a099e:	4804      	ldr	r0, [pc, #16]	; (80a09b0 <__io_putchar+0x20>)
 80a09a0:	f002 fa01 	bl	80a2da6 <HAL_UART_Transmit>
  return ch;
 80a09a4:	687b      	ldr	r3, [r7, #4]
}
 80a09a6:	4618      	mov	r0, r3
 80a09a8:	3708      	adds	r7, #8
 80a09aa:	46bd      	mov	sp, r7
 80a09ac:	bd80      	pop	{r7, pc}
 80a09ae:	bf00      	nop
 80a09b0:	20000098 	.word	0x20000098

080a09b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80a09b4:	b580      	push	{r7, lr}
 80a09b6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80a09b8:	f000 fc7e 	bl	80a12b8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80a09bc:	f000 f82c 	bl	80a0a18 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80a09c0:	f000 f92c 	bl	80a0c1c <MX_GPIO_Init>
  MX_ETH_Init();
 80a09c4:	f000 f892 	bl	80a0aec <MX_ETH_Init>
  MX_USART3_UART_Init();
 80a09c8:	f000 f8d0 	bl	80a0b6c <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80a09cc:	f000 f8f8 	bl	80a0bc0 <MX_USB_OTG_FS_PCD_Init>
  /* USER CODE BEGIN 2 */



  printf("App STARTED - version %d - CRC 0x%lx\n",
         image_hdr.image_version,
 80a09d0:	4b0e      	ldr	r3, [pc, #56]	; (80a0a0c <main+0x58>)
 80a09d2:	885b      	ldrh	r3, [r3, #2]
  printf("App STARTED - version %d - CRC 0x%lx\n",
 80a09d4:	4619      	mov	r1, r3
 80a09d6:	4b0d      	ldr	r3, [pc, #52]	; (80a0a0c <main+0x58>)
 80a09d8:	689b      	ldr	r3, [r3, #8]
 80a09da:	461a      	mov	r2, r3
 80a09dc:	480c      	ldr	r0, [pc, #48]	; (80a0a10 <main+0x5c>)
 80a09de:	f003 f929 	bl	80a3c34 <iprintf>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  HAL_GPIO_WritePin(GPIOB, LD3_Pin, GPIO_PIN_RESET);
 80a09e2:	2200      	movs	r2, #0
 80a09e4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80a09e8:	480a      	ldr	r0, [pc, #40]	; (80a0a14 <main+0x60>)
 80a09ea:	f001 fbf7 	bl	80a21dc <HAL_GPIO_WritePin>
	  HAL_Delay(500);
 80a09ee:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80a09f2:	f000 fcd3 	bl	80a139c <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOB, LD3_Pin, GPIO_PIN_SET);
 80a09f6:	2201      	movs	r2, #1
 80a09f8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80a09fc:	4805      	ldr	r0, [pc, #20]	; (80a0a14 <main+0x60>)
 80a09fe:	f001 fbed 	bl	80a21dc <HAL_GPIO_WritePin>
	  HAL_Delay(500);
 80a0a02:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80a0a06:	f000 fcc9 	bl	80a139c <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOB, LD3_Pin, GPIO_PIN_RESET);
 80a0a0a:	e7ea      	b.n	80a09e2 <main+0x2e>
 80a0a0c:	080a0000 	.word	0x080a0000
 80a0a10:	080a4a14 	.word	0x080a4a14
 80a0a14:	40020400 	.word	0x40020400

080a0a18 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80a0a18:	b580      	push	{r7, lr}
 80a0a1a:	b094      	sub	sp, #80	; 0x50
 80a0a1c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80a0a1e:	f107 0320 	add.w	r3, r7, #32
 80a0a22:	2230      	movs	r2, #48	; 0x30
 80a0a24:	2100      	movs	r1, #0
 80a0a26:	4618      	mov	r0, r3
 80a0a28:	f003 f8fc 	bl	80a3c24 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80a0a2c:	f107 030c 	add.w	r3, r7, #12
 80a0a30:	2200      	movs	r2, #0
 80a0a32:	601a      	str	r2, [r3, #0]
 80a0a34:	605a      	str	r2, [r3, #4]
 80a0a36:	609a      	str	r2, [r3, #8]
 80a0a38:	60da      	str	r2, [r3, #12]
 80a0a3a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80a0a3c:	2300      	movs	r3, #0
 80a0a3e:	60bb      	str	r3, [r7, #8]
 80a0a40:	4b28      	ldr	r3, [pc, #160]	; (80a0ae4 <SystemClock_Config+0xcc>)
 80a0a42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80a0a44:	4a27      	ldr	r2, [pc, #156]	; (80a0ae4 <SystemClock_Config+0xcc>)
 80a0a46:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80a0a4a:	6413      	str	r3, [r2, #64]	; 0x40
 80a0a4c:	4b25      	ldr	r3, [pc, #148]	; (80a0ae4 <SystemClock_Config+0xcc>)
 80a0a4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80a0a50:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80a0a54:	60bb      	str	r3, [r7, #8]
 80a0a56:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80a0a58:	2300      	movs	r3, #0
 80a0a5a:	607b      	str	r3, [r7, #4]
 80a0a5c:	4b22      	ldr	r3, [pc, #136]	; (80a0ae8 <SystemClock_Config+0xd0>)
 80a0a5e:	681b      	ldr	r3, [r3, #0]
 80a0a60:	4a21      	ldr	r2, [pc, #132]	; (80a0ae8 <SystemClock_Config+0xd0>)
 80a0a62:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80a0a66:	6013      	str	r3, [r2, #0]
 80a0a68:	4b1f      	ldr	r3, [pc, #124]	; (80a0ae8 <SystemClock_Config+0xd0>)
 80a0a6a:	681b      	ldr	r3, [r3, #0]
 80a0a6c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80a0a70:	607b      	str	r3, [r7, #4]
 80a0a72:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80a0a74:	2301      	movs	r3, #1
 80a0a76:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80a0a78:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80a0a7c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80a0a7e:	2302      	movs	r3, #2
 80a0a80:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80a0a82:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80a0a86:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80a0a88:	2304      	movs	r3, #4
 80a0a8a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80a0a8c:	23a8      	movs	r3, #168	; 0xa8
 80a0a8e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80a0a90:	2302      	movs	r3, #2
 80a0a92:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80a0a94:	2307      	movs	r3, #7
 80a0a96:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80a0a98:	f107 0320 	add.w	r3, r7, #32
 80a0a9c:	4618      	mov	r0, r3
 80a0a9e:	f001 fcd3 	bl	80a2448 <HAL_RCC_OscConfig>
 80a0aa2:	4603      	mov	r3, r0
 80a0aa4:	2b00      	cmp	r3, #0
 80a0aa6:	d001      	beq.n	80a0aac <SystemClock_Config+0x94>
  {
    Error_Handler();
 80a0aa8:	f000 f966 	bl	80a0d78 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80a0aac:	230f      	movs	r3, #15
 80a0aae:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80a0ab0:	2302      	movs	r3, #2
 80a0ab2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80a0ab4:	2300      	movs	r3, #0
 80a0ab6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80a0ab8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80a0abc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80a0abe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80a0ac2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80a0ac4:	f107 030c 	add.w	r3, r7, #12
 80a0ac8:	2105      	movs	r1, #5
 80a0aca:	4618      	mov	r0, r3
 80a0acc:	f001 ff2c 	bl	80a2928 <HAL_RCC_ClockConfig>
 80a0ad0:	4603      	mov	r3, r0
 80a0ad2:	2b00      	cmp	r3, #0
 80a0ad4:	d001      	beq.n	80a0ada <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80a0ad6:	f000 f94f 	bl	80a0d78 <Error_Handler>
  }
}
 80a0ada:	bf00      	nop
 80a0adc:	3750      	adds	r7, #80	; 0x50
 80a0ade:	46bd      	mov	sp, r7
 80a0ae0:	bd80      	pop	{r7, pc}
 80a0ae2:	bf00      	nop
 80a0ae4:	40023800 	.word	0x40023800
 80a0ae8:	40007000 	.word	0x40007000

080a0aec <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 80a0aec:	b580      	push	{r7, lr}
 80a0aee:	af00      	add	r7, sp, #0
  /* USER CODE END ETH_Init 0 */

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 80a0af0:	4b1c      	ldr	r3, [pc, #112]	; (80a0b64 <MX_ETH_Init+0x78>)
 80a0af2:	4a1d      	ldr	r2, [pc, #116]	; (80a0b68 <MX_ETH_Init+0x7c>)
 80a0af4:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 80a0af6:	4b1b      	ldr	r3, [pc, #108]	; (80a0b64 <MX_ETH_Init+0x78>)
 80a0af8:	2201      	movs	r2, #1
 80a0afa:	605a      	str	r2, [r3, #4]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 80a0afc:	4b19      	ldr	r3, [pc, #100]	; (80a0b64 <MX_ETH_Init+0x78>)
 80a0afe:	2200      	movs	r2, #0
 80a0b00:	821a      	strh	r2, [r3, #16]
  heth.Init.MACAddr[0] =   0x00;
 80a0b02:	4b18      	ldr	r3, [pc, #96]	; (80a0b64 <MX_ETH_Init+0x78>)
 80a0b04:	695b      	ldr	r3, [r3, #20]
 80a0b06:	2200      	movs	r2, #0
 80a0b08:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[1] =   0x80;
 80a0b0a:	4b16      	ldr	r3, [pc, #88]	; (80a0b64 <MX_ETH_Init+0x78>)
 80a0b0c:	695b      	ldr	r3, [r3, #20]
 80a0b0e:	3301      	adds	r3, #1
 80a0b10:	2280      	movs	r2, #128	; 0x80
 80a0b12:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[2] =   0xE1;
 80a0b14:	4b13      	ldr	r3, [pc, #76]	; (80a0b64 <MX_ETH_Init+0x78>)
 80a0b16:	695b      	ldr	r3, [r3, #20]
 80a0b18:	3302      	adds	r3, #2
 80a0b1a:	22e1      	movs	r2, #225	; 0xe1
 80a0b1c:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[3] =   0x00;
 80a0b1e:	4b11      	ldr	r3, [pc, #68]	; (80a0b64 <MX_ETH_Init+0x78>)
 80a0b20:	695b      	ldr	r3, [r3, #20]
 80a0b22:	3303      	adds	r3, #3
 80a0b24:	2200      	movs	r2, #0
 80a0b26:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[4] =   0x00;
 80a0b28:	4b0e      	ldr	r3, [pc, #56]	; (80a0b64 <MX_ETH_Init+0x78>)
 80a0b2a:	695b      	ldr	r3, [r3, #20]
 80a0b2c:	3304      	adds	r3, #4
 80a0b2e:	2200      	movs	r2, #0
 80a0b30:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[5] =   0x00;
 80a0b32:	4b0c      	ldr	r3, [pc, #48]	; (80a0b64 <MX_ETH_Init+0x78>)
 80a0b34:	695b      	ldr	r3, [r3, #20]
 80a0b36:	3305      	adds	r3, #5
 80a0b38:	2200      	movs	r2, #0
 80a0b3a:	701a      	strb	r2, [r3, #0]
  heth.Init.RxMode = ETH_RXPOLLING_MODE;
 80a0b3c:	4b09      	ldr	r3, [pc, #36]	; (80a0b64 <MX_ETH_Init+0x78>)
 80a0b3e:	2200      	movs	r2, #0
 80a0b40:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 80a0b42:	4b08      	ldr	r3, [pc, #32]	; (80a0b64 <MX_ETH_Init+0x78>)
 80a0b44:	2200      	movs	r2, #0
 80a0b46:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 80a0b48:	4b06      	ldr	r3, [pc, #24]	; (80a0b64 <MX_ETH_Init+0x78>)
 80a0b4a:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80a0b4e:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */
    
  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 80a0b50:	4804      	ldr	r0, [pc, #16]	; (80a0b64 <MX_ETH_Init+0x78>)
 80a0b52:	f000 fd2b 	bl	80a15ac <HAL_ETH_Init>
 80a0b56:	4603      	mov	r3, r0
 80a0b58:	2b00      	cmp	r3, #0
 80a0b5a:	d001      	beq.n	80a0b60 <MX_ETH_Init+0x74>
  {
    Error_Handler();
 80a0b5c:	f000 f90c 	bl	80a0d78 <Error_Handler>
  }
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 80a0b60:	bf00      	nop
 80a0b62:	bd80      	pop	{r7, pc}
 80a0b64:	200004e0 	.word	0x200004e0
 80a0b68:	40028000 	.word	0x40028000

080a0b6c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80a0b6c:	b580      	push	{r7, lr}
 80a0b6e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80a0b70:	4b11      	ldr	r3, [pc, #68]	; (80a0bb8 <MX_USART3_UART_Init+0x4c>)
 80a0b72:	4a12      	ldr	r2, [pc, #72]	; (80a0bbc <MX_USART3_UART_Init+0x50>)
 80a0b74:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80a0b76:	4b10      	ldr	r3, [pc, #64]	; (80a0bb8 <MX_USART3_UART_Init+0x4c>)
 80a0b78:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80a0b7c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80a0b7e:	4b0e      	ldr	r3, [pc, #56]	; (80a0bb8 <MX_USART3_UART_Init+0x4c>)
 80a0b80:	2200      	movs	r2, #0
 80a0b82:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80a0b84:	4b0c      	ldr	r3, [pc, #48]	; (80a0bb8 <MX_USART3_UART_Init+0x4c>)
 80a0b86:	2200      	movs	r2, #0
 80a0b88:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80a0b8a:	4b0b      	ldr	r3, [pc, #44]	; (80a0bb8 <MX_USART3_UART_Init+0x4c>)
 80a0b8c:	2200      	movs	r2, #0
 80a0b8e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80a0b90:	4b09      	ldr	r3, [pc, #36]	; (80a0bb8 <MX_USART3_UART_Init+0x4c>)
 80a0b92:	220c      	movs	r2, #12
 80a0b94:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80a0b96:	4b08      	ldr	r3, [pc, #32]	; (80a0bb8 <MX_USART3_UART_Init+0x4c>)
 80a0b98:	2200      	movs	r2, #0
 80a0b9a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80a0b9c:	4b06      	ldr	r3, [pc, #24]	; (80a0bb8 <MX_USART3_UART_Init+0x4c>)
 80a0b9e:	2200      	movs	r2, #0
 80a0ba0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80a0ba2:	4805      	ldr	r0, [pc, #20]	; (80a0bb8 <MX_USART3_UART_Init+0x4c>)
 80a0ba4:	f002 f8b2 	bl	80a2d0c <HAL_UART_Init>
 80a0ba8:	4603      	mov	r3, r0
 80a0baa:	2b00      	cmp	r3, #0
 80a0bac:	d001      	beq.n	80a0bb2 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80a0bae:	f000 f8e3 	bl	80a0d78 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80a0bb2:	bf00      	nop
 80a0bb4:	bd80      	pop	{r7, pc}
 80a0bb6:	bf00      	nop
 80a0bb8:	20000098 	.word	0x20000098
 80a0bbc:	40004800 	.word	0x40004800

080a0bc0 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80a0bc0:	b580      	push	{r7, lr}
 80a0bc2:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80a0bc4:	4b14      	ldr	r3, [pc, #80]	; (80a0c18 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80a0bc6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80a0bca:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80a0bcc:	4b12      	ldr	r3, [pc, #72]	; (80a0c18 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80a0bce:	2204      	movs	r2, #4
 80a0bd0:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80a0bd2:	4b11      	ldr	r3, [pc, #68]	; (80a0c18 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80a0bd4:	2202      	movs	r2, #2
 80a0bd6:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80a0bd8:	4b0f      	ldr	r3, [pc, #60]	; (80a0c18 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80a0bda:	2200      	movs	r2, #0
 80a0bdc:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80a0bde:	4b0e      	ldr	r3, [pc, #56]	; (80a0c18 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80a0be0:	2202      	movs	r2, #2
 80a0be2:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80a0be4:	4b0c      	ldr	r3, [pc, #48]	; (80a0c18 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80a0be6:	2201      	movs	r2, #1
 80a0be8:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80a0bea:	4b0b      	ldr	r3, [pc, #44]	; (80a0c18 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80a0bec:	2200      	movs	r2, #0
 80a0bee:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80a0bf0:	4b09      	ldr	r3, [pc, #36]	; (80a0c18 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80a0bf2:	2200      	movs	r2, #0
 80a0bf4:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80a0bf6:	4b08      	ldr	r3, [pc, #32]	; (80a0c18 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80a0bf8:	2201      	movs	r2, #1
 80a0bfa:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80a0bfc:	4b06      	ldr	r3, [pc, #24]	; (80a0c18 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80a0bfe:	2200      	movs	r2, #0
 80a0c00:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80a0c02:	4805      	ldr	r0, [pc, #20]	; (80a0c18 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80a0c04:	f001 fb03 	bl	80a220e <HAL_PCD_Init>
 80a0c08:	4603      	mov	r3, r0
 80a0c0a:	2b00      	cmp	r3, #0
 80a0c0c:	d001      	beq.n	80a0c12 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 80a0c0e:	f000 f8b3 	bl	80a0d78 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80a0c12:	bf00      	nop
 80a0c14:	bd80      	pop	{r7, pc}
 80a0c16:	bf00      	nop
 80a0c18:	200000d8 	.word	0x200000d8

080a0c1c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80a0c1c:	b580      	push	{r7, lr}
 80a0c1e:	b08c      	sub	sp, #48	; 0x30
 80a0c20:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80a0c22:	f107 031c 	add.w	r3, r7, #28
 80a0c26:	2200      	movs	r2, #0
 80a0c28:	601a      	str	r2, [r3, #0]
 80a0c2a:	605a      	str	r2, [r3, #4]
 80a0c2c:	609a      	str	r2, [r3, #8]
 80a0c2e:	60da      	str	r2, [r3, #12]
 80a0c30:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80a0c32:	2300      	movs	r3, #0
 80a0c34:	61bb      	str	r3, [r7, #24]
 80a0c36:	4b4b      	ldr	r3, [pc, #300]	; (80a0d64 <MX_GPIO_Init+0x148>)
 80a0c38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a0c3a:	4a4a      	ldr	r2, [pc, #296]	; (80a0d64 <MX_GPIO_Init+0x148>)
 80a0c3c:	f043 0304 	orr.w	r3, r3, #4
 80a0c40:	6313      	str	r3, [r2, #48]	; 0x30
 80a0c42:	4b48      	ldr	r3, [pc, #288]	; (80a0d64 <MX_GPIO_Init+0x148>)
 80a0c44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a0c46:	f003 0304 	and.w	r3, r3, #4
 80a0c4a:	61bb      	str	r3, [r7, #24]
 80a0c4c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80a0c4e:	2300      	movs	r3, #0
 80a0c50:	617b      	str	r3, [r7, #20]
 80a0c52:	4b44      	ldr	r3, [pc, #272]	; (80a0d64 <MX_GPIO_Init+0x148>)
 80a0c54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a0c56:	4a43      	ldr	r2, [pc, #268]	; (80a0d64 <MX_GPIO_Init+0x148>)
 80a0c58:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80a0c5c:	6313      	str	r3, [r2, #48]	; 0x30
 80a0c5e:	4b41      	ldr	r3, [pc, #260]	; (80a0d64 <MX_GPIO_Init+0x148>)
 80a0c60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a0c62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80a0c66:	617b      	str	r3, [r7, #20]
 80a0c68:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80a0c6a:	2300      	movs	r3, #0
 80a0c6c:	613b      	str	r3, [r7, #16]
 80a0c6e:	4b3d      	ldr	r3, [pc, #244]	; (80a0d64 <MX_GPIO_Init+0x148>)
 80a0c70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a0c72:	4a3c      	ldr	r2, [pc, #240]	; (80a0d64 <MX_GPIO_Init+0x148>)
 80a0c74:	f043 0301 	orr.w	r3, r3, #1
 80a0c78:	6313      	str	r3, [r2, #48]	; 0x30
 80a0c7a:	4b3a      	ldr	r3, [pc, #232]	; (80a0d64 <MX_GPIO_Init+0x148>)
 80a0c7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a0c7e:	f003 0301 	and.w	r3, r3, #1
 80a0c82:	613b      	str	r3, [r7, #16]
 80a0c84:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80a0c86:	2300      	movs	r3, #0
 80a0c88:	60fb      	str	r3, [r7, #12]
 80a0c8a:	4b36      	ldr	r3, [pc, #216]	; (80a0d64 <MX_GPIO_Init+0x148>)
 80a0c8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a0c8e:	4a35      	ldr	r2, [pc, #212]	; (80a0d64 <MX_GPIO_Init+0x148>)
 80a0c90:	f043 0302 	orr.w	r3, r3, #2
 80a0c94:	6313      	str	r3, [r2, #48]	; 0x30
 80a0c96:	4b33      	ldr	r3, [pc, #204]	; (80a0d64 <MX_GPIO_Init+0x148>)
 80a0c98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a0c9a:	f003 0302 	and.w	r3, r3, #2
 80a0c9e:	60fb      	str	r3, [r7, #12]
 80a0ca0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80a0ca2:	2300      	movs	r3, #0
 80a0ca4:	60bb      	str	r3, [r7, #8]
 80a0ca6:	4b2f      	ldr	r3, [pc, #188]	; (80a0d64 <MX_GPIO_Init+0x148>)
 80a0ca8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a0caa:	4a2e      	ldr	r2, [pc, #184]	; (80a0d64 <MX_GPIO_Init+0x148>)
 80a0cac:	f043 0308 	orr.w	r3, r3, #8
 80a0cb0:	6313      	str	r3, [r2, #48]	; 0x30
 80a0cb2:	4b2c      	ldr	r3, [pc, #176]	; (80a0d64 <MX_GPIO_Init+0x148>)
 80a0cb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a0cb6:	f003 0308 	and.w	r3, r3, #8
 80a0cba:	60bb      	str	r3, [r7, #8]
 80a0cbc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80a0cbe:	2300      	movs	r3, #0
 80a0cc0:	607b      	str	r3, [r7, #4]
 80a0cc2:	4b28      	ldr	r3, [pc, #160]	; (80a0d64 <MX_GPIO_Init+0x148>)
 80a0cc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a0cc6:	4a27      	ldr	r2, [pc, #156]	; (80a0d64 <MX_GPIO_Init+0x148>)
 80a0cc8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80a0ccc:	6313      	str	r3, [r2, #48]	; 0x30
 80a0cce:	4b25      	ldr	r3, [pc, #148]	; (80a0d64 <MX_GPIO_Init+0x148>)
 80a0cd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a0cd2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80a0cd6:	607b      	str	r3, [r7, #4]
 80a0cd8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80a0cda:	2200      	movs	r2, #0
 80a0cdc:	f244 0181 	movw	r1, #16513	; 0x4081
 80a0ce0:	4821      	ldr	r0, [pc, #132]	; (80a0d68 <MX_GPIO_Init+0x14c>)
 80a0ce2:	f001 fa7b 	bl	80a21dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80a0ce6:	2200      	movs	r2, #0
 80a0ce8:	2140      	movs	r1, #64	; 0x40
 80a0cea:	4820      	ldr	r0, [pc, #128]	; (80a0d6c <MX_GPIO_Init+0x150>)
 80a0cec:	f001 fa76 	bl	80a21dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80a0cf0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80a0cf4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80a0cf6:	4b1e      	ldr	r3, [pc, #120]	; (80a0d70 <MX_GPIO_Init+0x154>)
 80a0cf8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80a0cfa:	2300      	movs	r3, #0
 80a0cfc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80a0cfe:	f107 031c 	add.w	r3, r7, #28
 80a0d02:	4619      	mov	r1, r3
 80a0d04:	481b      	ldr	r0, [pc, #108]	; (80a0d74 <MX_GPIO_Init+0x158>)
 80a0d06:	f001 f8bf 	bl	80a1e88 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80a0d0a:	f244 0381 	movw	r3, #16513	; 0x4081
 80a0d0e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80a0d10:	2301      	movs	r3, #1
 80a0d12:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80a0d14:	2300      	movs	r3, #0
 80a0d16:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80a0d18:	2300      	movs	r3, #0
 80a0d1a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80a0d1c:	f107 031c 	add.w	r3, r7, #28
 80a0d20:	4619      	mov	r1, r3
 80a0d22:	4811      	ldr	r0, [pc, #68]	; (80a0d68 <MX_GPIO_Init+0x14c>)
 80a0d24:	f001 f8b0 	bl	80a1e88 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80a0d28:	2340      	movs	r3, #64	; 0x40
 80a0d2a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80a0d2c:	2301      	movs	r3, #1
 80a0d2e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80a0d30:	2300      	movs	r3, #0
 80a0d32:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80a0d34:	2300      	movs	r3, #0
 80a0d36:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80a0d38:	f107 031c 	add.w	r3, r7, #28
 80a0d3c:	4619      	mov	r1, r3
 80a0d3e:	480b      	ldr	r0, [pc, #44]	; (80a0d6c <MX_GPIO_Init+0x150>)
 80a0d40:	f001 f8a2 	bl	80a1e88 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80a0d44:	2380      	movs	r3, #128	; 0x80
 80a0d46:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80a0d48:	2300      	movs	r3, #0
 80a0d4a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80a0d4c:	2300      	movs	r3, #0
 80a0d4e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80a0d50:	f107 031c 	add.w	r3, r7, #28
 80a0d54:	4619      	mov	r1, r3
 80a0d56:	4805      	ldr	r0, [pc, #20]	; (80a0d6c <MX_GPIO_Init+0x150>)
 80a0d58:	f001 f896 	bl	80a1e88 <HAL_GPIO_Init>

}
 80a0d5c:	bf00      	nop
 80a0d5e:	3730      	adds	r7, #48	; 0x30
 80a0d60:	46bd      	mov	sp, r7
 80a0d62:	bd80      	pop	{r7, pc}
 80a0d64:	40023800 	.word	0x40023800
 80a0d68:	40020400 	.word	0x40020400
 80a0d6c:	40021800 	.word	0x40021800
 80a0d70:	10110000 	.word	0x10110000
 80a0d74:	40020800 	.word	0x40020800

080a0d78 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80a0d78:	b480      	push	{r7}
 80a0d7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80a0d7c:	bf00      	nop
 80a0d7e:	46bd      	mov	sp, r7
 80a0d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 80a0d84:	4770      	bx	lr
	...

080a0d88 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80a0d88:	b480      	push	{r7}
 80a0d8a:	b083      	sub	sp, #12
 80a0d8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80a0d8e:	2300      	movs	r3, #0
 80a0d90:	607b      	str	r3, [r7, #4]
 80a0d92:	4b10      	ldr	r3, [pc, #64]	; (80a0dd4 <HAL_MspInit+0x4c>)
 80a0d94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80a0d96:	4a0f      	ldr	r2, [pc, #60]	; (80a0dd4 <HAL_MspInit+0x4c>)
 80a0d98:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80a0d9c:	6453      	str	r3, [r2, #68]	; 0x44
 80a0d9e:	4b0d      	ldr	r3, [pc, #52]	; (80a0dd4 <HAL_MspInit+0x4c>)
 80a0da0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80a0da2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80a0da6:	607b      	str	r3, [r7, #4]
 80a0da8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80a0daa:	2300      	movs	r3, #0
 80a0dac:	603b      	str	r3, [r7, #0]
 80a0dae:	4b09      	ldr	r3, [pc, #36]	; (80a0dd4 <HAL_MspInit+0x4c>)
 80a0db0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80a0db2:	4a08      	ldr	r2, [pc, #32]	; (80a0dd4 <HAL_MspInit+0x4c>)
 80a0db4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80a0db8:	6413      	str	r3, [r2, #64]	; 0x40
 80a0dba:	4b06      	ldr	r3, [pc, #24]	; (80a0dd4 <HAL_MspInit+0x4c>)
 80a0dbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80a0dbe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80a0dc2:	603b      	str	r3, [r7, #0]
 80a0dc4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80a0dc6:	bf00      	nop
 80a0dc8:	370c      	adds	r7, #12
 80a0dca:	46bd      	mov	sp, r7
 80a0dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80a0dd0:	4770      	bx	lr
 80a0dd2:	bf00      	nop
 80a0dd4:	40023800 	.word	0x40023800

080a0dd8 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 80a0dd8:	b580      	push	{r7, lr}
 80a0dda:	b08e      	sub	sp, #56	; 0x38
 80a0ddc:	af00      	add	r7, sp, #0
 80a0dde:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80a0de0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80a0de4:	2200      	movs	r2, #0
 80a0de6:	601a      	str	r2, [r3, #0]
 80a0de8:	605a      	str	r2, [r3, #4]
 80a0dea:	609a      	str	r2, [r3, #8]
 80a0dec:	60da      	str	r2, [r3, #12]
 80a0dee:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 80a0df0:	687b      	ldr	r3, [r7, #4]
 80a0df2:	681b      	ldr	r3, [r3, #0]
 80a0df4:	4a55      	ldr	r2, [pc, #340]	; (80a0f4c <HAL_ETH_MspInit+0x174>)
 80a0df6:	4293      	cmp	r3, r2
 80a0df8:	f040 80a4 	bne.w	80a0f44 <HAL_ETH_MspInit+0x16c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 80a0dfc:	2300      	movs	r3, #0
 80a0dfe:	623b      	str	r3, [r7, #32]
 80a0e00:	4b53      	ldr	r3, [pc, #332]	; (80a0f50 <HAL_ETH_MspInit+0x178>)
 80a0e02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a0e04:	4a52      	ldr	r2, [pc, #328]	; (80a0f50 <HAL_ETH_MspInit+0x178>)
 80a0e06:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80a0e0a:	6313      	str	r3, [r2, #48]	; 0x30
 80a0e0c:	4b50      	ldr	r3, [pc, #320]	; (80a0f50 <HAL_ETH_MspInit+0x178>)
 80a0e0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a0e10:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80a0e14:	623b      	str	r3, [r7, #32]
 80a0e16:	6a3b      	ldr	r3, [r7, #32]
 80a0e18:	2300      	movs	r3, #0
 80a0e1a:	61fb      	str	r3, [r7, #28]
 80a0e1c:	4b4c      	ldr	r3, [pc, #304]	; (80a0f50 <HAL_ETH_MspInit+0x178>)
 80a0e1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a0e20:	4a4b      	ldr	r2, [pc, #300]	; (80a0f50 <HAL_ETH_MspInit+0x178>)
 80a0e22:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80a0e26:	6313      	str	r3, [r2, #48]	; 0x30
 80a0e28:	4b49      	ldr	r3, [pc, #292]	; (80a0f50 <HAL_ETH_MspInit+0x178>)
 80a0e2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a0e2c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80a0e30:	61fb      	str	r3, [r7, #28]
 80a0e32:	69fb      	ldr	r3, [r7, #28]
 80a0e34:	2300      	movs	r3, #0
 80a0e36:	61bb      	str	r3, [r7, #24]
 80a0e38:	4b45      	ldr	r3, [pc, #276]	; (80a0f50 <HAL_ETH_MspInit+0x178>)
 80a0e3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a0e3c:	4a44      	ldr	r2, [pc, #272]	; (80a0f50 <HAL_ETH_MspInit+0x178>)
 80a0e3e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80a0e42:	6313      	str	r3, [r2, #48]	; 0x30
 80a0e44:	4b42      	ldr	r3, [pc, #264]	; (80a0f50 <HAL_ETH_MspInit+0x178>)
 80a0e46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a0e48:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80a0e4c:	61bb      	str	r3, [r7, #24]
 80a0e4e:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80a0e50:	2300      	movs	r3, #0
 80a0e52:	617b      	str	r3, [r7, #20]
 80a0e54:	4b3e      	ldr	r3, [pc, #248]	; (80a0f50 <HAL_ETH_MspInit+0x178>)
 80a0e56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a0e58:	4a3d      	ldr	r2, [pc, #244]	; (80a0f50 <HAL_ETH_MspInit+0x178>)
 80a0e5a:	f043 0304 	orr.w	r3, r3, #4
 80a0e5e:	6313      	str	r3, [r2, #48]	; 0x30
 80a0e60:	4b3b      	ldr	r3, [pc, #236]	; (80a0f50 <HAL_ETH_MspInit+0x178>)
 80a0e62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a0e64:	f003 0304 	and.w	r3, r3, #4
 80a0e68:	617b      	str	r3, [r7, #20]
 80a0e6a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80a0e6c:	2300      	movs	r3, #0
 80a0e6e:	613b      	str	r3, [r7, #16]
 80a0e70:	4b37      	ldr	r3, [pc, #220]	; (80a0f50 <HAL_ETH_MspInit+0x178>)
 80a0e72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a0e74:	4a36      	ldr	r2, [pc, #216]	; (80a0f50 <HAL_ETH_MspInit+0x178>)
 80a0e76:	f043 0301 	orr.w	r3, r3, #1
 80a0e7a:	6313      	str	r3, [r2, #48]	; 0x30
 80a0e7c:	4b34      	ldr	r3, [pc, #208]	; (80a0f50 <HAL_ETH_MspInit+0x178>)
 80a0e7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a0e80:	f003 0301 	and.w	r3, r3, #1
 80a0e84:	613b      	str	r3, [r7, #16]
 80a0e86:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80a0e88:	2300      	movs	r3, #0
 80a0e8a:	60fb      	str	r3, [r7, #12]
 80a0e8c:	4b30      	ldr	r3, [pc, #192]	; (80a0f50 <HAL_ETH_MspInit+0x178>)
 80a0e8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a0e90:	4a2f      	ldr	r2, [pc, #188]	; (80a0f50 <HAL_ETH_MspInit+0x178>)
 80a0e92:	f043 0302 	orr.w	r3, r3, #2
 80a0e96:	6313      	str	r3, [r2, #48]	; 0x30
 80a0e98:	4b2d      	ldr	r3, [pc, #180]	; (80a0f50 <HAL_ETH_MspInit+0x178>)
 80a0e9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a0e9c:	f003 0302 	and.w	r3, r3, #2
 80a0ea0:	60fb      	str	r3, [r7, #12]
 80a0ea2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80a0ea4:	2300      	movs	r3, #0
 80a0ea6:	60bb      	str	r3, [r7, #8]
 80a0ea8:	4b29      	ldr	r3, [pc, #164]	; (80a0f50 <HAL_ETH_MspInit+0x178>)
 80a0eaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a0eac:	4a28      	ldr	r2, [pc, #160]	; (80a0f50 <HAL_ETH_MspInit+0x178>)
 80a0eae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80a0eb2:	6313      	str	r3, [r2, #48]	; 0x30
 80a0eb4:	4b26      	ldr	r3, [pc, #152]	; (80a0f50 <HAL_ETH_MspInit+0x178>)
 80a0eb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a0eb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80a0ebc:	60bb      	str	r3, [r7, #8]
 80a0ebe:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0 
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80a0ec0:	2332      	movs	r3, #50	; 0x32
 80a0ec2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80a0ec4:	2302      	movs	r3, #2
 80a0ec6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80a0ec8:	2300      	movs	r3, #0
 80a0eca:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80a0ecc:	2303      	movs	r3, #3
 80a0ece:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80a0ed0:	230b      	movs	r3, #11
 80a0ed2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80a0ed4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80a0ed8:	4619      	mov	r1, r3
 80a0eda:	481e      	ldr	r0, [pc, #120]	; (80a0f54 <HAL_ETH_MspInit+0x17c>)
 80a0edc:	f000 ffd4 	bl	80a1e88 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80a0ee0:	2386      	movs	r3, #134	; 0x86
 80a0ee2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80a0ee4:	2302      	movs	r3, #2
 80a0ee6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80a0ee8:	2300      	movs	r3, #0
 80a0eea:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80a0eec:	2303      	movs	r3, #3
 80a0eee:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80a0ef0:	230b      	movs	r3, #11
 80a0ef2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80a0ef4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80a0ef8:	4619      	mov	r1, r3
 80a0efa:	4817      	ldr	r0, [pc, #92]	; (80a0f58 <HAL_ETH_MspInit+0x180>)
 80a0efc:	f000 ffc4 	bl	80a1e88 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80a0f00:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80a0f04:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80a0f06:	2302      	movs	r3, #2
 80a0f08:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80a0f0a:	2300      	movs	r3, #0
 80a0f0c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80a0f0e:	2303      	movs	r3, #3
 80a0f10:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80a0f12:	230b      	movs	r3, #11
 80a0f14:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80a0f16:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80a0f1a:	4619      	mov	r1, r3
 80a0f1c:	480f      	ldr	r0, [pc, #60]	; (80a0f5c <HAL_ETH_MspInit+0x184>)
 80a0f1e:	f000 ffb3 	bl	80a1e88 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80a0f22:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80a0f26:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80a0f28:	2302      	movs	r3, #2
 80a0f2a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80a0f2c:	2300      	movs	r3, #0
 80a0f2e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80a0f30:	2303      	movs	r3, #3
 80a0f32:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80a0f34:	230b      	movs	r3, #11
 80a0f36:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80a0f38:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80a0f3c:	4619      	mov	r1, r3
 80a0f3e:	4808      	ldr	r0, [pc, #32]	; (80a0f60 <HAL_ETH_MspInit+0x188>)
 80a0f40:	f000 ffa2 	bl	80a1e88 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 80a0f44:	bf00      	nop
 80a0f46:	3738      	adds	r7, #56	; 0x38
 80a0f48:	46bd      	mov	sp, r7
 80a0f4a:	bd80      	pop	{r7, pc}
 80a0f4c:	40028000 	.word	0x40028000
 80a0f50:	40023800 	.word	0x40023800
 80a0f54:	40020800 	.word	0x40020800
 80a0f58:	40020000 	.word	0x40020000
 80a0f5c:	40020400 	.word	0x40020400
 80a0f60:	40021800 	.word	0x40021800

080a0f64 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80a0f64:	b580      	push	{r7, lr}
 80a0f66:	b08a      	sub	sp, #40	; 0x28
 80a0f68:	af00      	add	r7, sp, #0
 80a0f6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80a0f6c:	f107 0314 	add.w	r3, r7, #20
 80a0f70:	2200      	movs	r2, #0
 80a0f72:	601a      	str	r2, [r3, #0]
 80a0f74:	605a      	str	r2, [r3, #4]
 80a0f76:	609a      	str	r2, [r3, #8]
 80a0f78:	60da      	str	r2, [r3, #12]
 80a0f7a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 80a0f7c:	687b      	ldr	r3, [r7, #4]
 80a0f7e:	681b      	ldr	r3, [r3, #0]
 80a0f80:	4a19      	ldr	r2, [pc, #100]	; (80a0fe8 <HAL_UART_MspInit+0x84>)
 80a0f82:	4293      	cmp	r3, r2
 80a0f84:	d12c      	bne.n	80a0fe0 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80a0f86:	2300      	movs	r3, #0
 80a0f88:	613b      	str	r3, [r7, #16]
 80a0f8a:	4b18      	ldr	r3, [pc, #96]	; (80a0fec <HAL_UART_MspInit+0x88>)
 80a0f8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80a0f8e:	4a17      	ldr	r2, [pc, #92]	; (80a0fec <HAL_UART_MspInit+0x88>)
 80a0f90:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80a0f94:	6413      	str	r3, [r2, #64]	; 0x40
 80a0f96:	4b15      	ldr	r3, [pc, #84]	; (80a0fec <HAL_UART_MspInit+0x88>)
 80a0f98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80a0f9a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80a0f9e:	613b      	str	r3, [r7, #16]
 80a0fa0:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80a0fa2:	2300      	movs	r3, #0
 80a0fa4:	60fb      	str	r3, [r7, #12]
 80a0fa6:	4b11      	ldr	r3, [pc, #68]	; (80a0fec <HAL_UART_MspInit+0x88>)
 80a0fa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a0faa:	4a10      	ldr	r2, [pc, #64]	; (80a0fec <HAL_UART_MspInit+0x88>)
 80a0fac:	f043 0308 	orr.w	r3, r3, #8
 80a0fb0:	6313      	str	r3, [r2, #48]	; 0x30
 80a0fb2:	4b0e      	ldr	r3, [pc, #56]	; (80a0fec <HAL_UART_MspInit+0x88>)
 80a0fb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a0fb6:	f003 0308 	and.w	r3, r3, #8
 80a0fba:	60fb      	str	r3, [r7, #12]
 80a0fbc:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration    
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX 
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80a0fbe:	f44f 7340 	mov.w	r3, #768	; 0x300
 80a0fc2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80a0fc4:	2302      	movs	r3, #2
 80a0fc6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80a0fc8:	2300      	movs	r3, #0
 80a0fca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80a0fcc:	2303      	movs	r3, #3
 80a0fce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80a0fd0:	2307      	movs	r3, #7
 80a0fd2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80a0fd4:	f107 0314 	add.w	r3, r7, #20
 80a0fd8:	4619      	mov	r1, r3
 80a0fda:	4805      	ldr	r0, [pc, #20]	; (80a0ff0 <HAL_UART_MspInit+0x8c>)
 80a0fdc:	f000 ff54 	bl	80a1e88 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80a0fe0:	bf00      	nop
 80a0fe2:	3728      	adds	r7, #40	; 0x28
 80a0fe4:	46bd      	mov	sp, r7
 80a0fe6:	bd80      	pop	{r7, pc}
 80a0fe8:	40004800 	.word	0x40004800
 80a0fec:	40023800 	.word	0x40023800
 80a0ff0:	40020c00 	.word	0x40020c00

080a0ff4 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80a0ff4:	b580      	push	{r7, lr}
 80a0ff6:	b08a      	sub	sp, #40	; 0x28
 80a0ff8:	af00      	add	r7, sp, #0
 80a0ffa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80a0ffc:	f107 0314 	add.w	r3, r7, #20
 80a1000:	2200      	movs	r2, #0
 80a1002:	601a      	str	r2, [r3, #0]
 80a1004:	605a      	str	r2, [r3, #4]
 80a1006:	609a      	str	r2, [r3, #8]
 80a1008:	60da      	str	r2, [r3, #12]
 80a100a:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 80a100c:	687b      	ldr	r3, [r7, #4]
 80a100e:	681b      	ldr	r3, [r3, #0]
 80a1010:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80a1014:	d13f      	bne.n	80a1096 <HAL_PCD_MspInit+0xa2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80a1016:	2300      	movs	r3, #0
 80a1018:	613b      	str	r3, [r7, #16]
 80a101a:	4b21      	ldr	r3, [pc, #132]	; (80a10a0 <HAL_PCD_MspInit+0xac>)
 80a101c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a101e:	4a20      	ldr	r2, [pc, #128]	; (80a10a0 <HAL_PCD_MspInit+0xac>)
 80a1020:	f043 0301 	orr.w	r3, r3, #1
 80a1024:	6313      	str	r3, [r2, #48]	; 0x30
 80a1026:	4b1e      	ldr	r3, [pc, #120]	; (80a10a0 <HAL_PCD_MspInit+0xac>)
 80a1028:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a102a:	f003 0301 	and.w	r3, r3, #1
 80a102e:	613b      	str	r3, [r7, #16]
 80a1030:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80a1032:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 80a1036:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80a1038:	2302      	movs	r3, #2
 80a103a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80a103c:	2300      	movs	r3, #0
 80a103e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80a1040:	2303      	movs	r3, #3
 80a1042:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80a1044:	230a      	movs	r3, #10
 80a1046:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80a1048:	f107 0314 	add.w	r3, r7, #20
 80a104c:	4619      	mov	r1, r3
 80a104e:	4815      	ldr	r0, [pc, #84]	; (80a10a4 <HAL_PCD_MspInit+0xb0>)
 80a1050:	f000 ff1a 	bl	80a1e88 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80a1054:	f44f 7300 	mov.w	r3, #512	; 0x200
 80a1058:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80a105a:	2300      	movs	r3, #0
 80a105c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80a105e:	2300      	movs	r3, #0
 80a1060:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80a1062:	f107 0314 	add.w	r3, r7, #20
 80a1066:	4619      	mov	r1, r3
 80a1068:	480e      	ldr	r0, [pc, #56]	; (80a10a4 <HAL_PCD_MspInit+0xb0>)
 80a106a:	f000 ff0d 	bl	80a1e88 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80a106e:	4b0c      	ldr	r3, [pc, #48]	; (80a10a0 <HAL_PCD_MspInit+0xac>)
 80a1070:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a1072:	4a0b      	ldr	r2, [pc, #44]	; (80a10a0 <HAL_PCD_MspInit+0xac>)
 80a1074:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80a1078:	6353      	str	r3, [r2, #52]	; 0x34
 80a107a:	2300      	movs	r3, #0
 80a107c:	60fb      	str	r3, [r7, #12]
 80a107e:	4b08      	ldr	r3, [pc, #32]	; (80a10a0 <HAL_PCD_MspInit+0xac>)
 80a1080:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80a1082:	4a07      	ldr	r2, [pc, #28]	; (80a10a0 <HAL_PCD_MspInit+0xac>)
 80a1084:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80a1088:	6453      	str	r3, [r2, #68]	; 0x44
 80a108a:	4b05      	ldr	r3, [pc, #20]	; (80a10a0 <HAL_PCD_MspInit+0xac>)
 80a108c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80a108e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80a1092:	60fb      	str	r3, [r7, #12]
 80a1094:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 80a1096:	bf00      	nop
 80a1098:	3728      	adds	r7, #40	; 0x28
 80a109a:	46bd      	mov	sp, r7
 80a109c:	bd80      	pop	{r7, pc}
 80a109e:	bf00      	nop
 80a10a0:	40023800 	.word	0x40023800
 80a10a4:	40020000 	.word	0x40020000

080a10a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80a10a8:	b480      	push	{r7}
 80a10aa:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80a10ac:	bf00      	nop
 80a10ae:	46bd      	mov	sp, r7
 80a10b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80a10b4:	4770      	bx	lr

080a10b6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80a10b6:	b480      	push	{r7}
 80a10b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80a10ba:	e7fe      	b.n	80a10ba <HardFault_Handler+0x4>

080a10bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80a10bc:	b480      	push	{r7}
 80a10be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80a10c0:	e7fe      	b.n	80a10c0 <MemManage_Handler+0x4>

080a10c2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80a10c2:	b480      	push	{r7}
 80a10c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80a10c6:	e7fe      	b.n	80a10c6 <BusFault_Handler+0x4>

080a10c8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80a10c8:	b480      	push	{r7}
 80a10ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80a10cc:	e7fe      	b.n	80a10cc <UsageFault_Handler+0x4>

080a10ce <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80a10ce:	b480      	push	{r7}
 80a10d0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80a10d2:	bf00      	nop
 80a10d4:	46bd      	mov	sp, r7
 80a10d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80a10da:	4770      	bx	lr

080a10dc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80a10dc:	b480      	push	{r7}
 80a10de:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80a10e0:	bf00      	nop
 80a10e2:	46bd      	mov	sp, r7
 80a10e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80a10e8:	4770      	bx	lr

080a10ea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80a10ea:	b480      	push	{r7}
 80a10ec:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80a10ee:	bf00      	nop
 80a10f0:	46bd      	mov	sp, r7
 80a10f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80a10f6:	4770      	bx	lr

080a10f8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80a10f8:	b580      	push	{r7, lr}
 80a10fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80a10fc:	f000 f92e 	bl	80a135c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80a1100:	bf00      	nop
 80a1102:	bd80      	pop	{r7, pc}

080a1104 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80a1104:	b580      	push	{r7, lr}
 80a1106:	b086      	sub	sp, #24
 80a1108:	af00      	add	r7, sp, #0
 80a110a:	60f8      	str	r0, [r7, #12]
 80a110c:	60b9      	str	r1, [r7, #8]
 80a110e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80a1110:	2300      	movs	r3, #0
 80a1112:	617b      	str	r3, [r7, #20]
 80a1114:	e00a      	b.n	80a112c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80a1116:	f3af 8000 	nop.w
 80a111a:	4601      	mov	r1, r0
 80a111c:	68bb      	ldr	r3, [r7, #8]
 80a111e:	1c5a      	adds	r2, r3, #1
 80a1120:	60ba      	str	r2, [r7, #8]
 80a1122:	b2ca      	uxtb	r2, r1
 80a1124:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80a1126:	697b      	ldr	r3, [r7, #20]
 80a1128:	3301      	adds	r3, #1
 80a112a:	617b      	str	r3, [r7, #20]
 80a112c:	697a      	ldr	r2, [r7, #20]
 80a112e:	687b      	ldr	r3, [r7, #4]
 80a1130:	429a      	cmp	r2, r3
 80a1132:	dbf0      	blt.n	80a1116 <_read+0x12>
	}

return len;
 80a1134:	687b      	ldr	r3, [r7, #4]
}
 80a1136:	4618      	mov	r0, r3
 80a1138:	3718      	adds	r7, #24
 80a113a:	46bd      	mov	sp, r7
 80a113c:	bd80      	pop	{r7, pc}

080a113e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80a113e:	b580      	push	{r7, lr}
 80a1140:	b086      	sub	sp, #24
 80a1142:	af00      	add	r7, sp, #0
 80a1144:	60f8      	str	r0, [r7, #12]
 80a1146:	60b9      	str	r1, [r7, #8]
 80a1148:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80a114a:	2300      	movs	r3, #0
 80a114c:	617b      	str	r3, [r7, #20]
 80a114e:	e009      	b.n	80a1164 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80a1150:	68bb      	ldr	r3, [r7, #8]
 80a1152:	1c5a      	adds	r2, r3, #1
 80a1154:	60ba      	str	r2, [r7, #8]
 80a1156:	781b      	ldrb	r3, [r3, #0]
 80a1158:	4618      	mov	r0, r3
 80a115a:	f7ff fc19 	bl	80a0990 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80a115e:	697b      	ldr	r3, [r7, #20]
 80a1160:	3301      	adds	r3, #1
 80a1162:	617b      	str	r3, [r7, #20]
 80a1164:	697a      	ldr	r2, [r7, #20]
 80a1166:	687b      	ldr	r3, [r7, #4]
 80a1168:	429a      	cmp	r2, r3
 80a116a:	dbf1      	blt.n	80a1150 <_write+0x12>
	}
	return len;
 80a116c:	687b      	ldr	r3, [r7, #4]
}
 80a116e:	4618      	mov	r0, r3
 80a1170:	3718      	adds	r7, #24
 80a1172:	46bd      	mov	sp, r7
 80a1174:	bd80      	pop	{r7, pc}

080a1176 <_close>:

int _close(int file)
{
 80a1176:	b480      	push	{r7}
 80a1178:	b083      	sub	sp, #12
 80a117a:	af00      	add	r7, sp, #0
 80a117c:	6078      	str	r0, [r7, #4]
	return -1;
 80a117e:	f04f 33ff 	mov.w	r3, #4294967295
}
 80a1182:	4618      	mov	r0, r3
 80a1184:	370c      	adds	r7, #12
 80a1186:	46bd      	mov	sp, r7
 80a1188:	f85d 7b04 	ldr.w	r7, [sp], #4
 80a118c:	4770      	bx	lr

080a118e <_fstat>:


int _fstat(int file, struct stat *st)
{
 80a118e:	b480      	push	{r7}
 80a1190:	b083      	sub	sp, #12
 80a1192:	af00      	add	r7, sp, #0
 80a1194:	6078      	str	r0, [r7, #4]
 80a1196:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80a1198:	683b      	ldr	r3, [r7, #0]
 80a119a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80a119e:	605a      	str	r2, [r3, #4]
	return 0;
 80a11a0:	2300      	movs	r3, #0
}
 80a11a2:	4618      	mov	r0, r3
 80a11a4:	370c      	adds	r7, #12
 80a11a6:	46bd      	mov	sp, r7
 80a11a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80a11ac:	4770      	bx	lr

080a11ae <_isatty>:

int _isatty(int file)
{
 80a11ae:	b480      	push	{r7}
 80a11b0:	b083      	sub	sp, #12
 80a11b2:	af00      	add	r7, sp, #0
 80a11b4:	6078      	str	r0, [r7, #4]
	return 1;
 80a11b6:	2301      	movs	r3, #1
}
 80a11b8:	4618      	mov	r0, r3
 80a11ba:	370c      	adds	r7, #12
 80a11bc:	46bd      	mov	sp, r7
 80a11be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80a11c2:	4770      	bx	lr

080a11c4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80a11c4:	b480      	push	{r7}
 80a11c6:	b085      	sub	sp, #20
 80a11c8:	af00      	add	r7, sp, #0
 80a11ca:	60f8      	str	r0, [r7, #12]
 80a11cc:	60b9      	str	r1, [r7, #8]
 80a11ce:	607a      	str	r2, [r7, #4]
	return 0;
 80a11d0:	2300      	movs	r3, #0
}
 80a11d2:	4618      	mov	r0, r3
 80a11d4:	3714      	adds	r7, #20
 80a11d6:	46bd      	mov	sp, r7
 80a11d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80a11dc:	4770      	bx	lr
	...

080a11e0 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80a11e0:	b580      	push	{r7, lr}
 80a11e2:	b084      	sub	sp, #16
 80a11e4:	af00      	add	r7, sp, #0
 80a11e6:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80a11e8:	4b11      	ldr	r3, [pc, #68]	; (80a1230 <_sbrk+0x50>)
 80a11ea:	681b      	ldr	r3, [r3, #0]
 80a11ec:	2b00      	cmp	r3, #0
 80a11ee:	d102      	bne.n	80a11f6 <_sbrk+0x16>
		heap_end = &end;
 80a11f0:	4b0f      	ldr	r3, [pc, #60]	; (80a1230 <_sbrk+0x50>)
 80a11f2:	4a10      	ldr	r2, [pc, #64]	; (80a1234 <_sbrk+0x54>)
 80a11f4:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80a11f6:	4b0e      	ldr	r3, [pc, #56]	; (80a1230 <_sbrk+0x50>)
 80a11f8:	681b      	ldr	r3, [r3, #0]
 80a11fa:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80a11fc:	4b0c      	ldr	r3, [pc, #48]	; (80a1230 <_sbrk+0x50>)
 80a11fe:	681a      	ldr	r2, [r3, #0]
 80a1200:	687b      	ldr	r3, [r7, #4]
 80a1202:	4413      	add	r3, r2
 80a1204:	466a      	mov	r2, sp
 80a1206:	4293      	cmp	r3, r2
 80a1208:	d907      	bls.n	80a121a <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80a120a:	f002 fce1 	bl	80a3bd0 <__errno>
 80a120e:	4602      	mov	r2, r0
 80a1210:	230c      	movs	r3, #12
 80a1212:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 80a1214:	f04f 33ff 	mov.w	r3, #4294967295
 80a1218:	e006      	b.n	80a1228 <_sbrk+0x48>
	}

	heap_end += incr;
 80a121a:	4b05      	ldr	r3, [pc, #20]	; (80a1230 <_sbrk+0x50>)
 80a121c:	681a      	ldr	r2, [r3, #0]
 80a121e:	687b      	ldr	r3, [r7, #4]
 80a1220:	4413      	add	r3, r2
 80a1222:	4a03      	ldr	r2, [pc, #12]	; (80a1230 <_sbrk+0x50>)
 80a1224:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80a1226:	68fb      	ldr	r3, [r7, #12]
}
 80a1228:	4618      	mov	r0, r3
 80a122a:	3710      	adds	r7, #16
 80a122c:	46bd      	mov	sp, r7
 80a122e:	bd80      	pop	{r7, pc}
 80a1230:	2000008c 	.word	0x2000008c
 80a1234:	20000530 	.word	0x20000530

080a1238 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80a1238:	b480      	push	{r7}
 80a123a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80a123c:	4b07      	ldr	r3, [pc, #28]	; (80a125c <SystemInit+0x24>)
 80a123e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80a1242:	4a06      	ldr	r2, [pc, #24]	; (80a125c <SystemInit+0x24>)
 80a1244:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80a1248:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = 0x080A0400; /* Vector Table Relocation in Internal FLASH */
 80a124c:	4b03      	ldr	r3, [pc, #12]	; (80a125c <SystemInit+0x24>)
 80a124e:	4a04      	ldr	r2, [pc, #16]	; (80a1260 <SystemInit+0x28>)
 80a1250:	609a      	str	r2, [r3, #8]
#endif
}
 80a1252:	bf00      	nop
 80a1254:	46bd      	mov	sp, r7
 80a1256:	f85d 7b04 	ldr.w	r7, [sp], #4
 80a125a:	4770      	bx	lr
 80a125c:	e000ed00 	.word	0xe000ed00
 80a1260:	080a0400 	.word	0x080a0400

080a1264 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 80a1264:	f8df d034 	ldr.w	sp, [pc, #52]	; 80a129c <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80a1268:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80a126a:	e003      	b.n	80a1274 <LoopCopyDataInit>

080a126c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80a126c:	4b0c      	ldr	r3, [pc, #48]	; (80a12a0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80a126e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80a1270:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80a1272:	3104      	adds	r1, #4

080a1274 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80a1274:	480b      	ldr	r0, [pc, #44]	; (80a12a4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80a1276:	4b0c      	ldr	r3, [pc, #48]	; (80a12a8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80a1278:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80a127a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80a127c:	d3f6      	bcc.n	80a126c <CopyDataInit>
  ldr  r2, =_sbss
 80a127e:	4a0b      	ldr	r2, [pc, #44]	; (80a12ac <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80a1280:	e002      	b.n	80a1288 <LoopFillZerobss>

080a1282 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80a1282:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80a1284:	f842 3b04 	str.w	r3, [r2], #4

080a1288 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80a1288:	4b09      	ldr	r3, [pc, #36]	; (80a12b0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80a128a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80a128c:	d3f9      	bcc.n	80a1282 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80a128e:	f7ff ffd3 	bl	80a1238 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80a1292:	f002 fca3 	bl	80a3bdc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80a1296:	f7ff fb8d 	bl	80a09b4 <main>
  bx  lr    
 80a129a:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80a129c:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 80a12a0:	080a4afc 	.word	0x080a4afc
  ldr  r0, =_sdata
 80a12a4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80a12a8:	20000070 	.word	0x20000070
  ldr  r2, =_sbss
 80a12ac:	20000070 	.word	0x20000070
  ldr  r3, = _ebss
 80a12b0:	20000530 	.word	0x20000530

080a12b4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80a12b4:	e7fe      	b.n	80a12b4 <ADC_IRQHandler>
	...

080a12b8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80a12b8:	b580      	push	{r7, lr}
 80a12ba:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80a12bc:	4b0e      	ldr	r3, [pc, #56]	; (80a12f8 <HAL_Init+0x40>)
 80a12be:	681b      	ldr	r3, [r3, #0]
 80a12c0:	4a0d      	ldr	r2, [pc, #52]	; (80a12f8 <HAL_Init+0x40>)
 80a12c2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80a12c6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80a12c8:	4b0b      	ldr	r3, [pc, #44]	; (80a12f8 <HAL_Init+0x40>)
 80a12ca:	681b      	ldr	r3, [r3, #0]
 80a12cc:	4a0a      	ldr	r2, [pc, #40]	; (80a12f8 <HAL_Init+0x40>)
 80a12ce:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80a12d2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80a12d4:	4b08      	ldr	r3, [pc, #32]	; (80a12f8 <HAL_Init+0x40>)
 80a12d6:	681b      	ldr	r3, [r3, #0]
 80a12d8:	4a07      	ldr	r2, [pc, #28]	; (80a12f8 <HAL_Init+0x40>)
 80a12da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80a12de:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80a12e0:	2003      	movs	r0, #3
 80a12e2:	f000 f92f 	bl	80a1544 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80a12e6:	2000      	movs	r0, #0
 80a12e8:	f000 f808 	bl	80a12fc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80a12ec:	f7ff fd4c 	bl	80a0d88 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80a12f0:	2300      	movs	r3, #0
}
 80a12f2:	4618      	mov	r0, r3
 80a12f4:	bd80      	pop	{r7, pc}
 80a12f6:	bf00      	nop
 80a12f8:	40023c00 	.word	0x40023c00

080a12fc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80a12fc:	b580      	push	{r7, lr}
 80a12fe:	b082      	sub	sp, #8
 80a1300:	af00      	add	r7, sp, #0
 80a1302:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80a1304:	4b12      	ldr	r3, [pc, #72]	; (80a1350 <HAL_InitTick+0x54>)
 80a1306:	681a      	ldr	r2, [r3, #0]
 80a1308:	4b12      	ldr	r3, [pc, #72]	; (80a1354 <HAL_InitTick+0x58>)
 80a130a:	781b      	ldrb	r3, [r3, #0]
 80a130c:	4619      	mov	r1, r3
 80a130e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a1312:	fbb3 f3f1 	udiv	r3, r3, r1
 80a1316:	fbb2 f3f3 	udiv	r3, r2, r3
 80a131a:	4618      	mov	r0, r3
 80a131c:	f000 f939 	bl	80a1592 <HAL_SYSTICK_Config>
 80a1320:	4603      	mov	r3, r0
 80a1322:	2b00      	cmp	r3, #0
 80a1324:	d001      	beq.n	80a132a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80a1326:	2301      	movs	r3, #1
 80a1328:	e00e      	b.n	80a1348 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80a132a:	687b      	ldr	r3, [r7, #4]
 80a132c:	2b0f      	cmp	r3, #15
 80a132e:	d80a      	bhi.n	80a1346 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80a1330:	2200      	movs	r2, #0
 80a1332:	6879      	ldr	r1, [r7, #4]
 80a1334:	f04f 30ff 	mov.w	r0, #4294967295
 80a1338:	f000 f90f 	bl	80a155a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80a133c:	4a06      	ldr	r2, [pc, #24]	; (80a1358 <HAL_InitTick+0x5c>)
 80a133e:	687b      	ldr	r3, [r7, #4]
 80a1340:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80a1342:	2300      	movs	r3, #0
 80a1344:	e000      	b.n	80a1348 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80a1346:	2301      	movs	r3, #1
}
 80a1348:	4618      	mov	r0, r3
 80a134a:	3708      	adds	r7, #8
 80a134c:	46bd      	mov	sp, r7
 80a134e:	bd80      	pop	{r7, pc}
 80a1350:	20000000 	.word	0x20000000
 80a1354:	20000008 	.word	0x20000008
 80a1358:	20000004 	.word	0x20000004

080a135c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80a135c:	b480      	push	{r7}
 80a135e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80a1360:	4b06      	ldr	r3, [pc, #24]	; (80a137c <HAL_IncTick+0x20>)
 80a1362:	781b      	ldrb	r3, [r3, #0]
 80a1364:	461a      	mov	r2, r3
 80a1366:	4b06      	ldr	r3, [pc, #24]	; (80a1380 <HAL_IncTick+0x24>)
 80a1368:	681b      	ldr	r3, [r3, #0]
 80a136a:	4413      	add	r3, r2
 80a136c:	4a04      	ldr	r2, [pc, #16]	; (80a1380 <HAL_IncTick+0x24>)
 80a136e:	6013      	str	r3, [r2, #0]
}
 80a1370:	bf00      	nop
 80a1372:	46bd      	mov	sp, r7
 80a1374:	f85d 7b04 	ldr.w	r7, [sp], #4
 80a1378:	4770      	bx	lr
 80a137a:	bf00      	nop
 80a137c:	20000008 	.word	0x20000008
 80a1380:	20000528 	.word	0x20000528

080a1384 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80a1384:	b480      	push	{r7}
 80a1386:	af00      	add	r7, sp, #0
  return uwTick;
 80a1388:	4b03      	ldr	r3, [pc, #12]	; (80a1398 <HAL_GetTick+0x14>)
 80a138a:	681b      	ldr	r3, [r3, #0]
}
 80a138c:	4618      	mov	r0, r3
 80a138e:	46bd      	mov	sp, r7
 80a1390:	f85d 7b04 	ldr.w	r7, [sp], #4
 80a1394:	4770      	bx	lr
 80a1396:	bf00      	nop
 80a1398:	20000528 	.word	0x20000528

080a139c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80a139c:	b580      	push	{r7, lr}
 80a139e:	b084      	sub	sp, #16
 80a13a0:	af00      	add	r7, sp, #0
 80a13a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80a13a4:	f7ff ffee 	bl	80a1384 <HAL_GetTick>
 80a13a8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80a13aa:	687b      	ldr	r3, [r7, #4]
 80a13ac:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80a13ae:	68fb      	ldr	r3, [r7, #12]
 80a13b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80a13b4:	d005      	beq.n	80a13c2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80a13b6:	4b09      	ldr	r3, [pc, #36]	; (80a13dc <HAL_Delay+0x40>)
 80a13b8:	781b      	ldrb	r3, [r3, #0]
 80a13ba:	461a      	mov	r2, r3
 80a13bc:	68fb      	ldr	r3, [r7, #12]
 80a13be:	4413      	add	r3, r2
 80a13c0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80a13c2:	bf00      	nop
 80a13c4:	f7ff ffde 	bl	80a1384 <HAL_GetTick>
 80a13c8:	4602      	mov	r2, r0
 80a13ca:	68bb      	ldr	r3, [r7, #8]
 80a13cc:	1ad3      	subs	r3, r2, r3
 80a13ce:	68fa      	ldr	r2, [r7, #12]
 80a13d0:	429a      	cmp	r2, r3
 80a13d2:	d8f7      	bhi.n	80a13c4 <HAL_Delay+0x28>
  {
  }
}
 80a13d4:	bf00      	nop
 80a13d6:	3710      	adds	r7, #16
 80a13d8:	46bd      	mov	sp, r7
 80a13da:	bd80      	pop	{r7, pc}
 80a13dc:	20000008 	.word	0x20000008

080a13e0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80a13e0:	b480      	push	{r7}
 80a13e2:	b085      	sub	sp, #20
 80a13e4:	af00      	add	r7, sp, #0
 80a13e6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80a13e8:	687b      	ldr	r3, [r7, #4]
 80a13ea:	f003 0307 	and.w	r3, r3, #7
 80a13ee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80a13f0:	4b0c      	ldr	r3, [pc, #48]	; (80a1424 <__NVIC_SetPriorityGrouping+0x44>)
 80a13f2:	68db      	ldr	r3, [r3, #12]
 80a13f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80a13f6:	68ba      	ldr	r2, [r7, #8]
 80a13f8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80a13fc:	4013      	ands	r3, r2
 80a13fe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80a1400:	68fb      	ldr	r3, [r7, #12]
 80a1402:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80a1404:	68bb      	ldr	r3, [r7, #8]
 80a1406:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80a1408:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80a140c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80a1410:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80a1412:	4a04      	ldr	r2, [pc, #16]	; (80a1424 <__NVIC_SetPriorityGrouping+0x44>)
 80a1414:	68bb      	ldr	r3, [r7, #8]
 80a1416:	60d3      	str	r3, [r2, #12]
}
 80a1418:	bf00      	nop
 80a141a:	3714      	adds	r7, #20
 80a141c:	46bd      	mov	sp, r7
 80a141e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80a1422:	4770      	bx	lr
 80a1424:	e000ed00 	.word	0xe000ed00

080a1428 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80a1428:	b480      	push	{r7}
 80a142a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80a142c:	4b04      	ldr	r3, [pc, #16]	; (80a1440 <__NVIC_GetPriorityGrouping+0x18>)
 80a142e:	68db      	ldr	r3, [r3, #12]
 80a1430:	0a1b      	lsrs	r3, r3, #8
 80a1432:	f003 0307 	and.w	r3, r3, #7
}
 80a1436:	4618      	mov	r0, r3
 80a1438:	46bd      	mov	sp, r7
 80a143a:	f85d 7b04 	ldr.w	r7, [sp], #4
 80a143e:	4770      	bx	lr
 80a1440:	e000ed00 	.word	0xe000ed00

080a1444 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80a1444:	b480      	push	{r7}
 80a1446:	b083      	sub	sp, #12
 80a1448:	af00      	add	r7, sp, #0
 80a144a:	4603      	mov	r3, r0
 80a144c:	6039      	str	r1, [r7, #0]
 80a144e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80a1450:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80a1454:	2b00      	cmp	r3, #0
 80a1456:	db0a      	blt.n	80a146e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80a1458:	683b      	ldr	r3, [r7, #0]
 80a145a:	b2da      	uxtb	r2, r3
 80a145c:	490c      	ldr	r1, [pc, #48]	; (80a1490 <__NVIC_SetPriority+0x4c>)
 80a145e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80a1462:	0112      	lsls	r2, r2, #4
 80a1464:	b2d2      	uxtb	r2, r2
 80a1466:	440b      	add	r3, r1
 80a1468:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80a146c:	e00a      	b.n	80a1484 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80a146e:	683b      	ldr	r3, [r7, #0]
 80a1470:	b2da      	uxtb	r2, r3
 80a1472:	4908      	ldr	r1, [pc, #32]	; (80a1494 <__NVIC_SetPriority+0x50>)
 80a1474:	79fb      	ldrb	r3, [r7, #7]
 80a1476:	f003 030f 	and.w	r3, r3, #15
 80a147a:	3b04      	subs	r3, #4
 80a147c:	0112      	lsls	r2, r2, #4
 80a147e:	b2d2      	uxtb	r2, r2
 80a1480:	440b      	add	r3, r1
 80a1482:	761a      	strb	r2, [r3, #24]
}
 80a1484:	bf00      	nop
 80a1486:	370c      	adds	r7, #12
 80a1488:	46bd      	mov	sp, r7
 80a148a:	f85d 7b04 	ldr.w	r7, [sp], #4
 80a148e:	4770      	bx	lr
 80a1490:	e000e100 	.word	0xe000e100
 80a1494:	e000ed00 	.word	0xe000ed00

080a1498 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80a1498:	b480      	push	{r7}
 80a149a:	b089      	sub	sp, #36	; 0x24
 80a149c:	af00      	add	r7, sp, #0
 80a149e:	60f8      	str	r0, [r7, #12]
 80a14a0:	60b9      	str	r1, [r7, #8]
 80a14a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80a14a4:	68fb      	ldr	r3, [r7, #12]
 80a14a6:	f003 0307 	and.w	r3, r3, #7
 80a14aa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80a14ac:	69fb      	ldr	r3, [r7, #28]
 80a14ae:	f1c3 0307 	rsb	r3, r3, #7
 80a14b2:	2b04      	cmp	r3, #4
 80a14b4:	bf28      	it	cs
 80a14b6:	2304      	movcs	r3, #4
 80a14b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80a14ba:	69fb      	ldr	r3, [r7, #28]
 80a14bc:	3304      	adds	r3, #4
 80a14be:	2b06      	cmp	r3, #6
 80a14c0:	d902      	bls.n	80a14c8 <NVIC_EncodePriority+0x30>
 80a14c2:	69fb      	ldr	r3, [r7, #28]
 80a14c4:	3b03      	subs	r3, #3
 80a14c6:	e000      	b.n	80a14ca <NVIC_EncodePriority+0x32>
 80a14c8:	2300      	movs	r3, #0
 80a14ca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80a14cc:	f04f 32ff 	mov.w	r2, #4294967295
 80a14d0:	69bb      	ldr	r3, [r7, #24]
 80a14d2:	fa02 f303 	lsl.w	r3, r2, r3
 80a14d6:	43da      	mvns	r2, r3
 80a14d8:	68bb      	ldr	r3, [r7, #8]
 80a14da:	401a      	ands	r2, r3
 80a14dc:	697b      	ldr	r3, [r7, #20]
 80a14de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80a14e0:	f04f 31ff 	mov.w	r1, #4294967295
 80a14e4:	697b      	ldr	r3, [r7, #20]
 80a14e6:	fa01 f303 	lsl.w	r3, r1, r3
 80a14ea:	43d9      	mvns	r1, r3
 80a14ec:	687b      	ldr	r3, [r7, #4]
 80a14ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80a14f0:	4313      	orrs	r3, r2
         );
}
 80a14f2:	4618      	mov	r0, r3
 80a14f4:	3724      	adds	r7, #36	; 0x24
 80a14f6:	46bd      	mov	sp, r7
 80a14f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80a14fc:	4770      	bx	lr
	...

080a1500 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80a1500:	b580      	push	{r7, lr}
 80a1502:	b082      	sub	sp, #8
 80a1504:	af00      	add	r7, sp, #0
 80a1506:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80a1508:	687b      	ldr	r3, [r7, #4]
 80a150a:	3b01      	subs	r3, #1
 80a150c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80a1510:	d301      	bcc.n	80a1516 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80a1512:	2301      	movs	r3, #1
 80a1514:	e00f      	b.n	80a1536 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80a1516:	4a0a      	ldr	r2, [pc, #40]	; (80a1540 <SysTick_Config+0x40>)
 80a1518:	687b      	ldr	r3, [r7, #4]
 80a151a:	3b01      	subs	r3, #1
 80a151c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80a151e:	210f      	movs	r1, #15
 80a1520:	f04f 30ff 	mov.w	r0, #4294967295
 80a1524:	f7ff ff8e 	bl	80a1444 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80a1528:	4b05      	ldr	r3, [pc, #20]	; (80a1540 <SysTick_Config+0x40>)
 80a152a:	2200      	movs	r2, #0
 80a152c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80a152e:	4b04      	ldr	r3, [pc, #16]	; (80a1540 <SysTick_Config+0x40>)
 80a1530:	2207      	movs	r2, #7
 80a1532:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80a1534:	2300      	movs	r3, #0
}
 80a1536:	4618      	mov	r0, r3
 80a1538:	3708      	adds	r7, #8
 80a153a:	46bd      	mov	sp, r7
 80a153c:	bd80      	pop	{r7, pc}
 80a153e:	bf00      	nop
 80a1540:	e000e010 	.word	0xe000e010

080a1544 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80a1544:	b580      	push	{r7, lr}
 80a1546:	b082      	sub	sp, #8
 80a1548:	af00      	add	r7, sp, #0
 80a154a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80a154c:	6878      	ldr	r0, [r7, #4]
 80a154e:	f7ff ff47 	bl	80a13e0 <__NVIC_SetPriorityGrouping>
}
 80a1552:	bf00      	nop
 80a1554:	3708      	adds	r7, #8
 80a1556:	46bd      	mov	sp, r7
 80a1558:	bd80      	pop	{r7, pc}

080a155a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80a155a:	b580      	push	{r7, lr}
 80a155c:	b086      	sub	sp, #24
 80a155e:	af00      	add	r7, sp, #0
 80a1560:	4603      	mov	r3, r0
 80a1562:	60b9      	str	r1, [r7, #8]
 80a1564:	607a      	str	r2, [r7, #4]
 80a1566:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80a1568:	2300      	movs	r3, #0
 80a156a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80a156c:	f7ff ff5c 	bl	80a1428 <__NVIC_GetPriorityGrouping>
 80a1570:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80a1572:	687a      	ldr	r2, [r7, #4]
 80a1574:	68b9      	ldr	r1, [r7, #8]
 80a1576:	6978      	ldr	r0, [r7, #20]
 80a1578:	f7ff ff8e 	bl	80a1498 <NVIC_EncodePriority>
 80a157c:	4602      	mov	r2, r0
 80a157e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80a1582:	4611      	mov	r1, r2
 80a1584:	4618      	mov	r0, r3
 80a1586:	f7ff ff5d 	bl	80a1444 <__NVIC_SetPriority>
}
 80a158a:	bf00      	nop
 80a158c:	3718      	adds	r7, #24
 80a158e:	46bd      	mov	sp, r7
 80a1590:	bd80      	pop	{r7, pc}

080a1592 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80a1592:	b580      	push	{r7, lr}
 80a1594:	b082      	sub	sp, #8
 80a1596:	af00      	add	r7, sp, #0
 80a1598:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80a159a:	6878      	ldr	r0, [r7, #4]
 80a159c:	f7ff ffb0 	bl	80a1500 <SysTick_Config>
 80a15a0:	4603      	mov	r3, r0
}
 80a15a2:	4618      	mov	r0, r3
 80a15a4:	3708      	adds	r7, #8
 80a15a6:	46bd      	mov	sp, r7
 80a15a8:	bd80      	pop	{r7, pc}
	...

080a15ac <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80a15ac:	b580      	push	{r7, lr}
 80a15ae:	b088      	sub	sp, #32
 80a15b0:	af00      	add	r7, sp, #0
 80a15b2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1 = 0U, phyreg = 0U;
 80a15b4:	2300      	movs	r3, #0
 80a15b6:	61fb      	str	r3, [r7, #28]
 80a15b8:	2300      	movs	r3, #0
 80a15ba:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000U;
 80a15bc:	4baa      	ldr	r3, [pc, #680]	; (80a1868 <HAL_ETH_Init+0x2bc>)
 80a15be:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0U;
 80a15c0:	2300      	movs	r3, #0
 80a15c2:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 80a15c4:	2300      	movs	r3, #0
 80a15c6:	613b      	str	r3, [r7, #16]
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 80a15c8:	687b      	ldr	r3, [r7, #4]
 80a15ca:	2b00      	cmp	r3, #0
 80a15cc:	d101      	bne.n	80a15d2 <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 80a15ce:	2301      	movs	r3, #1
 80a15d0:	e185      	b.n	80a18de <HAL_ETH_Init+0x332>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
  
  if(heth->State == HAL_ETH_STATE_RESET)
 80a15d2:	687b      	ldr	r3, [r7, #4]
 80a15d4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80a15d8:	b2db      	uxtb	r3, r3
 80a15da:	2b00      	cmp	r3, #0
 80a15dc:	d106      	bne.n	80a15ec <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 80a15de:	687b      	ldr	r3, [r7, #4]
 80a15e0:	2200      	movs	r2, #0
 80a15e2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80a15e6:	6878      	ldr	r0, [r7, #4]
 80a15e8:	f7ff fbf6 	bl	80a0dd8 <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
  
  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80a15ec:	2300      	movs	r3, #0
 80a15ee:	60bb      	str	r3, [r7, #8]
 80a15f0:	4b9e      	ldr	r3, [pc, #632]	; (80a186c <HAL_ETH_Init+0x2c0>)
 80a15f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80a15f4:	4a9d      	ldr	r2, [pc, #628]	; (80a186c <HAL_ETH_Init+0x2c0>)
 80a15f6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80a15fa:	6453      	str	r3, [r2, #68]	; 0x44
 80a15fc:	4b9b      	ldr	r3, [pc, #620]	; (80a186c <HAL_ETH_Init+0x2c0>)
 80a15fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80a1600:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80a1604:	60bb      	str	r3, [r7, #8]
 80a1606:	68bb      	ldr	r3, [r7, #8]
  
  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 80a1608:	4b99      	ldr	r3, [pc, #612]	; (80a1870 <HAL_ETH_Init+0x2c4>)
 80a160a:	685b      	ldr	r3, [r3, #4]
 80a160c:	4a98      	ldr	r2, [pc, #608]	; (80a1870 <HAL_ETH_Init+0x2c4>)
 80a160e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80a1612:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 80a1614:	4b96      	ldr	r3, [pc, #600]	; (80a1870 <HAL_ETH_Init+0x2c4>)
 80a1616:	685a      	ldr	r2, [r3, #4]
 80a1618:	687b      	ldr	r3, [r7, #4]
 80a161a:	6a1b      	ldr	r3, [r3, #32]
 80a161c:	4994      	ldr	r1, [pc, #592]	; (80a1870 <HAL_ETH_Init+0x2c4>)
 80a161e:	4313      	orrs	r3, r2
 80a1620:	604b      	str	r3, [r1, #4]
  
  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 80a1622:	687b      	ldr	r3, [r7, #4]
 80a1624:	681b      	ldr	r3, [r3, #0]
 80a1626:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80a162a:	681a      	ldr	r2, [r3, #0]
 80a162c:	687b      	ldr	r3, [r7, #4]
 80a162e:	681b      	ldr	r3, [r3, #0]
 80a1630:	f042 0201 	orr.w	r2, r2, #1
 80a1634:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80a1638:	601a      	str	r2, [r3, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 80a163a:	f7ff fea3 	bl	80a1384 <HAL_GetTick>
 80a163e:	6178      	str	r0, [r7, #20]
  
  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 80a1640:	e011      	b.n	80a1666 <HAL_ETH_Init+0xba>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 80a1642:	f7ff fe9f 	bl	80a1384 <HAL_GetTick>
 80a1646:	4602      	mov	r2, r0
 80a1648:	697b      	ldr	r3, [r7, #20]
 80a164a:	1ad3      	subs	r3, r2, r3
 80a164c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80a1650:	d909      	bls.n	80a1666 <HAL_ETH_Init+0xba>
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 80a1652:	687b      	ldr	r3, [r7, #4]
 80a1654:	2203      	movs	r2, #3
 80a1656:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 80a165a:	687b      	ldr	r3, [r7, #4]
 80a165c:	2200      	movs	r2, #0
 80a165e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are  
         not available, please check your external PHY or the IO configuration */
      return HAL_TIMEOUT;
 80a1662:	2303      	movs	r3, #3
 80a1664:	e13b      	b.n	80a18de <HAL_ETH_Init+0x332>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 80a1666:	687b      	ldr	r3, [r7, #4]
 80a1668:	681b      	ldr	r3, [r3, #0]
 80a166a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80a166e:	681b      	ldr	r3, [r3, #0]
 80a1670:	f003 0301 	and.w	r3, r3, #1
 80a1674:	2b00      	cmp	r3, #0
 80a1676:	d1e4      	bne.n	80a1642 <HAL_ETH_Init+0x96>
    }
  }
  
  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = (heth->Instance)->MACMIIAR;
 80a1678:	687b      	ldr	r3, [r7, #4]
 80a167a:	681b      	ldr	r3, [r3, #0]
 80a167c:	691b      	ldr	r3, [r3, #16]
 80a167e:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg1 &= ETH_MACMIIAR_CR_MASK;
 80a1680:	69fb      	ldr	r3, [r7, #28]
 80a1682:	f023 031c 	bic.w	r3, r3, #28
 80a1686:	61fb      	str	r3, [r7, #28]
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 80a1688:	f001 fb0c 	bl	80a2ca4 <HAL_RCC_GetHCLKFreq>
 80a168c:	61b8      	str	r0, [r7, #24]
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 80a168e:	69bb      	ldr	r3, [r7, #24]
 80a1690:	4a78      	ldr	r2, [pc, #480]	; (80a1874 <HAL_ETH_Init+0x2c8>)
 80a1692:	4293      	cmp	r3, r2
 80a1694:	d908      	bls.n	80a16a8 <HAL_ETH_Init+0xfc>
 80a1696:	69bb      	ldr	r3, [r7, #24]
 80a1698:	4a77      	ldr	r2, [pc, #476]	; (80a1878 <HAL_ETH_Init+0x2cc>)
 80a169a:	4293      	cmp	r3, r2
 80a169c:	d804      	bhi.n	80a16a8 <HAL_ETH_Init+0xfc>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 80a169e:	69fb      	ldr	r3, [r7, #28]
 80a16a0:	f043 0308 	orr.w	r3, r3, #8
 80a16a4:	61fb      	str	r3, [r7, #28]
 80a16a6:	e027      	b.n	80a16f8 <HAL_ETH_Init+0x14c>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 80a16a8:	69bb      	ldr	r3, [r7, #24]
 80a16aa:	4a73      	ldr	r2, [pc, #460]	; (80a1878 <HAL_ETH_Init+0x2cc>)
 80a16ac:	4293      	cmp	r3, r2
 80a16ae:	d908      	bls.n	80a16c2 <HAL_ETH_Init+0x116>
 80a16b0:	69bb      	ldr	r3, [r7, #24]
 80a16b2:	4a72      	ldr	r2, [pc, #456]	; (80a187c <HAL_ETH_Init+0x2d0>)
 80a16b4:	4293      	cmp	r3, r2
 80a16b6:	d804      	bhi.n	80a16c2 <HAL_ETH_Init+0x116>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 80a16b8:	69fb      	ldr	r3, [r7, #28]
 80a16ba:	f043 030c 	orr.w	r3, r3, #12
 80a16be:	61fb      	str	r3, [r7, #28]
 80a16c0:	e01a      	b.n	80a16f8 <HAL_ETH_Init+0x14c>
  }  
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 80a16c2:	69bb      	ldr	r3, [r7, #24]
 80a16c4:	4a6d      	ldr	r2, [pc, #436]	; (80a187c <HAL_ETH_Init+0x2d0>)
 80a16c6:	4293      	cmp	r3, r2
 80a16c8:	d903      	bls.n	80a16d2 <HAL_ETH_Init+0x126>
 80a16ca:	69bb      	ldr	r3, [r7, #24]
 80a16cc:	4a6c      	ldr	r2, [pc, #432]	; (80a1880 <HAL_ETH_Init+0x2d4>)
 80a16ce:	4293      	cmp	r3, r2
 80a16d0:	d911      	bls.n	80a16f6 <HAL_ETH_Init+0x14a>
  {
    /* CSR Clock Range between 60-100 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }  
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 80a16d2:	69bb      	ldr	r3, [r7, #24]
 80a16d4:	4a6a      	ldr	r2, [pc, #424]	; (80a1880 <HAL_ETH_Init+0x2d4>)
 80a16d6:	4293      	cmp	r3, r2
 80a16d8:	d908      	bls.n	80a16ec <HAL_ETH_Init+0x140>
 80a16da:	69bb      	ldr	r3, [r7, #24]
 80a16dc:	4a69      	ldr	r2, [pc, #420]	; (80a1884 <HAL_ETH_Init+0x2d8>)
 80a16de:	4293      	cmp	r3, r2
 80a16e0:	d804      	bhi.n	80a16ec <HAL_ETH_Init+0x140>
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 80a16e2:	69fb      	ldr	r3, [r7, #28]
 80a16e4:	f043 0304 	orr.w	r3, r3, #4
 80a16e8:	61fb      	str	r3, [r7, #28]
 80a16ea:	e005      	b.n	80a16f8 <HAL_ETH_Init+0x14c>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 183000000)) */
  {
    /* CSR Clock Range between 150-183 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 80a16ec:	69fb      	ldr	r3, [r7, #28]
 80a16ee:	f043 0310 	orr.w	r3, r3, #16
 80a16f2:	61fb      	str	r3, [r7, #28]
 80a16f4:	e000      	b.n	80a16f8 <HAL_ETH_Init+0x14c>
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 80a16f6:	bf00      	nop
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg1;
 80a16f8:	687b      	ldr	r3, [r7, #4]
 80a16fa:	681b      	ldr	r3, [r3, #0]
 80a16fc:	69fa      	ldr	r2, [r7, #28]
 80a16fe:	611a      	str	r2, [r3, #16]
  
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 80a1700:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80a1704:	2100      	movs	r1, #0
 80a1706:	6878      	ldr	r0, [r7, #4]
 80a1708:	f000 f956 	bl	80a19b8 <HAL_ETH_WritePHYRegister>
 80a170c:	4603      	mov	r3, r0
 80a170e:	2b00      	cmp	r3, #0
 80a1710:	d00b      	beq.n	80a172a <HAL_ETH_Init+0x17e>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 80a1712:	2301      	movs	r3, #1
 80a1714:	613b      	str	r3, [r7, #16]
    
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 80a1716:	6939      	ldr	r1, [r7, #16]
 80a1718:	6878      	ldr	r0, [r7, #4]
 80a171a:	f000 f9b3 	bl	80a1a84 <ETH_MACDMAConfig>
    
    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 80a171e:	687b      	ldr	r3, [r7, #4]
 80a1720:	2201      	movs	r2, #1
 80a1722:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Return HAL_ERROR */
    return HAL_ERROR;
 80a1726:	2301      	movs	r3, #1
 80a1728:	e0d9      	b.n	80a18de <HAL_ETH_Init+0x332>
  }
  
  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 80a172a:	20ff      	movs	r0, #255	; 0xff
 80a172c:	f7ff fe36 	bl	80a139c <HAL_Delay>
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 80a1730:	687b      	ldr	r3, [r7, #4]
 80a1732:	685b      	ldr	r3, [r3, #4]
 80a1734:	2b00      	cmp	r3, #0
 80a1736:	f000 80a7 	beq.w	80a1888 <HAL_ETH_Init+0x2dc>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 80a173a:	f7ff fe23 	bl	80a1384 <HAL_GetTick>
 80a173e:	6178      	str	r0, [r7, #20]
    
    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 80a1740:	f107 030c 	add.w	r3, r7, #12
 80a1744:	461a      	mov	r2, r3
 80a1746:	2101      	movs	r1, #1
 80a1748:	6878      	ldr	r0, [r7, #4]
 80a174a:	f000 f8cd 	bl	80a18e8 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 80a174e:	f7ff fe19 	bl	80a1384 <HAL_GetTick>
 80a1752:	4602      	mov	r2, r0
 80a1754:	697b      	ldr	r3, [r7, #20]
 80a1756:	1ad3      	subs	r3, r2, r3
 80a1758:	f241 3288 	movw	r2, #5000	; 0x1388
 80a175c:	4293      	cmp	r3, r2
 80a175e:	d90f      	bls.n	80a1780 <HAL_ETH_Init+0x1d4>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 80a1760:	2301      	movs	r3, #1
 80a1762:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 80a1764:	6939      	ldr	r1, [r7, #16]
 80a1766:	6878      	ldr	r0, [r7, #4]
 80a1768:	f000 f98c 	bl	80a1a84 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 80a176c:	687b      	ldr	r3, [r7, #4]
 80a176e:	2201      	movs	r2, #1
 80a1770:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 80a1774:	687b      	ldr	r3, [r7, #4]
 80a1776:	2200      	movs	r2, #0
 80a1778:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 80a177c:	2303      	movs	r3, #3
 80a177e:	e0ae      	b.n	80a18de <HAL_ETH_Init+0x332>
      }
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 80a1780:	68fb      	ldr	r3, [r7, #12]
 80a1782:	f003 0304 	and.w	r3, r3, #4
 80a1786:	2b00      	cmp	r3, #0
 80a1788:	d0da      	beq.n	80a1740 <HAL_ETH_Init+0x194>

    
    /* Enable Auto-Negotiation */
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 80a178a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80a178e:	2100      	movs	r1, #0
 80a1790:	6878      	ldr	r0, [r7, #4]
 80a1792:	f000 f911 	bl	80a19b8 <HAL_ETH_WritePHYRegister>
 80a1796:	4603      	mov	r3, r0
 80a1798:	2b00      	cmp	r3, #0
 80a179a:	d00b      	beq.n	80a17b4 <HAL_ETH_Init+0x208>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 80a179c:	2301      	movs	r3, #1
 80a179e:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 80a17a0:	6939      	ldr	r1, [r7, #16]
 80a17a2:	6878      	ldr	r0, [r7, #4]
 80a17a4:	f000 f96e 	bl	80a1a84 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 80a17a8:	687b      	ldr	r3, [r7, #4]
 80a17aa:	2201      	movs	r2, #1
 80a17ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 80a17b0:	2301      	movs	r3, #1
 80a17b2:	e094      	b.n	80a18de <HAL_ETH_Init+0x332>
    }
    
    /* Get tick */
    tickstart = HAL_GetTick();
 80a17b4:	f7ff fde6 	bl	80a1384 <HAL_GetTick>
 80a17b8:	6178      	str	r0, [r7, #20]
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 80a17ba:	f107 030c 	add.w	r3, r7, #12
 80a17be:	461a      	mov	r2, r3
 80a17c0:	2101      	movs	r1, #1
 80a17c2:	6878      	ldr	r0, [r7, #4]
 80a17c4:	f000 f890 	bl	80a18e8 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 80a17c8:	f7ff fddc 	bl	80a1384 <HAL_GetTick>
 80a17cc:	4602      	mov	r2, r0
 80a17ce:	697b      	ldr	r3, [r7, #20]
 80a17d0:	1ad3      	subs	r3, r2, r3
 80a17d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80a17d6:	4293      	cmp	r3, r2
 80a17d8:	d90f      	bls.n	80a17fa <HAL_ETH_Init+0x24e>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 80a17da:	2301      	movs	r3, #1
 80a17dc:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 80a17de:	6939      	ldr	r1, [r7, #16]
 80a17e0:	6878      	ldr	r0, [r7, #4]
 80a17e2:	f000 f94f 	bl	80a1a84 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 80a17e6:	687b      	ldr	r3, [r7, #4]
 80a17e8:	2201      	movs	r2, #1
 80a17ea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 80a17ee:	687b      	ldr	r3, [r7, #4]
 80a17f0:	2200      	movs	r2, #0
 80a17f2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 80a17f6:	2303      	movs	r3, #3
 80a17f8:	e071      	b.n	80a18de <HAL_ETH_Init+0x332>
      }
      
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 80a17fa:	68fb      	ldr	r3, [r7, #12]
 80a17fc:	f003 0320 	and.w	r3, r3, #32
 80a1800:	2b00      	cmp	r3, #0
 80a1802:	d0da      	beq.n	80a17ba <HAL_ETH_Init+0x20e>
    
    /* Read the result of the auto-negotiation */
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 80a1804:	f107 030c 	add.w	r3, r7, #12
 80a1808:	461a      	mov	r2, r3
 80a180a:	211f      	movs	r1, #31
 80a180c:	6878      	ldr	r0, [r7, #4]
 80a180e:	f000 f86b 	bl	80a18e8 <HAL_ETH_ReadPHYRegister>
 80a1812:	4603      	mov	r3, r0
 80a1814:	2b00      	cmp	r3, #0
 80a1816:	d00b      	beq.n	80a1830 <HAL_ETH_Init+0x284>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 80a1818:	2301      	movs	r3, #1
 80a181a:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 80a181c:	6939      	ldr	r1, [r7, #16]
 80a181e:	6878      	ldr	r0, [r7, #4]
 80a1820:	f000 f930 	bl	80a1a84 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 80a1824:	687b      	ldr	r3, [r7, #4]
 80a1826:	2201      	movs	r2, #1
 80a1828:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 80a182c:	2301      	movs	r3, #1
 80a182e:	e056      	b.n	80a18de <HAL_ETH_Init+0x332>
    }
    
    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 80a1830:	68fb      	ldr	r3, [r7, #12]
 80a1832:	f003 0310 	and.w	r3, r3, #16
 80a1836:	2b00      	cmp	r3, #0
 80a1838:	d004      	beq.n	80a1844 <HAL_ETH_Init+0x298>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 80a183a:	687b      	ldr	r3, [r7, #4]
 80a183c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80a1840:	60da      	str	r2, [r3, #12]
 80a1842:	e002      	b.n	80a184a <HAL_ETH_Init+0x29e>
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 80a1844:	687b      	ldr	r3, [r7, #4]
 80a1846:	2200      	movs	r2, #0
 80a1848:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 80a184a:	68fb      	ldr	r3, [r7, #12]
 80a184c:	f003 0304 	and.w	r3, r3, #4
 80a1850:	2b00      	cmp	r3, #0
 80a1852:	d003      	beq.n	80a185c <HAL_ETH_Init+0x2b0>
    {  
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M; 
 80a1854:	687b      	ldr	r3, [r7, #4]
 80a1856:	2200      	movs	r2, #0
 80a1858:	609a      	str	r2, [r3, #8]
 80a185a:	e037      	b.n	80a18cc <HAL_ETH_Init+0x320>
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      (heth->Init).Speed = ETH_SPEED_100M;
 80a185c:	687b      	ldr	r3, [r7, #4]
 80a185e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80a1862:	609a      	str	r2, [r3, #8]
 80a1864:	e032      	b.n	80a18cc <HAL_ETH_Init+0x320>
 80a1866:	bf00      	nop
 80a1868:	03938700 	.word	0x03938700
 80a186c:	40023800 	.word	0x40023800
 80a1870:	40013800 	.word	0x40013800
 80a1874:	01312cff 	.word	0x01312cff
 80a1878:	02160ebf 	.word	0x02160ebf
 80a187c:	039386ff 	.word	0x039386ff
 80a1880:	05f5e0ff 	.word	0x05f5e0ff
 80a1884:	08f0d17f 	.word	0x08f0d17f
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
    
    /* Set MAC Speed and Duplex Mode */
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 80a1888:	687b      	ldr	r3, [r7, #4]
 80a188a:	68db      	ldr	r3, [r3, #12]
 80a188c:	08db      	lsrs	r3, r3, #3
 80a188e:	b29a      	uxth	r2, r3
                                                (uint16_t)((heth->Init).Speed >> 1U))) != HAL_OK)
 80a1890:	687b      	ldr	r3, [r7, #4]
 80a1892:	689b      	ldr	r3, [r3, #8]
 80a1894:	085b      	lsrs	r3, r3, #1
 80a1896:	b29b      	uxth	r3, r3
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 80a1898:	4313      	orrs	r3, r2
 80a189a:	b29b      	uxth	r3, r3
 80a189c:	461a      	mov	r2, r3
 80a189e:	2100      	movs	r1, #0
 80a18a0:	6878      	ldr	r0, [r7, #4]
 80a18a2:	f000 f889 	bl	80a19b8 <HAL_ETH_WritePHYRegister>
 80a18a6:	4603      	mov	r3, r0
 80a18a8:	2b00      	cmp	r3, #0
 80a18aa:	d00b      	beq.n	80a18c4 <HAL_ETH_Init+0x318>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 80a18ac:	2301      	movs	r3, #1
 80a18ae:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 80a18b0:	6939      	ldr	r1, [r7, #16]
 80a18b2:	6878      	ldr	r0, [r7, #4]
 80a18b4:	f000 f8e6 	bl	80a1a84 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 80a18b8:	687b      	ldr	r3, [r7, #4]
 80a18ba:	2201      	movs	r2, #1
 80a18bc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;
 80a18c0:	2301      	movs	r3, #1
 80a18c2:	e00c      	b.n	80a18de <HAL_ETH_Init+0x332>
    }  
    
    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 80a18c4:	f640 70ff 	movw	r0, #4095	; 0xfff
 80a18c8:	f7ff fd68 	bl	80a139c <HAL_Delay>
  }
  
  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 80a18cc:	6939      	ldr	r1, [r7, #16]
 80a18ce:	6878      	ldr	r0, [r7, #4]
 80a18d0:	f000 f8d8 	bl	80a1a84 <ETH_MACDMAConfig>
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 80a18d4:	687b      	ldr	r3, [r7, #4]
 80a18d6:	2201      	movs	r2, #1
 80a18d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 80a18dc:	2300      	movs	r3, #0
}
 80a18de:	4618      	mov	r0, r3
 80a18e0:	3720      	adds	r7, #32
 80a18e2:	46bd      	mov	sp, r7
 80a18e4:	bd80      	pop	{r7, pc}
 80a18e6:	bf00      	nop

080a18e8 <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 80a18e8:	b580      	push	{r7, lr}
 80a18ea:	b086      	sub	sp, #24
 80a18ec:	af00      	add	r7, sp, #0
 80a18ee:	60f8      	str	r0, [r7, #12]
 80a18f0:	460b      	mov	r3, r1
 80a18f2:	607a      	str	r2, [r7, #4]
 80a18f4:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;     
 80a18f6:	2300      	movs	r3, #0
 80a18f8:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 80a18fa:	2300      	movs	r3, #0
 80a18fc:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 80a18fe:	68fb      	ldr	r3, [r7, #12]
 80a1900:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80a1904:	b2db      	uxtb	r3, r3
 80a1906:	2b82      	cmp	r3, #130	; 0x82
 80a1908:	d101      	bne.n	80a190e <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 80a190a:	2302      	movs	r3, #2
 80a190c:	e050      	b.n	80a19b0 <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 80a190e:	68fb      	ldr	r3, [r7, #12]
 80a1910:	2282      	movs	r2, #130	; 0x82
 80a1912:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 80a1916:	68fb      	ldr	r3, [r7, #12]
 80a1918:	681b      	ldr	r3, [r3, #0]
 80a191a:	691b      	ldr	r3, [r3, #16]
 80a191c:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 80a191e:	697b      	ldr	r3, [r7, #20]
 80a1920:	f003 031c 	and.w	r3, r3, #28
 80a1924:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress << 11U) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 80a1926:	68fb      	ldr	r3, [r7, #12]
 80a1928:	8a1b      	ldrh	r3, [r3, #16]
 80a192a:	02db      	lsls	r3, r3, #11
 80a192c:	b29b      	uxth	r3, r3
 80a192e:	697a      	ldr	r2, [r7, #20]
 80a1930:	4313      	orrs	r3, r2
 80a1932:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 80a1934:	897b      	ldrh	r3, [r7, #10]
 80a1936:	019b      	lsls	r3, r3, #6
 80a1938:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 80a193c:	697a      	ldr	r2, [r7, #20]
 80a193e:	4313      	orrs	r3, r2
 80a1940:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 80a1942:	697b      	ldr	r3, [r7, #20]
 80a1944:	f023 0302 	bic.w	r3, r3, #2
 80a1948:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 80a194a:	697b      	ldr	r3, [r7, #20]
 80a194c:	f043 0301 	orr.w	r3, r3, #1
 80a1950:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 80a1952:	68fb      	ldr	r3, [r7, #12]
 80a1954:	681b      	ldr	r3, [r3, #0]
 80a1956:	697a      	ldr	r2, [r7, #20]
 80a1958:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 80a195a:	f7ff fd13 	bl	80a1384 <HAL_GetTick>
 80a195e:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80a1960:	e015      	b.n	80a198e <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 80a1962:	f7ff fd0f 	bl	80a1384 <HAL_GetTick>
 80a1966:	4602      	mov	r2, r0
 80a1968:	693b      	ldr	r3, [r7, #16]
 80a196a:	1ad3      	subs	r3, r2, r3
 80a196c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80a1970:	d309      	bcc.n	80a1986 <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State= HAL_ETH_STATE_READY;
 80a1972:	68fb      	ldr	r3, [r7, #12]
 80a1974:	2201      	movs	r2, #1
 80a1976:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 80a197a:	68fb      	ldr	r3, [r7, #12]
 80a197c:	2200      	movs	r2, #0
 80a197e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 80a1982:	2303      	movs	r3, #3
 80a1984:	e014      	b.n	80a19b0 <HAL_ETH_ReadPHYRegister+0xc8>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 80a1986:	68fb      	ldr	r3, [r7, #12]
 80a1988:	681b      	ldr	r3, [r3, #0]
 80a198a:	691b      	ldr	r3, [r3, #16]
 80a198c:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80a198e:	697b      	ldr	r3, [r7, #20]
 80a1990:	f003 0301 	and.w	r3, r3, #1
 80a1994:	2b00      	cmp	r3, #0
 80a1996:	d1e4      	bne.n	80a1962 <HAL_ETH_ReadPHYRegister+0x7a>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 80a1998:	68fb      	ldr	r3, [r7, #12]
 80a199a:	681b      	ldr	r3, [r3, #0]
 80a199c:	695b      	ldr	r3, [r3, #20]
 80a199e:	b29b      	uxth	r3, r3
 80a19a0:	461a      	mov	r2, r3
 80a19a2:	687b      	ldr	r3, [r7, #4]
 80a19a4:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 80a19a6:	68fb      	ldr	r3, [r7, #12]
 80a19a8:	2201      	movs	r2, #1
 80a19aa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 80a19ae:	2300      	movs	r3, #0
}
 80a19b0:	4618      	mov	r0, r3
 80a19b2:	3718      	adds	r7, #24
 80a19b4:	46bd      	mov	sp, r7
 80a19b6:	bd80      	pop	{r7, pc}

080a19b8 <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 80a19b8:	b580      	push	{r7, lr}
 80a19ba:	b086      	sub	sp, #24
 80a19bc:	af00      	add	r7, sp, #0
 80a19be:	60f8      	str	r0, [r7, #12]
 80a19c0:	460b      	mov	r3, r1
 80a19c2:	607a      	str	r2, [r7, #4]
 80a19c4:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;
 80a19c6:	2300      	movs	r3, #0
 80a19c8:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 80a19ca:	2300      	movs	r3, #0
 80a19cc:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 80a19ce:	68fb      	ldr	r3, [r7, #12]
 80a19d0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80a19d4:	b2db      	uxtb	r3, r3
 80a19d6:	2b42      	cmp	r3, #66	; 0x42
 80a19d8:	d101      	bne.n	80a19de <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 80a19da:	2302      	movs	r3, #2
 80a19dc:	e04e      	b.n	80a1a7c <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 80a19de:	68fb      	ldr	r3, [r7, #12]
 80a19e0:	2242      	movs	r2, #66	; 0x42
 80a19e2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 80a19e6:	68fb      	ldr	r3, [r7, #12]
 80a19e8:	681b      	ldr	r3, [r3, #0]
 80a19ea:	691b      	ldr	r3, [r3, #16]
 80a19ec:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 80a19ee:	697b      	ldr	r3, [r7, #20]
 80a19f0:	f003 031c 	and.w	r3, r3, #28
 80a19f4:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress<<11U) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 80a19f6:	68fb      	ldr	r3, [r7, #12]
 80a19f8:	8a1b      	ldrh	r3, [r3, #16]
 80a19fa:	02db      	lsls	r3, r3, #11
 80a19fc:	b29b      	uxth	r3, r3
 80a19fe:	697a      	ldr	r2, [r7, #20]
 80a1a00:	4313      	orrs	r3, r2
 80a1a02:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 80a1a04:	897b      	ldrh	r3, [r7, #10]
 80a1a06:	019b      	lsls	r3, r3, #6
 80a1a08:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 80a1a0c:	697a      	ldr	r2, [r7, #20]
 80a1a0e:	4313      	orrs	r3, r2
 80a1a10:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 80a1a12:	697b      	ldr	r3, [r7, #20]
 80a1a14:	f043 0302 	orr.w	r3, r3, #2
 80a1a18:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 80a1a1a:	697b      	ldr	r3, [r7, #20]
 80a1a1c:	f043 0301 	orr.w	r3, r3, #1
 80a1a20:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 80a1a22:	687b      	ldr	r3, [r7, #4]
 80a1a24:	b29a      	uxth	r2, r3
 80a1a26:	68fb      	ldr	r3, [r7, #12]
 80a1a28:	681b      	ldr	r3, [r3, #0]
 80a1a2a:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 80a1a2c:	68fb      	ldr	r3, [r7, #12]
 80a1a2e:	681b      	ldr	r3, [r3, #0]
 80a1a30:	697a      	ldr	r2, [r7, #20]
 80a1a32:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 80a1a34:	f7ff fca6 	bl	80a1384 <HAL_GetTick>
 80a1a38:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80a1a3a:	e015      	b.n	80a1a68 <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 80a1a3c:	f7ff fca2 	bl	80a1384 <HAL_GetTick>
 80a1a40:	4602      	mov	r2, r0
 80a1a42:	693b      	ldr	r3, [r7, #16]
 80a1a44:	1ad3      	subs	r3, r2, r3
 80a1a46:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80a1a4a:	d309      	bcc.n	80a1a60 <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State= HAL_ETH_STATE_READY;
 80a1a4c:	68fb      	ldr	r3, [r7, #12]
 80a1a4e:	2201      	movs	r2, #1
 80a1a50:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 80a1a54:	68fb      	ldr	r3, [r7, #12]
 80a1a56:	2200      	movs	r2, #0
 80a1a58:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 80a1a5c:	2303      	movs	r3, #3
 80a1a5e:	e00d      	b.n	80a1a7c <HAL_ETH_WritePHYRegister+0xc4>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 80a1a60:	68fb      	ldr	r3, [r7, #12]
 80a1a62:	681b      	ldr	r3, [r3, #0]
 80a1a64:	691b      	ldr	r3, [r3, #16]
 80a1a66:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80a1a68:	697b      	ldr	r3, [r7, #20]
 80a1a6a:	f003 0301 	and.w	r3, r3, #1
 80a1a6e:	2b00      	cmp	r3, #0
 80a1a70:	d1e4      	bne.n	80a1a3c <HAL_ETH_WritePHYRegister+0x84>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 80a1a72:	68fb      	ldr	r3, [r7, #12]
 80a1a74:	2201      	movs	r2, #1
 80a1a76:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK; 
 80a1a7a:	2300      	movs	r3, #0
}
 80a1a7c:	4618      	mov	r0, r3
 80a1a7e:	3718      	adds	r7, #24
 80a1a80:	46bd      	mov	sp, r7
 80a1a82:	bd80      	pop	{r7, pc}

080a1a84 <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 80a1a84:	b580      	push	{r7, lr}
 80a1a86:	b0b0      	sub	sp, #192	; 0xc0
 80a1a88:	af00      	add	r7, sp, #0
 80a1a8a:	6078      	str	r0, [r7, #4]
 80a1a8c:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg1 = 0U;
 80a1a8e:	2300      	movs	r3, #0
 80a1a90:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 80a1a94:	683b      	ldr	r3, [r7, #0]
 80a1a96:	2b00      	cmp	r3, #0
 80a1a98:	d007      	beq.n	80a1aaa <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 80a1a9a:	687b      	ldr	r3, [r7, #4]
 80a1a9c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80a1aa0:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 80a1aa2:	687b      	ldr	r3, [r7, #4]
 80a1aa4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80a1aa8:	609a      	str	r2, [r3, #8]
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 80a1aaa:	2300      	movs	r3, #0
 80a1aac:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 80a1aae:	2300      	movs	r3, #0
 80a1ab0:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 80a1ab2:	2300      	movs	r3, #0
 80a1ab4:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 80a1ab6:	2300      	movs	r3, #0
 80a1ab8:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 80a1aba:	2300      	movs	r3, #0
 80a1abc:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 80a1abe:	2300      	movs	r3, #0
 80a1ac0:	65fb      	str	r3, [r7, #92]	; 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 80a1ac2:	687b      	ldr	r3, [r7, #4]
 80a1ac4:	69db      	ldr	r3, [r3, #28]
 80a1ac6:	2b00      	cmp	r3, #0
 80a1ac8:	d103      	bne.n	80a1ad2 <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 80a1aca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80a1ace:	663b      	str	r3, [r7, #96]	; 0x60
 80a1ad0:	e001      	b.n	80a1ad6 <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 80a1ad2:	2300      	movs	r3, #0
 80a1ad4:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 80a1ad6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80a1ada:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 80a1adc:	2300      	movs	r3, #0
 80a1ade:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80a1ae0:	2300      	movs	r3, #0
 80a1ae2:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 80a1ae4:	2300      	movs	r3, #0
 80a1ae6:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 80a1ae8:	2300      	movs	r3, #0
 80a1aea:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 80a1aec:	2300      	movs	r3, #0
 80a1aee:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 80a1af0:	2340      	movs	r3, #64	; 0x40
 80a1af2:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 80a1af4:	2300      	movs	r3, #0
 80a1af6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 80a1afa:	2300      	movs	r3, #0
 80a1afc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 80a1b00:	2300      	movs	r3, #0
 80a1b02:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 80a1b06:	2300      	movs	r3, #0
 80a1b08:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 80a1b0c:	2300      	movs	r3, #0
 80a1b0e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0U;
 80a1b12:	2300      	movs	r3, #0
 80a1b14:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0U;
 80a1b18:	2300      	movs	r3, #0
 80a1b1a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0U;
 80a1b1e:	2300      	movs	r3, #0
 80a1b20:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 80a1b24:	2380      	movs	r3, #128	; 0x80
 80a1b26:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 80a1b2a:	2300      	movs	r3, #0
 80a1b2c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 80a1b30:	2300      	movs	r3, #0
 80a1b32:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 80a1b36:	2300      	movs	r3, #0
 80a1b38:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 80a1b3c:	2300      	movs	r3, #0
 80a1b3e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 80a1b42:	2300      	movs	r3, #0
 80a1b44:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0U;
 80a1b48:	2300      	movs	r3, #0
 80a1b4a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 80a1b4e:	687b      	ldr	r3, [r7, #4]
 80a1b50:	681b      	ldr	r3, [r3, #0]
 80a1b52:	681b      	ldr	r3, [r3, #0]
 80a1b54:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 80a1b58:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80a1b5c:	4bac      	ldr	r3, [pc, #688]	; (80a1e10 <ETH_MACDMAConfig+0x38c>)
 80a1b5e:	4013      	ands	r3, r2
 80a1b60:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 80a1b64:	6cba      	ldr	r2, [r7, #72]	; 0x48
                       macinit.Jabber | 
 80a1b66:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 80a1b68:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 80a1b6a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                       macinit.Jabber | 
 80a1b6c:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 80a1b6e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                       macinit.InterFrameGap |
 80a1b70:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 80a1b72:	687b      	ldr	r3, [r7, #4]
 80a1b74:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 80a1b76:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 80a1b78:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                       (heth->Init).Speed | 
 80a1b7a:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 80a1b7c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                       macinit.ReceiveOwn |
 80a1b7e:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 80a1b80:	687b      	ldr	r3, [r7, #4]
 80a1b82:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 80a1b84:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 80a1b86:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                       (heth->Init).DuplexMode | 
 80a1b88:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 80a1b8a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                       macinit.ChecksumOffload |    
 80a1b8c:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 80a1b8e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                       macinit.RetryTransmission | 
 80a1b90:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 80a1b92:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                       macinit.AutomaticPadCRCStrip | 
 80a1b94:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 80a1b96:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                       macinit.BackOffLimit | 
 80a1b98:	4313      	orrs	r3, r2
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 80a1b9a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80a1b9e:	4313      	orrs	r3, r2
 80a1ba0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 80a1ba4:	687b      	ldr	r3, [r7, #4]
 80a1ba6:	681b      	ldr	r3, [r3, #0]
 80a1ba8:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80a1bac:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80a1bae:	687b      	ldr	r3, [r7, #4]
 80a1bb0:	681b      	ldr	r3, [r3, #0]
 80a1bb2:	681b      	ldr	r3, [r3, #0]
 80a1bb4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80a1bb8:	2001      	movs	r0, #1
 80a1bba:	f7ff fbef 	bl	80a139c <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1; 
 80a1bbe:	687b      	ldr	r3, [r7, #4]
 80a1bc0:	681b      	ldr	r3, [r3, #0]
 80a1bc2:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80a1bc6:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 80a1bc8:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 80a1bca:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 80a1bcc:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 80a1bce:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 80a1bd0:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception | 
 80a1bd2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 80a1bd6:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 80a1bd8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception | 
 80a1bdc:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 80a1bde:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 80a1be2:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 80a1be4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 80a1be8:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 80a1bec:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 80a1bf0:	687b      	ldr	r3, [r7, #4]
 80a1bf2:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 80a1bf4:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 80a1bf6:	605a      	str	r2, [r3, #4]
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFFR;
 80a1bf8:	687b      	ldr	r3, [r7, #4]
 80a1bfa:	681b      	ldr	r3, [r3, #0]
 80a1bfc:	685b      	ldr	r3, [r3, #4]
 80a1bfe:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 80a1c02:	2001      	movs	r0, #1
 80a1c04:	f7ff fbca 	bl	80a139c <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg1;
 80a1c08:	687b      	ldr	r3, [r7, #4]
 80a1c0a:	681b      	ldr	r3, [r3, #0]
 80a1c0c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80a1c10:	605a      	str	r2, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 80a1c12:	687b      	ldr	r3, [r7, #4]
 80a1c14:	681b      	ldr	r3, [r3, #0]
 80a1c16:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80a1c1a:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 80a1c1c:	687b      	ldr	r3, [r7, #4]
 80a1c1e:	681b      	ldr	r3, [r3, #0]
 80a1c20:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80a1c24:	60da      	str	r2, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg1 = (heth->Instance)->MACFCR;
 80a1c26:	687b      	ldr	r3, [r7, #4]
 80a1c28:	681b      	ldr	r3, [r3, #0]
 80a1c2a:	699b      	ldr	r3, [r3, #24]
 80a1c2c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Clear xx bits */
   tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 80a1c30:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80a1c34:	f64f 7341 	movw	r3, #65345	; 0xff41
 80a1c38:	4013      	ands	r3, r2
 80a1c3a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 80a1c3e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80a1c42:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 80a1c44:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 80a1c48:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 80a1c4a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 80a1c4e:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 80a1c50:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 80a1c54:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 80a1c56:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect | 
 80a1c5a:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 80a1c5c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 80a1c60:	4313      	orrs	r3, r2
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 80a1c62:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80a1c66:	4313      	orrs	r3, r2
 80a1c68:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 80a1c6c:	687b      	ldr	r3, [r7, #4]
 80a1c6e:	681b      	ldr	r3, [r3, #0]
 80a1c70:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80a1c74:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFCR;
 80a1c76:	687b      	ldr	r3, [r7, #4]
 80a1c78:	681b      	ldr	r3, [r3, #0]
 80a1c7a:	699b      	ldr	r3, [r3, #24]
 80a1c7c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 80a1c80:	2001      	movs	r0, #1
 80a1c82:	f7ff fb8b 	bl	80a139c <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg1;
 80a1c86:	687b      	ldr	r3, [r7, #4]
 80a1c88:	681b      	ldr	r3, [r3, #0]
 80a1c8a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80a1c8e:	619a      	str	r2, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 80a1c90:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                            macinit.VLANTagIdentifier);
 80a1c94:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 80a1c98:	687b      	ldr	r3, [r7, #4]
 80a1c9a:	681b      	ldr	r3, [r3, #0]
 80a1c9c:	430a      	orrs	r2, r1
 80a1c9e:	61da      	str	r2, [r3, #28]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACVLANTR;
 80a1ca0:	687b      	ldr	r3, [r7, #4]
 80a1ca2:	681b      	ldr	r3, [r3, #0]
 80a1ca4:	69db      	ldr	r3, [r3, #28]
 80a1ca6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80a1caa:	2001      	movs	r0, #1
 80a1cac:	f7ff fb76 	bl	80a139c <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg1;
 80a1cb0:	687b      	ldr	r3, [r7, #4]
 80a1cb2:	681b      	ldr	r3, [r3, #0]
 80a1cb4:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80a1cb8:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 80a1cba:	2300      	movs	r3, #0
 80a1cbc:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 80a1cbe:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80a1cc2:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 80a1cc4:	2300      	movs	r3, #0
 80a1cc6:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 80a1cc8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80a1ccc:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 80a1cce:	2300      	movs	r3, #0
 80a1cd0:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 80a1cd2:	2300      	movs	r3, #0
 80a1cd4:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 80a1cd6:	2300      	movs	r3, #0
 80a1cd8:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 80a1cda:	2300      	movs	r3, #0
 80a1cdc:	627b      	str	r3, [r7, #36]	; 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 80a1cde:	2304      	movs	r3, #4
 80a1ce0:	62bb      	str	r3, [r7, #40]	; 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 80a1ce2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80a1ce6:	62fb      	str	r3, [r7, #44]	; 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 80a1ce8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80a1cec:	633b      	str	r3, [r7, #48]	; 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80a1cee:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80a1cf2:	637b      	str	r3, [r7, #52]	; 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80a1cf4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80a1cf8:	63bb      	str	r3, [r7, #56]	; 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 80a1cfa:	2380      	movs	r3, #128	; 0x80
 80a1cfc:	63fb      	str	r3, [r7, #60]	; 0x3c
    dmainit.DescriptorSkipLength = 0x0U;
 80a1cfe:	2300      	movs	r3, #0
 80a1d00:	643b      	str	r3, [r7, #64]	; 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 80a1d02:	2300      	movs	r3, #0
 80a1d04:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg1 = (heth->Instance)->DMAOMR;
 80a1d06:	687b      	ldr	r3, [r7, #4]
 80a1d08:	681b      	ldr	r3, [r3, #0]
 80a1d0a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80a1d0e:	3318      	adds	r3, #24
 80a1d10:	681b      	ldr	r3, [r3, #0]
 80a1d12:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Clear xx bits */
    tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 80a1d16:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80a1d1a:	4b3e      	ldr	r3, [pc, #248]	; (80a1e14 <ETH_MACDMAConfig+0x390>)
 80a1d1c:	4013      	ands	r3, r2
 80a1d1e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 80a1d22:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 80a1d24:	68fb      	ldr	r3, [r7, #12]
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 80a1d26:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 80a1d28:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 80a1d2a:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 80a1d2c:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 80a1d2e:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 80a1d30:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 80a1d32:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 80a1d34:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 80a1d36:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 80a1d38:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 80a1d3a:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 80a1d3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 80a1d3e:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 80a1d40:	6abb      	ldr	r3, [r7, #40]	; 0x28
                         dmainit.ReceiveThresholdControl |
 80a1d42:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 80a1d44:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80a1d48:	4313      	orrs	r3, r2
 80a1d4a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 80a1d4e:	687b      	ldr	r3, [r7, #4]
 80a1d50:	681b      	ldr	r3, [r3, #0]
 80a1d52:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80a1d56:	3318      	adds	r3, #24
 80a1d58:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80a1d5c:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->DMAOMR;
 80a1d5e:	687b      	ldr	r3, [r7, #4]
 80a1d60:	681b      	ldr	r3, [r3, #0]
 80a1d62:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80a1d66:	3318      	adds	r3, #24
 80a1d68:	681b      	ldr	r3, [r3, #0]
 80a1d6a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80a1d6e:	2001      	movs	r0, #1
 80a1d70:	f7ff fb14 	bl	80a139c <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg1;
 80a1d74:	687b      	ldr	r3, [r7, #4]
 80a1d76:	681b      	ldr	r3, [r3, #0]
 80a1d78:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80a1d7c:	3318      	adds	r3, #24
 80a1d7e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80a1d82:	601a      	str	r2, [r3, #0]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 80a1d84:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                          dmainit.FixedBurst |
 80a1d86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 80a1d88:	431a      	orrs	r2, r3
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 80a1d8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                          dmainit.FixedBurst |
 80a1d8c:	431a      	orrs	r2, r3
                                          dmainit.TxDMABurstLength |
 80a1d8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 80a1d90:	431a      	orrs	r2, r3
                                          dmainit.EnhancedDescriptorFormat |
 80a1d92:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                          dmainit.TxDMABurstLength |
 80a1d94:	431a      	orrs	r2, r3
                                          (dmainit.DescriptorSkipLength << 2U) |
 80a1d96:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80a1d98:	009b      	lsls	r3, r3, #2
                                          dmainit.EnhancedDescriptorFormat |
 80a1d9a:	431a      	orrs	r2, r3
                                          dmainit.DMAArbitration |
 80a1d9c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                          (dmainit.DescriptorSkipLength << 2U) |
 80a1d9e:	431a      	orrs	r2, r3
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 80a1da0:	687b      	ldr	r3, [r7, #4]
 80a1da2:	681b      	ldr	r3, [r3, #0]
 80a1da4:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80a1da8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80a1dac:	601a      	str	r2, [r3, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->DMABMR;
 80a1dae:	687b      	ldr	r3, [r7, #4]
 80a1db0:	681b      	ldr	r3, [r3, #0]
 80a1db2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80a1db6:	681b      	ldr	r3, [r3, #0]
 80a1db8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 80a1dbc:	2001      	movs	r0, #1
 80a1dbe:	f7ff faed 	bl	80a139c <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg1;
 80a1dc2:	687b      	ldr	r3, [r7, #4]
 80a1dc4:	681b      	ldr	r3, [r3, #0]
 80a1dc6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80a1dca:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80a1dce:	601a      	str	r2, [r3, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 80a1dd0:	687b      	ldr	r3, [r7, #4]
 80a1dd2:	699b      	ldr	r3, [r3, #24]
 80a1dd4:	2b01      	cmp	r3, #1
 80a1dd6:	d10f      	bne.n	80a1df8 <ETH_MACDMAConfig+0x374>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 80a1dd8:	687b      	ldr	r3, [r7, #4]
 80a1dda:	681b      	ldr	r3, [r3, #0]
 80a1ddc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80a1de0:	331c      	adds	r3, #28
 80a1de2:	681a      	ldr	r2, [r3, #0]
 80a1de4:	687b      	ldr	r3, [r7, #4]
 80a1de6:	681b      	ldr	r3, [r3, #0]
 80a1de8:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80a1dec:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80a1df0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80a1df4:	331c      	adds	r3, #28
 80a1df6:	601a      	str	r2, [r3, #0]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 80a1df8:	687b      	ldr	r3, [r7, #4]
 80a1dfa:	695b      	ldr	r3, [r3, #20]
 80a1dfc:	461a      	mov	r2, r3
 80a1dfe:	2100      	movs	r1, #0
 80a1e00:	6878      	ldr	r0, [r7, #4]
 80a1e02:	f000 f809 	bl	80a1e18 <ETH_MACAddressConfig>
}
 80a1e06:	bf00      	nop
 80a1e08:	37c0      	adds	r7, #192	; 0xc0
 80a1e0a:	46bd      	mov	sp, r7
 80a1e0c:	bd80      	pop	{r7, pc}
 80a1e0e:	bf00      	nop
 80a1e10:	ff20810f 	.word	0xff20810f
 80a1e14:	f8de3f23 	.word	0xf8de3f23

080a1e18 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 80a1e18:	b480      	push	{r7}
 80a1e1a:	b087      	sub	sp, #28
 80a1e1c:	af00      	add	r7, sp, #0
 80a1e1e:	60f8      	str	r0, [r7, #12]
 80a1e20:	60b9      	str	r1, [r7, #8]
 80a1e22:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 80a1e24:	687b      	ldr	r3, [r7, #4]
 80a1e26:	3305      	adds	r3, #5
 80a1e28:	781b      	ldrb	r3, [r3, #0]
 80a1e2a:	021b      	lsls	r3, r3, #8
 80a1e2c:	687a      	ldr	r2, [r7, #4]
 80a1e2e:	3204      	adds	r2, #4
 80a1e30:	7812      	ldrb	r2, [r2, #0]
 80a1e32:	4313      	orrs	r3, r2
 80a1e34:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 80a1e36:	68ba      	ldr	r2, [r7, #8]
 80a1e38:	4b11      	ldr	r3, [pc, #68]	; (80a1e80 <ETH_MACAddressConfig+0x68>)
 80a1e3a:	4413      	add	r3, r2
 80a1e3c:	461a      	mov	r2, r3
 80a1e3e:	697b      	ldr	r3, [r7, #20]
 80a1e40:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 80a1e42:	687b      	ldr	r3, [r7, #4]
 80a1e44:	3303      	adds	r3, #3
 80a1e46:	781b      	ldrb	r3, [r3, #0]
 80a1e48:	061a      	lsls	r2, r3, #24
 80a1e4a:	687b      	ldr	r3, [r7, #4]
 80a1e4c:	3302      	adds	r3, #2
 80a1e4e:	781b      	ldrb	r3, [r3, #0]
 80a1e50:	041b      	lsls	r3, r3, #16
 80a1e52:	431a      	orrs	r2, r3
 80a1e54:	687b      	ldr	r3, [r7, #4]
 80a1e56:	3301      	adds	r3, #1
 80a1e58:	781b      	ldrb	r3, [r3, #0]
 80a1e5a:	021b      	lsls	r3, r3, #8
 80a1e5c:	4313      	orrs	r3, r2
 80a1e5e:	687a      	ldr	r2, [r7, #4]
 80a1e60:	7812      	ldrb	r2, [r2, #0]
 80a1e62:	4313      	orrs	r3, r2
 80a1e64:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 80a1e66:	68ba      	ldr	r2, [r7, #8]
 80a1e68:	4b06      	ldr	r3, [pc, #24]	; (80a1e84 <ETH_MACAddressConfig+0x6c>)
 80a1e6a:	4413      	add	r3, r2
 80a1e6c:	461a      	mov	r2, r3
 80a1e6e:	697b      	ldr	r3, [r7, #20]
 80a1e70:	6013      	str	r3, [r2, #0]
}
 80a1e72:	bf00      	nop
 80a1e74:	371c      	adds	r7, #28
 80a1e76:	46bd      	mov	sp, r7
 80a1e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 80a1e7c:	4770      	bx	lr
 80a1e7e:	bf00      	nop
 80a1e80:	40028040 	.word	0x40028040
 80a1e84:	40028044 	.word	0x40028044

080a1e88 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80a1e88:	b480      	push	{r7}
 80a1e8a:	b089      	sub	sp, #36	; 0x24
 80a1e8c:	af00      	add	r7, sp, #0
 80a1e8e:	6078      	str	r0, [r7, #4]
 80a1e90:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80a1e92:	2300      	movs	r3, #0
 80a1e94:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80a1e96:	2300      	movs	r3, #0
 80a1e98:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80a1e9a:	2300      	movs	r3, #0
 80a1e9c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80a1e9e:	2300      	movs	r3, #0
 80a1ea0:	61fb      	str	r3, [r7, #28]
 80a1ea2:	e177      	b.n	80a2194 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80a1ea4:	2201      	movs	r2, #1
 80a1ea6:	69fb      	ldr	r3, [r7, #28]
 80a1ea8:	fa02 f303 	lsl.w	r3, r2, r3
 80a1eac:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80a1eae:	683b      	ldr	r3, [r7, #0]
 80a1eb0:	681b      	ldr	r3, [r3, #0]
 80a1eb2:	697a      	ldr	r2, [r7, #20]
 80a1eb4:	4013      	ands	r3, r2
 80a1eb6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80a1eb8:	693a      	ldr	r2, [r7, #16]
 80a1eba:	697b      	ldr	r3, [r7, #20]
 80a1ebc:	429a      	cmp	r2, r3
 80a1ebe:	f040 8166 	bne.w	80a218e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80a1ec2:	683b      	ldr	r3, [r7, #0]
 80a1ec4:	685b      	ldr	r3, [r3, #4]
 80a1ec6:	2b01      	cmp	r3, #1
 80a1ec8:	d00b      	beq.n	80a1ee2 <HAL_GPIO_Init+0x5a>
 80a1eca:	683b      	ldr	r3, [r7, #0]
 80a1ecc:	685b      	ldr	r3, [r3, #4]
 80a1ece:	2b02      	cmp	r3, #2
 80a1ed0:	d007      	beq.n	80a1ee2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80a1ed2:	683b      	ldr	r3, [r7, #0]
 80a1ed4:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80a1ed6:	2b11      	cmp	r3, #17
 80a1ed8:	d003      	beq.n	80a1ee2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80a1eda:	683b      	ldr	r3, [r7, #0]
 80a1edc:	685b      	ldr	r3, [r3, #4]
 80a1ede:	2b12      	cmp	r3, #18
 80a1ee0:	d130      	bne.n	80a1f44 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80a1ee2:	687b      	ldr	r3, [r7, #4]
 80a1ee4:	689b      	ldr	r3, [r3, #8]
 80a1ee6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80a1ee8:	69fb      	ldr	r3, [r7, #28]
 80a1eea:	005b      	lsls	r3, r3, #1
 80a1eec:	2203      	movs	r2, #3
 80a1eee:	fa02 f303 	lsl.w	r3, r2, r3
 80a1ef2:	43db      	mvns	r3, r3
 80a1ef4:	69ba      	ldr	r2, [r7, #24]
 80a1ef6:	4013      	ands	r3, r2
 80a1ef8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80a1efa:	683b      	ldr	r3, [r7, #0]
 80a1efc:	68da      	ldr	r2, [r3, #12]
 80a1efe:	69fb      	ldr	r3, [r7, #28]
 80a1f00:	005b      	lsls	r3, r3, #1
 80a1f02:	fa02 f303 	lsl.w	r3, r2, r3
 80a1f06:	69ba      	ldr	r2, [r7, #24]
 80a1f08:	4313      	orrs	r3, r2
 80a1f0a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80a1f0c:	687b      	ldr	r3, [r7, #4]
 80a1f0e:	69ba      	ldr	r2, [r7, #24]
 80a1f10:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80a1f12:	687b      	ldr	r3, [r7, #4]
 80a1f14:	685b      	ldr	r3, [r3, #4]
 80a1f16:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80a1f18:	2201      	movs	r2, #1
 80a1f1a:	69fb      	ldr	r3, [r7, #28]
 80a1f1c:	fa02 f303 	lsl.w	r3, r2, r3
 80a1f20:	43db      	mvns	r3, r3
 80a1f22:	69ba      	ldr	r2, [r7, #24]
 80a1f24:	4013      	ands	r3, r2
 80a1f26:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80a1f28:	683b      	ldr	r3, [r7, #0]
 80a1f2a:	685b      	ldr	r3, [r3, #4]
 80a1f2c:	091b      	lsrs	r3, r3, #4
 80a1f2e:	f003 0201 	and.w	r2, r3, #1
 80a1f32:	69fb      	ldr	r3, [r7, #28]
 80a1f34:	fa02 f303 	lsl.w	r3, r2, r3
 80a1f38:	69ba      	ldr	r2, [r7, #24]
 80a1f3a:	4313      	orrs	r3, r2
 80a1f3c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80a1f3e:	687b      	ldr	r3, [r7, #4]
 80a1f40:	69ba      	ldr	r2, [r7, #24]
 80a1f42:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80a1f44:	687b      	ldr	r3, [r7, #4]
 80a1f46:	68db      	ldr	r3, [r3, #12]
 80a1f48:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80a1f4a:	69fb      	ldr	r3, [r7, #28]
 80a1f4c:	005b      	lsls	r3, r3, #1
 80a1f4e:	2203      	movs	r2, #3
 80a1f50:	fa02 f303 	lsl.w	r3, r2, r3
 80a1f54:	43db      	mvns	r3, r3
 80a1f56:	69ba      	ldr	r2, [r7, #24]
 80a1f58:	4013      	ands	r3, r2
 80a1f5a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80a1f5c:	683b      	ldr	r3, [r7, #0]
 80a1f5e:	689a      	ldr	r2, [r3, #8]
 80a1f60:	69fb      	ldr	r3, [r7, #28]
 80a1f62:	005b      	lsls	r3, r3, #1
 80a1f64:	fa02 f303 	lsl.w	r3, r2, r3
 80a1f68:	69ba      	ldr	r2, [r7, #24]
 80a1f6a:	4313      	orrs	r3, r2
 80a1f6c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80a1f6e:	687b      	ldr	r3, [r7, #4]
 80a1f70:	69ba      	ldr	r2, [r7, #24]
 80a1f72:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80a1f74:	683b      	ldr	r3, [r7, #0]
 80a1f76:	685b      	ldr	r3, [r3, #4]
 80a1f78:	2b02      	cmp	r3, #2
 80a1f7a:	d003      	beq.n	80a1f84 <HAL_GPIO_Init+0xfc>
 80a1f7c:	683b      	ldr	r3, [r7, #0]
 80a1f7e:	685b      	ldr	r3, [r3, #4]
 80a1f80:	2b12      	cmp	r3, #18
 80a1f82:	d123      	bne.n	80a1fcc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80a1f84:	69fb      	ldr	r3, [r7, #28]
 80a1f86:	08da      	lsrs	r2, r3, #3
 80a1f88:	687b      	ldr	r3, [r7, #4]
 80a1f8a:	3208      	adds	r2, #8
 80a1f8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80a1f90:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80a1f92:	69fb      	ldr	r3, [r7, #28]
 80a1f94:	f003 0307 	and.w	r3, r3, #7
 80a1f98:	009b      	lsls	r3, r3, #2
 80a1f9a:	220f      	movs	r2, #15
 80a1f9c:	fa02 f303 	lsl.w	r3, r2, r3
 80a1fa0:	43db      	mvns	r3, r3
 80a1fa2:	69ba      	ldr	r2, [r7, #24]
 80a1fa4:	4013      	ands	r3, r2
 80a1fa6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80a1fa8:	683b      	ldr	r3, [r7, #0]
 80a1faa:	691a      	ldr	r2, [r3, #16]
 80a1fac:	69fb      	ldr	r3, [r7, #28]
 80a1fae:	f003 0307 	and.w	r3, r3, #7
 80a1fb2:	009b      	lsls	r3, r3, #2
 80a1fb4:	fa02 f303 	lsl.w	r3, r2, r3
 80a1fb8:	69ba      	ldr	r2, [r7, #24]
 80a1fba:	4313      	orrs	r3, r2
 80a1fbc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80a1fbe:	69fb      	ldr	r3, [r7, #28]
 80a1fc0:	08da      	lsrs	r2, r3, #3
 80a1fc2:	687b      	ldr	r3, [r7, #4]
 80a1fc4:	3208      	adds	r2, #8
 80a1fc6:	69b9      	ldr	r1, [r7, #24]
 80a1fc8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80a1fcc:	687b      	ldr	r3, [r7, #4]
 80a1fce:	681b      	ldr	r3, [r3, #0]
 80a1fd0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80a1fd2:	69fb      	ldr	r3, [r7, #28]
 80a1fd4:	005b      	lsls	r3, r3, #1
 80a1fd6:	2203      	movs	r2, #3
 80a1fd8:	fa02 f303 	lsl.w	r3, r2, r3
 80a1fdc:	43db      	mvns	r3, r3
 80a1fde:	69ba      	ldr	r2, [r7, #24]
 80a1fe0:	4013      	ands	r3, r2
 80a1fe2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80a1fe4:	683b      	ldr	r3, [r7, #0]
 80a1fe6:	685b      	ldr	r3, [r3, #4]
 80a1fe8:	f003 0203 	and.w	r2, r3, #3
 80a1fec:	69fb      	ldr	r3, [r7, #28]
 80a1fee:	005b      	lsls	r3, r3, #1
 80a1ff0:	fa02 f303 	lsl.w	r3, r2, r3
 80a1ff4:	69ba      	ldr	r2, [r7, #24]
 80a1ff6:	4313      	orrs	r3, r2
 80a1ff8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80a1ffa:	687b      	ldr	r3, [r7, #4]
 80a1ffc:	69ba      	ldr	r2, [r7, #24]
 80a1ffe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80a2000:	683b      	ldr	r3, [r7, #0]
 80a2002:	685b      	ldr	r3, [r3, #4]
 80a2004:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80a2008:	2b00      	cmp	r3, #0
 80a200a:	f000 80c0 	beq.w	80a218e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80a200e:	2300      	movs	r3, #0
 80a2010:	60fb      	str	r3, [r7, #12]
 80a2012:	4b65      	ldr	r3, [pc, #404]	; (80a21a8 <HAL_GPIO_Init+0x320>)
 80a2014:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80a2016:	4a64      	ldr	r2, [pc, #400]	; (80a21a8 <HAL_GPIO_Init+0x320>)
 80a2018:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80a201c:	6453      	str	r3, [r2, #68]	; 0x44
 80a201e:	4b62      	ldr	r3, [pc, #392]	; (80a21a8 <HAL_GPIO_Init+0x320>)
 80a2020:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80a2022:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80a2026:	60fb      	str	r3, [r7, #12]
 80a2028:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80a202a:	4a60      	ldr	r2, [pc, #384]	; (80a21ac <HAL_GPIO_Init+0x324>)
 80a202c:	69fb      	ldr	r3, [r7, #28]
 80a202e:	089b      	lsrs	r3, r3, #2
 80a2030:	3302      	adds	r3, #2
 80a2032:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80a2036:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80a2038:	69fb      	ldr	r3, [r7, #28]
 80a203a:	f003 0303 	and.w	r3, r3, #3
 80a203e:	009b      	lsls	r3, r3, #2
 80a2040:	220f      	movs	r2, #15
 80a2042:	fa02 f303 	lsl.w	r3, r2, r3
 80a2046:	43db      	mvns	r3, r3
 80a2048:	69ba      	ldr	r2, [r7, #24]
 80a204a:	4013      	ands	r3, r2
 80a204c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80a204e:	687b      	ldr	r3, [r7, #4]
 80a2050:	4a57      	ldr	r2, [pc, #348]	; (80a21b0 <HAL_GPIO_Init+0x328>)
 80a2052:	4293      	cmp	r3, r2
 80a2054:	d037      	beq.n	80a20c6 <HAL_GPIO_Init+0x23e>
 80a2056:	687b      	ldr	r3, [r7, #4]
 80a2058:	4a56      	ldr	r2, [pc, #344]	; (80a21b4 <HAL_GPIO_Init+0x32c>)
 80a205a:	4293      	cmp	r3, r2
 80a205c:	d031      	beq.n	80a20c2 <HAL_GPIO_Init+0x23a>
 80a205e:	687b      	ldr	r3, [r7, #4]
 80a2060:	4a55      	ldr	r2, [pc, #340]	; (80a21b8 <HAL_GPIO_Init+0x330>)
 80a2062:	4293      	cmp	r3, r2
 80a2064:	d02b      	beq.n	80a20be <HAL_GPIO_Init+0x236>
 80a2066:	687b      	ldr	r3, [r7, #4]
 80a2068:	4a54      	ldr	r2, [pc, #336]	; (80a21bc <HAL_GPIO_Init+0x334>)
 80a206a:	4293      	cmp	r3, r2
 80a206c:	d025      	beq.n	80a20ba <HAL_GPIO_Init+0x232>
 80a206e:	687b      	ldr	r3, [r7, #4]
 80a2070:	4a53      	ldr	r2, [pc, #332]	; (80a21c0 <HAL_GPIO_Init+0x338>)
 80a2072:	4293      	cmp	r3, r2
 80a2074:	d01f      	beq.n	80a20b6 <HAL_GPIO_Init+0x22e>
 80a2076:	687b      	ldr	r3, [r7, #4]
 80a2078:	4a52      	ldr	r2, [pc, #328]	; (80a21c4 <HAL_GPIO_Init+0x33c>)
 80a207a:	4293      	cmp	r3, r2
 80a207c:	d019      	beq.n	80a20b2 <HAL_GPIO_Init+0x22a>
 80a207e:	687b      	ldr	r3, [r7, #4]
 80a2080:	4a51      	ldr	r2, [pc, #324]	; (80a21c8 <HAL_GPIO_Init+0x340>)
 80a2082:	4293      	cmp	r3, r2
 80a2084:	d013      	beq.n	80a20ae <HAL_GPIO_Init+0x226>
 80a2086:	687b      	ldr	r3, [r7, #4]
 80a2088:	4a50      	ldr	r2, [pc, #320]	; (80a21cc <HAL_GPIO_Init+0x344>)
 80a208a:	4293      	cmp	r3, r2
 80a208c:	d00d      	beq.n	80a20aa <HAL_GPIO_Init+0x222>
 80a208e:	687b      	ldr	r3, [r7, #4]
 80a2090:	4a4f      	ldr	r2, [pc, #316]	; (80a21d0 <HAL_GPIO_Init+0x348>)
 80a2092:	4293      	cmp	r3, r2
 80a2094:	d007      	beq.n	80a20a6 <HAL_GPIO_Init+0x21e>
 80a2096:	687b      	ldr	r3, [r7, #4]
 80a2098:	4a4e      	ldr	r2, [pc, #312]	; (80a21d4 <HAL_GPIO_Init+0x34c>)
 80a209a:	4293      	cmp	r3, r2
 80a209c:	d101      	bne.n	80a20a2 <HAL_GPIO_Init+0x21a>
 80a209e:	2309      	movs	r3, #9
 80a20a0:	e012      	b.n	80a20c8 <HAL_GPIO_Init+0x240>
 80a20a2:	230a      	movs	r3, #10
 80a20a4:	e010      	b.n	80a20c8 <HAL_GPIO_Init+0x240>
 80a20a6:	2308      	movs	r3, #8
 80a20a8:	e00e      	b.n	80a20c8 <HAL_GPIO_Init+0x240>
 80a20aa:	2307      	movs	r3, #7
 80a20ac:	e00c      	b.n	80a20c8 <HAL_GPIO_Init+0x240>
 80a20ae:	2306      	movs	r3, #6
 80a20b0:	e00a      	b.n	80a20c8 <HAL_GPIO_Init+0x240>
 80a20b2:	2305      	movs	r3, #5
 80a20b4:	e008      	b.n	80a20c8 <HAL_GPIO_Init+0x240>
 80a20b6:	2304      	movs	r3, #4
 80a20b8:	e006      	b.n	80a20c8 <HAL_GPIO_Init+0x240>
 80a20ba:	2303      	movs	r3, #3
 80a20bc:	e004      	b.n	80a20c8 <HAL_GPIO_Init+0x240>
 80a20be:	2302      	movs	r3, #2
 80a20c0:	e002      	b.n	80a20c8 <HAL_GPIO_Init+0x240>
 80a20c2:	2301      	movs	r3, #1
 80a20c4:	e000      	b.n	80a20c8 <HAL_GPIO_Init+0x240>
 80a20c6:	2300      	movs	r3, #0
 80a20c8:	69fa      	ldr	r2, [r7, #28]
 80a20ca:	f002 0203 	and.w	r2, r2, #3
 80a20ce:	0092      	lsls	r2, r2, #2
 80a20d0:	4093      	lsls	r3, r2
 80a20d2:	69ba      	ldr	r2, [r7, #24]
 80a20d4:	4313      	orrs	r3, r2
 80a20d6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80a20d8:	4934      	ldr	r1, [pc, #208]	; (80a21ac <HAL_GPIO_Init+0x324>)
 80a20da:	69fb      	ldr	r3, [r7, #28]
 80a20dc:	089b      	lsrs	r3, r3, #2
 80a20de:	3302      	adds	r3, #2
 80a20e0:	69ba      	ldr	r2, [r7, #24]
 80a20e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80a20e6:	4b3c      	ldr	r3, [pc, #240]	; (80a21d8 <HAL_GPIO_Init+0x350>)
 80a20e8:	681b      	ldr	r3, [r3, #0]
 80a20ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80a20ec:	693b      	ldr	r3, [r7, #16]
 80a20ee:	43db      	mvns	r3, r3
 80a20f0:	69ba      	ldr	r2, [r7, #24]
 80a20f2:	4013      	ands	r3, r2
 80a20f4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80a20f6:	683b      	ldr	r3, [r7, #0]
 80a20f8:	685b      	ldr	r3, [r3, #4]
 80a20fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80a20fe:	2b00      	cmp	r3, #0
 80a2100:	d003      	beq.n	80a210a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80a2102:	69ba      	ldr	r2, [r7, #24]
 80a2104:	693b      	ldr	r3, [r7, #16]
 80a2106:	4313      	orrs	r3, r2
 80a2108:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80a210a:	4a33      	ldr	r2, [pc, #204]	; (80a21d8 <HAL_GPIO_Init+0x350>)
 80a210c:	69bb      	ldr	r3, [r7, #24]
 80a210e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80a2110:	4b31      	ldr	r3, [pc, #196]	; (80a21d8 <HAL_GPIO_Init+0x350>)
 80a2112:	685b      	ldr	r3, [r3, #4]
 80a2114:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80a2116:	693b      	ldr	r3, [r7, #16]
 80a2118:	43db      	mvns	r3, r3
 80a211a:	69ba      	ldr	r2, [r7, #24]
 80a211c:	4013      	ands	r3, r2
 80a211e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80a2120:	683b      	ldr	r3, [r7, #0]
 80a2122:	685b      	ldr	r3, [r3, #4]
 80a2124:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80a2128:	2b00      	cmp	r3, #0
 80a212a:	d003      	beq.n	80a2134 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80a212c:	69ba      	ldr	r2, [r7, #24]
 80a212e:	693b      	ldr	r3, [r7, #16]
 80a2130:	4313      	orrs	r3, r2
 80a2132:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80a2134:	4a28      	ldr	r2, [pc, #160]	; (80a21d8 <HAL_GPIO_Init+0x350>)
 80a2136:	69bb      	ldr	r3, [r7, #24]
 80a2138:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80a213a:	4b27      	ldr	r3, [pc, #156]	; (80a21d8 <HAL_GPIO_Init+0x350>)
 80a213c:	689b      	ldr	r3, [r3, #8]
 80a213e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80a2140:	693b      	ldr	r3, [r7, #16]
 80a2142:	43db      	mvns	r3, r3
 80a2144:	69ba      	ldr	r2, [r7, #24]
 80a2146:	4013      	ands	r3, r2
 80a2148:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80a214a:	683b      	ldr	r3, [r7, #0]
 80a214c:	685b      	ldr	r3, [r3, #4]
 80a214e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80a2152:	2b00      	cmp	r3, #0
 80a2154:	d003      	beq.n	80a215e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80a2156:	69ba      	ldr	r2, [r7, #24]
 80a2158:	693b      	ldr	r3, [r7, #16]
 80a215a:	4313      	orrs	r3, r2
 80a215c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80a215e:	4a1e      	ldr	r2, [pc, #120]	; (80a21d8 <HAL_GPIO_Init+0x350>)
 80a2160:	69bb      	ldr	r3, [r7, #24]
 80a2162:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80a2164:	4b1c      	ldr	r3, [pc, #112]	; (80a21d8 <HAL_GPIO_Init+0x350>)
 80a2166:	68db      	ldr	r3, [r3, #12]
 80a2168:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80a216a:	693b      	ldr	r3, [r7, #16]
 80a216c:	43db      	mvns	r3, r3
 80a216e:	69ba      	ldr	r2, [r7, #24]
 80a2170:	4013      	ands	r3, r2
 80a2172:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80a2174:	683b      	ldr	r3, [r7, #0]
 80a2176:	685b      	ldr	r3, [r3, #4]
 80a2178:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80a217c:	2b00      	cmp	r3, #0
 80a217e:	d003      	beq.n	80a2188 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80a2180:	69ba      	ldr	r2, [r7, #24]
 80a2182:	693b      	ldr	r3, [r7, #16]
 80a2184:	4313      	orrs	r3, r2
 80a2186:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80a2188:	4a13      	ldr	r2, [pc, #76]	; (80a21d8 <HAL_GPIO_Init+0x350>)
 80a218a:	69bb      	ldr	r3, [r7, #24]
 80a218c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80a218e:	69fb      	ldr	r3, [r7, #28]
 80a2190:	3301      	adds	r3, #1
 80a2192:	61fb      	str	r3, [r7, #28]
 80a2194:	69fb      	ldr	r3, [r7, #28]
 80a2196:	2b0f      	cmp	r3, #15
 80a2198:	f67f ae84 	bls.w	80a1ea4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80a219c:	bf00      	nop
 80a219e:	3724      	adds	r7, #36	; 0x24
 80a21a0:	46bd      	mov	sp, r7
 80a21a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80a21a6:	4770      	bx	lr
 80a21a8:	40023800 	.word	0x40023800
 80a21ac:	40013800 	.word	0x40013800
 80a21b0:	40020000 	.word	0x40020000
 80a21b4:	40020400 	.word	0x40020400
 80a21b8:	40020800 	.word	0x40020800
 80a21bc:	40020c00 	.word	0x40020c00
 80a21c0:	40021000 	.word	0x40021000
 80a21c4:	40021400 	.word	0x40021400
 80a21c8:	40021800 	.word	0x40021800
 80a21cc:	40021c00 	.word	0x40021c00
 80a21d0:	40022000 	.word	0x40022000
 80a21d4:	40022400 	.word	0x40022400
 80a21d8:	40013c00 	.word	0x40013c00

080a21dc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80a21dc:	b480      	push	{r7}
 80a21de:	b083      	sub	sp, #12
 80a21e0:	af00      	add	r7, sp, #0
 80a21e2:	6078      	str	r0, [r7, #4]
 80a21e4:	460b      	mov	r3, r1
 80a21e6:	807b      	strh	r3, [r7, #2]
 80a21e8:	4613      	mov	r3, r2
 80a21ea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80a21ec:	787b      	ldrb	r3, [r7, #1]
 80a21ee:	2b00      	cmp	r3, #0
 80a21f0:	d003      	beq.n	80a21fa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80a21f2:	887a      	ldrh	r2, [r7, #2]
 80a21f4:	687b      	ldr	r3, [r7, #4]
 80a21f6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80a21f8:	e003      	b.n	80a2202 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80a21fa:	887b      	ldrh	r3, [r7, #2]
 80a21fc:	041a      	lsls	r2, r3, #16
 80a21fe:	687b      	ldr	r3, [r7, #4]
 80a2200:	619a      	str	r2, [r3, #24]
}
 80a2202:	bf00      	nop
 80a2204:	370c      	adds	r7, #12
 80a2206:	46bd      	mov	sp, r7
 80a2208:	f85d 7b04 	ldr.w	r7, [sp], #4
 80a220c:	4770      	bx	lr

080a220e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80a220e:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a2210:	b08f      	sub	sp, #60	; 0x3c
 80a2212:	af0a      	add	r7, sp, #40	; 0x28
 80a2214:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80a2216:	687b      	ldr	r3, [r7, #4]
 80a2218:	2b00      	cmp	r3, #0
 80a221a:	d101      	bne.n	80a2220 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80a221c:	2301      	movs	r3, #1
 80a221e:	e10f      	b.n	80a2440 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80a2220:	687b      	ldr	r3, [r7, #4]
 80a2222:	681b      	ldr	r3, [r3, #0]
 80a2224:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80a2226:	687b      	ldr	r3, [r7, #4]
 80a2228:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 80a222c:	b2db      	uxtb	r3, r3
 80a222e:	2b00      	cmp	r3, #0
 80a2230:	d106      	bne.n	80a2240 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80a2232:	687b      	ldr	r3, [r7, #4]
 80a2234:	2200      	movs	r2, #0
 80a2236:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80a223a:	6878      	ldr	r0, [r7, #4]
 80a223c:	f7fe feda 	bl	80a0ff4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80a2240:	687b      	ldr	r3, [r7, #4]
 80a2242:	2203      	movs	r2, #3
 80a2244:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80a2248:	68bb      	ldr	r3, [r7, #8]
 80a224a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80a224c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80a2250:	2b00      	cmp	r3, #0
 80a2252:	d102      	bne.n	80a225a <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80a2254:	687b      	ldr	r3, [r7, #4]
 80a2256:	2200      	movs	r2, #0
 80a2258:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80a225a:	687b      	ldr	r3, [r7, #4]
 80a225c:	681b      	ldr	r3, [r3, #0]
 80a225e:	4618      	mov	r0, r3
 80a2260:	f001 fa61 	bl	80a3726 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80a2264:	687b      	ldr	r3, [r7, #4]
 80a2266:	681b      	ldr	r3, [r3, #0]
 80a2268:	603b      	str	r3, [r7, #0]
 80a226a:	687e      	ldr	r6, [r7, #4]
 80a226c:	466d      	mov	r5, sp
 80a226e:	f106 0410 	add.w	r4, r6, #16
 80a2272:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80a2274:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80a2276:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80a2278:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80a227a:	e894 0003 	ldmia.w	r4, {r0, r1}
 80a227e:	e885 0003 	stmia.w	r5, {r0, r1}
 80a2282:	1d33      	adds	r3, r6, #4
 80a2284:	cb0e      	ldmia	r3, {r1, r2, r3}
 80a2286:	6838      	ldr	r0, [r7, #0]
 80a2288:	f001 f9ec 	bl	80a3664 <USB_CoreInit>
 80a228c:	4603      	mov	r3, r0
 80a228e:	2b00      	cmp	r3, #0
 80a2290:	d005      	beq.n	80a229e <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80a2292:	687b      	ldr	r3, [r7, #4]
 80a2294:	2202      	movs	r2, #2
 80a2296:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80a229a:	2301      	movs	r3, #1
 80a229c:	e0d0      	b.n	80a2440 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80a229e:	687b      	ldr	r3, [r7, #4]
 80a22a0:	681b      	ldr	r3, [r3, #0]
 80a22a2:	2100      	movs	r1, #0
 80a22a4:	4618      	mov	r0, r3
 80a22a6:	f001 fa4f 	bl	80a3748 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80a22aa:	2300      	movs	r3, #0
 80a22ac:	73fb      	strb	r3, [r7, #15]
 80a22ae:	e04a      	b.n	80a2346 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80a22b0:	7bfa      	ldrb	r2, [r7, #15]
 80a22b2:	6879      	ldr	r1, [r7, #4]
 80a22b4:	4613      	mov	r3, r2
 80a22b6:	00db      	lsls	r3, r3, #3
 80a22b8:	1a9b      	subs	r3, r3, r2
 80a22ba:	009b      	lsls	r3, r3, #2
 80a22bc:	440b      	add	r3, r1
 80a22be:	333d      	adds	r3, #61	; 0x3d
 80a22c0:	2201      	movs	r2, #1
 80a22c2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80a22c4:	7bfa      	ldrb	r2, [r7, #15]
 80a22c6:	6879      	ldr	r1, [r7, #4]
 80a22c8:	4613      	mov	r3, r2
 80a22ca:	00db      	lsls	r3, r3, #3
 80a22cc:	1a9b      	subs	r3, r3, r2
 80a22ce:	009b      	lsls	r3, r3, #2
 80a22d0:	440b      	add	r3, r1
 80a22d2:	333c      	adds	r3, #60	; 0x3c
 80a22d4:	7bfa      	ldrb	r2, [r7, #15]
 80a22d6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80a22d8:	7bfa      	ldrb	r2, [r7, #15]
 80a22da:	7bfb      	ldrb	r3, [r7, #15]
 80a22dc:	b298      	uxth	r0, r3
 80a22de:	6879      	ldr	r1, [r7, #4]
 80a22e0:	4613      	mov	r3, r2
 80a22e2:	00db      	lsls	r3, r3, #3
 80a22e4:	1a9b      	subs	r3, r3, r2
 80a22e6:	009b      	lsls	r3, r3, #2
 80a22e8:	440b      	add	r3, r1
 80a22ea:	3342      	adds	r3, #66	; 0x42
 80a22ec:	4602      	mov	r2, r0
 80a22ee:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80a22f0:	7bfa      	ldrb	r2, [r7, #15]
 80a22f2:	6879      	ldr	r1, [r7, #4]
 80a22f4:	4613      	mov	r3, r2
 80a22f6:	00db      	lsls	r3, r3, #3
 80a22f8:	1a9b      	subs	r3, r3, r2
 80a22fa:	009b      	lsls	r3, r3, #2
 80a22fc:	440b      	add	r3, r1
 80a22fe:	333f      	adds	r3, #63	; 0x3f
 80a2300:	2200      	movs	r2, #0
 80a2302:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80a2304:	7bfa      	ldrb	r2, [r7, #15]
 80a2306:	6879      	ldr	r1, [r7, #4]
 80a2308:	4613      	mov	r3, r2
 80a230a:	00db      	lsls	r3, r3, #3
 80a230c:	1a9b      	subs	r3, r3, r2
 80a230e:	009b      	lsls	r3, r3, #2
 80a2310:	440b      	add	r3, r1
 80a2312:	3344      	adds	r3, #68	; 0x44
 80a2314:	2200      	movs	r2, #0
 80a2316:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80a2318:	7bfa      	ldrb	r2, [r7, #15]
 80a231a:	6879      	ldr	r1, [r7, #4]
 80a231c:	4613      	mov	r3, r2
 80a231e:	00db      	lsls	r3, r3, #3
 80a2320:	1a9b      	subs	r3, r3, r2
 80a2322:	009b      	lsls	r3, r3, #2
 80a2324:	440b      	add	r3, r1
 80a2326:	3348      	adds	r3, #72	; 0x48
 80a2328:	2200      	movs	r2, #0
 80a232a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80a232c:	7bfa      	ldrb	r2, [r7, #15]
 80a232e:	6879      	ldr	r1, [r7, #4]
 80a2330:	4613      	mov	r3, r2
 80a2332:	00db      	lsls	r3, r3, #3
 80a2334:	1a9b      	subs	r3, r3, r2
 80a2336:	009b      	lsls	r3, r3, #2
 80a2338:	440b      	add	r3, r1
 80a233a:	3350      	adds	r3, #80	; 0x50
 80a233c:	2200      	movs	r2, #0
 80a233e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80a2340:	7bfb      	ldrb	r3, [r7, #15]
 80a2342:	3301      	adds	r3, #1
 80a2344:	73fb      	strb	r3, [r7, #15]
 80a2346:	7bfa      	ldrb	r2, [r7, #15]
 80a2348:	687b      	ldr	r3, [r7, #4]
 80a234a:	685b      	ldr	r3, [r3, #4]
 80a234c:	429a      	cmp	r2, r3
 80a234e:	d3af      	bcc.n	80a22b0 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80a2350:	2300      	movs	r3, #0
 80a2352:	73fb      	strb	r3, [r7, #15]
 80a2354:	e044      	b.n	80a23e0 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80a2356:	7bfa      	ldrb	r2, [r7, #15]
 80a2358:	6879      	ldr	r1, [r7, #4]
 80a235a:	4613      	mov	r3, r2
 80a235c:	00db      	lsls	r3, r3, #3
 80a235e:	1a9b      	subs	r3, r3, r2
 80a2360:	009b      	lsls	r3, r3, #2
 80a2362:	440b      	add	r3, r1
 80a2364:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 80a2368:	2200      	movs	r2, #0
 80a236a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80a236c:	7bfa      	ldrb	r2, [r7, #15]
 80a236e:	6879      	ldr	r1, [r7, #4]
 80a2370:	4613      	mov	r3, r2
 80a2372:	00db      	lsls	r3, r3, #3
 80a2374:	1a9b      	subs	r3, r3, r2
 80a2376:	009b      	lsls	r3, r3, #2
 80a2378:	440b      	add	r3, r1
 80a237a:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 80a237e:	7bfa      	ldrb	r2, [r7, #15]
 80a2380:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80a2382:	7bfa      	ldrb	r2, [r7, #15]
 80a2384:	6879      	ldr	r1, [r7, #4]
 80a2386:	4613      	mov	r3, r2
 80a2388:	00db      	lsls	r3, r3, #3
 80a238a:	1a9b      	subs	r3, r3, r2
 80a238c:	009b      	lsls	r3, r3, #2
 80a238e:	440b      	add	r3, r1
 80a2390:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80a2394:	2200      	movs	r2, #0
 80a2396:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80a2398:	7bfa      	ldrb	r2, [r7, #15]
 80a239a:	6879      	ldr	r1, [r7, #4]
 80a239c:	4613      	mov	r3, r2
 80a239e:	00db      	lsls	r3, r3, #3
 80a23a0:	1a9b      	subs	r3, r3, r2
 80a23a2:	009b      	lsls	r3, r3, #2
 80a23a4:	440b      	add	r3, r1
 80a23a6:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80a23aa:	2200      	movs	r2, #0
 80a23ac:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80a23ae:	7bfa      	ldrb	r2, [r7, #15]
 80a23b0:	6879      	ldr	r1, [r7, #4]
 80a23b2:	4613      	mov	r3, r2
 80a23b4:	00db      	lsls	r3, r3, #3
 80a23b6:	1a9b      	subs	r3, r3, r2
 80a23b8:	009b      	lsls	r3, r3, #2
 80a23ba:	440b      	add	r3, r1
 80a23bc:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80a23c0:	2200      	movs	r2, #0
 80a23c2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80a23c4:	7bfa      	ldrb	r2, [r7, #15]
 80a23c6:	6879      	ldr	r1, [r7, #4]
 80a23c8:	4613      	mov	r3, r2
 80a23ca:	00db      	lsls	r3, r3, #3
 80a23cc:	1a9b      	subs	r3, r3, r2
 80a23ce:	009b      	lsls	r3, r3, #2
 80a23d0:	440b      	add	r3, r1
 80a23d2:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80a23d6:	2200      	movs	r2, #0
 80a23d8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80a23da:	7bfb      	ldrb	r3, [r7, #15]
 80a23dc:	3301      	adds	r3, #1
 80a23de:	73fb      	strb	r3, [r7, #15]
 80a23e0:	7bfa      	ldrb	r2, [r7, #15]
 80a23e2:	687b      	ldr	r3, [r7, #4]
 80a23e4:	685b      	ldr	r3, [r3, #4]
 80a23e6:	429a      	cmp	r2, r3
 80a23e8:	d3b5      	bcc.n	80a2356 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80a23ea:	687b      	ldr	r3, [r7, #4]
 80a23ec:	681b      	ldr	r3, [r3, #0]
 80a23ee:	603b      	str	r3, [r7, #0]
 80a23f0:	687e      	ldr	r6, [r7, #4]
 80a23f2:	466d      	mov	r5, sp
 80a23f4:	f106 0410 	add.w	r4, r6, #16
 80a23f8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80a23fa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80a23fc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80a23fe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80a2400:	e894 0003 	ldmia.w	r4, {r0, r1}
 80a2404:	e885 0003 	stmia.w	r5, {r0, r1}
 80a2408:	1d33      	adds	r3, r6, #4
 80a240a:	cb0e      	ldmia	r3, {r1, r2, r3}
 80a240c:	6838      	ldr	r0, [r7, #0]
 80a240e:	f001 f9c5 	bl	80a379c <USB_DevInit>
 80a2412:	4603      	mov	r3, r0
 80a2414:	2b00      	cmp	r3, #0
 80a2416:	d005      	beq.n	80a2424 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80a2418:	687b      	ldr	r3, [r7, #4]
 80a241a:	2202      	movs	r2, #2
 80a241c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80a2420:	2301      	movs	r3, #1
 80a2422:	e00d      	b.n	80a2440 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 80a2424:	687b      	ldr	r3, [r7, #4]
 80a2426:	2200      	movs	r2, #0
 80a2428:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80a242c:	687b      	ldr	r3, [r7, #4]
 80a242e:	2201      	movs	r2, #1
 80a2430:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80a2434:	687b      	ldr	r3, [r7, #4]
 80a2436:	681b      	ldr	r3, [r3, #0]
 80a2438:	4618      	mov	r0, r3
 80a243a:	f001 fb74 	bl	80a3b26 <USB_DevDisconnect>

  return HAL_OK;
 80a243e:	2300      	movs	r3, #0
}
 80a2440:	4618      	mov	r0, r3
 80a2442:	3714      	adds	r7, #20
 80a2444:	46bd      	mov	sp, r7
 80a2446:	bdf0      	pop	{r4, r5, r6, r7, pc}

080a2448 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80a2448:	b580      	push	{r7, lr}
 80a244a:	b086      	sub	sp, #24
 80a244c:	af00      	add	r7, sp, #0
 80a244e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80a2450:	687b      	ldr	r3, [r7, #4]
 80a2452:	2b00      	cmp	r3, #0
 80a2454:	d101      	bne.n	80a245a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80a2456:	2301      	movs	r3, #1
 80a2458:	e25b      	b.n	80a2912 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80a245a:	687b      	ldr	r3, [r7, #4]
 80a245c:	681b      	ldr	r3, [r3, #0]
 80a245e:	f003 0301 	and.w	r3, r3, #1
 80a2462:	2b00      	cmp	r3, #0
 80a2464:	d075      	beq.n	80a2552 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80a2466:	4ba3      	ldr	r3, [pc, #652]	; (80a26f4 <HAL_RCC_OscConfig+0x2ac>)
 80a2468:	689b      	ldr	r3, [r3, #8]
 80a246a:	f003 030c 	and.w	r3, r3, #12
 80a246e:	2b04      	cmp	r3, #4
 80a2470:	d00c      	beq.n	80a248c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80a2472:	4ba0      	ldr	r3, [pc, #640]	; (80a26f4 <HAL_RCC_OscConfig+0x2ac>)
 80a2474:	689b      	ldr	r3, [r3, #8]
 80a2476:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80a247a:	2b08      	cmp	r3, #8
 80a247c:	d112      	bne.n	80a24a4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80a247e:	4b9d      	ldr	r3, [pc, #628]	; (80a26f4 <HAL_RCC_OscConfig+0x2ac>)
 80a2480:	685b      	ldr	r3, [r3, #4]
 80a2482:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80a2486:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80a248a:	d10b      	bne.n	80a24a4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80a248c:	4b99      	ldr	r3, [pc, #612]	; (80a26f4 <HAL_RCC_OscConfig+0x2ac>)
 80a248e:	681b      	ldr	r3, [r3, #0]
 80a2490:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80a2494:	2b00      	cmp	r3, #0
 80a2496:	d05b      	beq.n	80a2550 <HAL_RCC_OscConfig+0x108>
 80a2498:	687b      	ldr	r3, [r7, #4]
 80a249a:	685b      	ldr	r3, [r3, #4]
 80a249c:	2b00      	cmp	r3, #0
 80a249e:	d157      	bne.n	80a2550 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80a24a0:	2301      	movs	r3, #1
 80a24a2:	e236      	b.n	80a2912 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80a24a4:	687b      	ldr	r3, [r7, #4]
 80a24a6:	685b      	ldr	r3, [r3, #4]
 80a24a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80a24ac:	d106      	bne.n	80a24bc <HAL_RCC_OscConfig+0x74>
 80a24ae:	4b91      	ldr	r3, [pc, #580]	; (80a26f4 <HAL_RCC_OscConfig+0x2ac>)
 80a24b0:	681b      	ldr	r3, [r3, #0]
 80a24b2:	4a90      	ldr	r2, [pc, #576]	; (80a26f4 <HAL_RCC_OscConfig+0x2ac>)
 80a24b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80a24b8:	6013      	str	r3, [r2, #0]
 80a24ba:	e01d      	b.n	80a24f8 <HAL_RCC_OscConfig+0xb0>
 80a24bc:	687b      	ldr	r3, [r7, #4]
 80a24be:	685b      	ldr	r3, [r3, #4]
 80a24c0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80a24c4:	d10c      	bne.n	80a24e0 <HAL_RCC_OscConfig+0x98>
 80a24c6:	4b8b      	ldr	r3, [pc, #556]	; (80a26f4 <HAL_RCC_OscConfig+0x2ac>)
 80a24c8:	681b      	ldr	r3, [r3, #0]
 80a24ca:	4a8a      	ldr	r2, [pc, #552]	; (80a26f4 <HAL_RCC_OscConfig+0x2ac>)
 80a24cc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80a24d0:	6013      	str	r3, [r2, #0]
 80a24d2:	4b88      	ldr	r3, [pc, #544]	; (80a26f4 <HAL_RCC_OscConfig+0x2ac>)
 80a24d4:	681b      	ldr	r3, [r3, #0]
 80a24d6:	4a87      	ldr	r2, [pc, #540]	; (80a26f4 <HAL_RCC_OscConfig+0x2ac>)
 80a24d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80a24dc:	6013      	str	r3, [r2, #0]
 80a24de:	e00b      	b.n	80a24f8 <HAL_RCC_OscConfig+0xb0>
 80a24e0:	4b84      	ldr	r3, [pc, #528]	; (80a26f4 <HAL_RCC_OscConfig+0x2ac>)
 80a24e2:	681b      	ldr	r3, [r3, #0]
 80a24e4:	4a83      	ldr	r2, [pc, #524]	; (80a26f4 <HAL_RCC_OscConfig+0x2ac>)
 80a24e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80a24ea:	6013      	str	r3, [r2, #0]
 80a24ec:	4b81      	ldr	r3, [pc, #516]	; (80a26f4 <HAL_RCC_OscConfig+0x2ac>)
 80a24ee:	681b      	ldr	r3, [r3, #0]
 80a24f0:	4a80      	ldr	r2, [pc, #512]	; (80a26f4 <HAL_RCC_OscConfig+0x2ac>)
 80a24f2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80a24f6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80a24f8:	687b      	ldr	r3, [r7, #4]
 80a24fa:	685b      	ldr	r3, [r3, #4]
 80a24fc:	2b00      	cmp	r3, #0
 80a24fe:	d013      	beq.n	80a2528 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80a2500:	f7fe ff40 	bl	80a1384 <HAL_GetTick>
 80a2504:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80a2506:	e008      	b.n	80a251a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80a2508:	f7fe ff3c 	bl	80a1384 <HAL_GetTick>
 80a250c:	4602      	mov	r2, r0
 80a250e:	693b      	ldr	r3, [r7, #16]
 80a2510:	1ad3      	subs	r3, r2, r3
 80a2512:	2b64      	cmp	r3, #100	; 0x64
 80a2514:	d901      	bls.n	80a251a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80a2516:	2303      	movs	r3, #3
 80a2518:	e1fb      	b.n	80a2912 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80a251a:	4b76      	ldr	r3, [pc, #472]	; (80a26f4 <HAL_RCC_OscConfig+0x2ac>)
 80a251c:	681b      	ldr	r3, [r3, #0]
 80a251e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80a2522:	2b00      	cmp	r3, #0
 80a2524:	d0f0      	beq.n	80a2508 <HAL_RCC_OscConfig+0xc0>
 80a2526:	e014      	b.n	80a2552 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80a2528:	f7fe ff2c 	bl	80a1384 <HAL_GetTick>
 80a252c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80a252e:	e008      	b.n	80a2542 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80a2530:	f7fe ff28 	bl	80a1384 <HAL_GetTick>
 80a2534:	4602      	mov	r2, r0
 80a2536:	693b      	ldr	r3, [r7, #16]
 80a2538:	1ad3      	subs	r3, r2, r3
 80a253a:	2b64      	cmp	r3, #100	; 0x64
 80a253c:	d901      	bls.n	80a2542 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80a253e:	2303      	movs	r3, #3
 80a2540:	e1e7      	b.n	80a2912 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80a2542:	4b6c      	ldr	r3, [pc, #432]	; (80a26f4 <HAL_RCC_OscConfig+0x2ac>)
 80a2544:	681b      	ldr	r3, [r3, #0]
 80a2546:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80a254a:	2b00      	cmp	r3, #0
 80a254c:	d1f0      	bne.n	80a2530 <HAL_RCC_OscConfig+0xe8>
 80a254e:	e000      	b.n	80a2552 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80a2550:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80a2552:	687b      	ldr	r3, [r7, #4]
 80a2554:	681b      	ldr	r3, [r3, #0]
 80a2556:	f003 0302 	and.w	r3, r3, #2
 80a255a:	2b00      	cmp	r3, #0
 80a255c:	d063      	beq.n	80a2626 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80a255e:	4b65      	ldr	r3, [pc, #404]	; (80a26f4 <HAL_RCC_OscConfig+0x2ac>)
 80a2560:	689b      	ldr	r3, [r3, #8]
 80a2562:	f003 030c 	and.w	r3, r3, #12
 80a2566:	2b00      	cmp	r3, #0
 80a2568:	d00b      	beq.n	80a2582 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80a256a:	4b62      	ldr	r3, [pc, #392]	; (80a26f4 <HAL_RCC_OscConfig+0x2ac>)
 80a256c:	689b      	ldr	r3, [r3, #8]
 80a256e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80a2572:	2b08      	cmp	r3, #8
 80a2574:	d11c      	bne.n	80a25b0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80a2576:	4b5f      	ldr	r3, [pc, #380]	; (80a26f4 <HAL_RCC_OscConfig+0x2ac>)
 80a2578:	685b      	ldr	r3, [r3, #4]
 80a257a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80a257e:	2b00      	cmp	r3, #0
 80a2580:	d116      	bne.n	80a25b0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80a2582:	4b5c      	ldr	r3, [pc, #368]	; (80a26f4 <HAL_RCC_OscConfig+0x2ac>)
 80a2584:	681b      	ldr	r3, [r3, #0]
 80a2586:	f003 0302 	and.w	r3, r3, #2
 80a258a:	2b00      	cmp	r3, #0
 80a258c:	d005      	beq.n	80a259a <HAL_RCC_OscConfig+0x152>
 80a258e:	687b      	ldr	r3, [r7, #4]
 80a2590:	68db      	ldr	r3, [r3, #12]
 80a2592:	2b01      	cmp	r3, #1
 80a2594:	d001      	beq.n	80a259a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80a2596:	2301      	movs	r3, #1
 80a2598:	e1bb      	b.n	80a2912 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80a259a:	4b56      	ldr	r3, [pc, #344]	; (80a26f4 <HAL_RCC_OscConfig+0x2ac>)
 80a259c:	681b      	ldr	r3, [r3, #0]
 80a259e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80a25a2:	687b      	ldr	r3, [r7, #4]
 80a25a4:	691b      	ldr	r3, [r3, #16]
 80a25a6:	00db      	lsls	r3, r3, #3
 80a25a8:	4952      	ldr	r1, [pc, #328]	; (80a26f4 <HAL_RCC_OscConfig+0x2ac>)
 80a25aa:	4313      	orrs	r3, r2
 80a25ac:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80a25ae:	e03a      	b.n	80a2626 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80a25b0:	687b      	ldr	r3, [r7, #4]
 80a25b2:	68db      	ldr	r3, [r3, #12]
 80a25b4:	2b00      	cmp	r3, #0
 80a25b6:	d020      	beq.n	80a25fa <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80a25b8:	4b4f      	ldr	r3, [pc, #316]	; (80a26f8 <HAL_RCC_OscConfig+0x2b0>)
 80a25ba:	2201      	movs	r2, #1
 80a25bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80a25be:	f7fe fee1 	bl	80a1384 <HAL_GetTick>
 80a25c2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80a25c4:	e008      	b.n	80a25d8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80a25c6:	f7fe fedd 	bl	80a1384 <HAL_GetTick>
 80a25ca:	4602      	mov	r2, r0
 80a25cc:	693b      	ldr	r3, [r7, #16]
 80a25ce:	1ad3      	subs	r3, r2, r3
 80a25d0:	2b02      	cmp	r3, #2
 80a25d2:	d901      	bls.n	80a25d8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80a25d4:	2303      	movs	r3, #3
 80a25d6:	e19c      	b.n	80a2912 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80a25d8:	4b46      	ldr	r3, [pc, #280]	; (80a26f4 <HAL_RCC_OscConfig+0x2ac>)
 80a25da:	681b      	ldr	r3, [r3, #0]
 80a25dc:	f003 0302 	and.w	r3, r3, #2
 80a25e0:	2b00      	cmp	r3, #0
 80a25e2:	d0f0      	beq.n	80a25c6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80a25e4:	4b43      	ldr	r3, [pc, #268]	; (80a26f4 <HAL_RCC_OscConfig+0x2ac>)
 80a25e6:	681b      	ldr	r3, [r3, #0]
 80a25e8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80a25ec:	687b      	ldr	r3, [r7, #4]
 80a25ee:	691b      	ldr	r3, [r3, #16]
 80a25f0:	00db      	lsls	r3, r3, #3
 80a25f2:	4940      	ldr	r1, [pc, #256]	; (80a26f4 <HAL_RCC_OscConfig+0x2ac>)
 80a25f4:	4313      	orrs	r3, r2
 80a25f6:	600b      	str	r3, [r1, #0]
 80a25f8:	e015      	b.n	80a2626 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80a25fa:	4b3f      	ldr	r3, [pc, #252]	; (80a26f8 <HAL_RCC_OscConfig+0x2b0>)
 80a25fc:	2200      	movs	r2, #0
 80a25fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80a2600:	f7fe fec0 	bl	80a1384 <HAL_GetTick>
 80a2604:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80a2606:	e008      	b.n	80a261a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80a2608:	f7fe febc 	bl	80a1384 <HAL_GetTick>
 80a260c:	4602      	mov	r2, r0
 80a260e:	693b      	ldr	r3, [r7, #16]
 80a2610:	1ad3      	subs	r3, r2, r3
 80a2612:	2b02      	cmp	r3, #2
 80a2614:	d901      	bls.n	80a261a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80a2616:	2303      	movs	r3, #3
 80a2618:	e17b      	b.n	80a2912 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80a261a:	4b36      	ldr	r3, [pc, #216]	; (80a26f4 <HAL_RCC_OscConfig+0x2ac>)
 80a261c:	681b      	ldr	r3, [r3, #0]
 80a261e:	f003 0302 	and.w	r3, r3, #2
 80a2622:	2b00      	cmp	r3, #0
 80a2624:	d1f0      	bne.n	80a2608 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80a2626:	687b      	ldr	r3, [r7, #4]
 80a2628:	681b      	ldr	r3, [r3, #0]
 80a262a:	f003 0308 	and.w	r3, r3, #8
 80a262e:	2b00      	cmp	r3, #0
 80a2630:	d030      	beq.n	80a2694 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80a2632:	687b      	ldr	r3, [r7, #4]
 80a2634:	695b      	ldr	r3, [r3, #20]
 80a2636:	2b00      	cmp	r3, #0
 80a2638:	d016      	beq.n	80a2668 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80a263a:	4b30      	ldr	r3, [pc, #192]	; (80a26fc <HAL_RCC_OscConfig+0x2b4>)
 80a263c:	2201      	movs	r2, #1
 80a263e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80a2640:	f7fe fea0 	bl	80a1384 <HAL_GetTick>
 80a2644:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80a2646:	e008      	b.n	80a265a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80a2648:	f7fe fe9c 	bl	80a1384 <HAL_GetTick>
 80a264c:	4602      	mov	r2, r0
 80a264e:	693b      	ldr	r3, [r7, #16]
 80a2650:	1ad3      	subs	r3, r2, r3
 80a2652:	2b02      	cmp	r3, #2
 80a2654:	d901      	bls.n	80a265a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80a2656:	2303      	movs	r3, #3
 80a2658:	e15b      	b.n	80a2912 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80a265a:	4b26      	ldr	r3, [pc, #152]	; (80a26f4 <HAL_RCC_OscConfig+0x2ac>)
 80a265c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80a265e:	f003 0302 	and.w	r3, r3, #2
 80a2662:	2b00      	cmp	r3, #0
 80a2664:	d0f0      	beq.n	80a2648 <HAL_RCC_OscConfig+0x200>
 80a2666:	e015      	b.n	80a2694 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80a2668:	4b24      	ldr	r3, [pc, #144]	; (80a26fc <HAL_RCC_OscConfig+0x2b4>)
 80a266a:	2200      	movs	r2, #0
 80a266c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80a266e:	f7fe fe89 	bl	80a1384 <HAL_GetTick>
 80a2672:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80a2674:	e008      	b.n	80a2688 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80a2676:	f7fe fe85 	bl	80a1384 <HAL_GetTick>
 80a267a:	4602      	mov	r2, r0
 80a267c:	693b      	ldr	r3, [r7, #16]
 80a267e:	1ad3      	subs	r3, r2, r3
 80a2680:	2b02      	cmp	r3, #2
 80a2682:	d901      	bls.n	80a2688 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80a2684:	2303      	movs	r3, #3
 80a2686:	e144      	b.n	80a2912 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80a2688:	4b1a      	ldr	r3, [pc, #104]	; (80a26f4 <HAL_RCC_OscConfig+0x2ac>)
 80a268a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80a268c:	f003 0302 	and.w	r3, r3, #2
 80a2690:	2b00      	cmp	r3, #0
 80a2692:	d1f0      	bne.n	80a2676 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80a2694:	687b      	ldr	r3, [r7, #4]
 80a2696:	681b      	ldr	r3, [r3, #0]
 80a2698:	f003 0304 	and.w	r3, r3, #4
 80a269c:	2b00      	cmp	r3, #0
 80a269e:	f000 80a0 	beq.w	80a27e2 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80a26a2:	2300      	movs	r3, #0
 80a26a4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80a26a6:	4b13      	ldr	r3, [pc, #76]	; (80a26f4 <HAL_RCC_OscConfig+0x2ac>)
 80a26a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80a26aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80a26ae:	2b00      	cmp	r3, #0
 80a26b0:	d10f      	bne.n	80a26d2 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80a26b2:	2300      	movs	r3, #0
 80a26b4:	60bb      	str	r3, [r7, #8]
 80a26b6:	4b0f      	ldr	r3, [pc, #60]	; (80a26f4 <HAL_RCC_OscConfig+0x2ac>)
 80a26b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80a26ba:	4a0e      	ldr	r2, [pc, #56]	; (80a26f4 <HAL_RCC_OscConfig+0x2ac>)
 80a26bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80a26c0:	6413      	str	r3, [r2, #64]	; 0x40
 80a26c2:	4b0c      	ldr	r3, [pc, #48]	; (80a26f4 <HAL_RCC_OscConfig+0x2ac>)
 80a26c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80a26c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80a26ca:	60bb      	str	r3, [r7, #8]
 80a26cc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80a26ce:	2301      	movs	r3, #1
 80a26d0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80a26d2:	4b0b      	ldr	r3, [pc, #44]	; (80a2700 <HAL_RCC_OscConfig+0x2b8>)
 80a26d4:	681b      	ldr	r3, [r3, #0]
 80a26d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80a26da:	2b00      	cmp	r3, #0
 80a26dc:	d121      	bne.n	80a2722 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80a26de:	4b08      	ldr	r3, [pc, #32]	; (80a2700 <HAL_RCC_OscConfig+0x2b8>)
 80a26e0:	681b      	ldr	r3, [r3, #0]
 80a26e2:	4a07      	ldr	r2, [pc, #28]	; (80a2700 <HAL_RCC_OscConfig+0x2b8>)
 80a26e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80a26e8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80a26ea:	f7fe fe4b 	bl	80a1384 <HAL_GetTick>
 80a26ee:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80a26f0:	e011      	b.n	80a2716 <HAL_RCC_OscConfig+0x2ce>
 80a26f2:	bf00      	nop
 80a26f4:	40023800 	.word	0x40023800
 80a26f8:	42470000 	.word	0x42470000
 80a26fc:	42470e80 	.word	0x42470e80
 80a2700:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80a2704:	f7fe fe3e 	bl	80a1384 <HAL_GetTick>
 80a2708:	4602      	mov	r2, r0
 80a270a:	693b      	ldr	r3, [r7, #16]
 80a270c:	1ad3      	subs	r3, r2, r3
 80a270e:	2b02      	cmp	r3, #2
 80a2710:	d901      	bls.n	80a2716 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80a2712:	2303      	movs	r3, #3
 80a2714:	e0fd      	b.n	80a2912 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80a2716:	4b81      	ldr	r3, [pc, #516]	; (80a291c <HAL_RCC_OscConfig+0x4d4>)
 80a2718:	681b      	ldr	r3, [r3, #0]
 80a271a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80a271e:	2b00      	cmp	r3, #0
 80a2720:	d0f0      	beq.n	80a2704 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80a2722:	687b      	ldr	r3, [r7, #4]
 80a2724:	689b      	ldr	r3, [r3, #8]
 80a2726:	2b01      	cmp	r3, #1
 80a2728:	d106      	bne.n	80a2738 <HAL_RCC_OscConfig+0x2f0>
 80a272a:	4b7d      	ldr	r3, [pc, #500]	; (80a2920 <HAL_RCC_OscConfig+0x4d8>)
 80a272c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80a272e:	4a7c      	ldr	r2, [pc, #496]	; (80a2920 <HAL_RCC_OscConfig+0x4d8>)
 80a2730:	f043 0301 	orr.w	r3, r3, #1
 80a2734:	6713      	str	r3, [r2, #112]	; 0x70
 80a2736:	e01c      	b.n	80a2772 <HAL_RCC_OscConfig+0x32a>
 80a2738:	687b      	ldr	r3, [r7, #4]
 80a273a:	689b      	ldr	r3, [r3, #8]
 80a273c:	2b05      	cmp	r3, #5
 80a273e:	d10c      	bne.n	80a275a <HAL_RCC_OscConfig+0x312>
 80a2740:	4b77      	ldr	r3, [pc, #476]	; (80a2920 <HAL_RCC_OscConfig+0x4d8>)
 80a2742:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80a2744:	4a76      	ldr	r2, [pc, #472]	; (80a2920 <HAL_RCC_OscConfig+0x4d8>)
 80a2746:	f043 0304 	orr.w	r3, r3, #4
 80a274a:	6713      	str	r3, [r2, #112]	; 0x70
 80a274c:	4b74      	ldr	r3, [pc, #464]	; (80a2920 <HAL_RCC_OscConfig+0x4d8>)
 80a274e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80a2750:	4a73      	ldr	r2, [pc, #460]	; (80a2920 <HAL_RCC_OscConfig+0x4d8>)
 80a2752:	f043 0301 	orr.w	r3, r3, #1
 80a2756:	6713      	str	r3, [r2, #112]	; 0x70
 80a2758:	e00b      	b.n	80a2772 <HAL_RCC_OscConfig+0x32a>
 80a275a:	4b71      	ldr	r3, [pc, #452]	; (80a2920 <HAL_RCC_OscConfig+0x4d8>)
 80a275c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80a275e:	4a70      	ldr	r2, [pc, #448]	; (80a2920 <HAL_RCC_OscConfig+0x4d8>)
 80a2760:	f023 0301 	bic.w	r3, r3, #1
 80a2764:	6713      	str	r3, [r2, #112]	; 0x70
 80a2766:	4b6e      	ldr	r3, [pc, #440]	; (80a2920 <HAL_RCC_OscConfig+0x4d8>)
 80a2768:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80a276a:	4a6d      	ldr	r2, [pc, #436]	; (80a2920 <HAL_RCC_OscConfig+0x4d8>)
 80a276c:	f023 0304 	bic.w	r3, r3, #4
 80a2770:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80a2772:	687b      	ldr	r3, [r7, #4]
 80a2774:	689b      	ldr	r3, [r3, #8]
 80a2776:	2b00      	cmp	r3, #0
 80a2778:	d015      	beq.n	80a27a6 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80a277a:	f7fe fe03 	bl	80a1384 <HAL_GetTick>
 80a277e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80a2780:	e00a      	b.n	80a2798 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80a2782:	f7fe fdff 	bl	80a1384 <HAL_GetTick>
 80a2786:	4602      	mov	r2, r0
 80a2788:	693b      	ldr	r3, [r7, #16]
 80a278a:	1ad3      	subs	r3, r2, r3
 80a278c:	f241 3288 	movw	r2, #5000	; 0x1388
 80a2790:	4293      	cmp	r3, r2
 80a2792:	d901      	bls.n	80a2798 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80a2794:	2303      	movs	r3, #3
 80a2796:	e0bc      	b.n	80a2912 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80a2798:	4b61      	ldr	r3, [pc, #388]	; (80a2920 <HAL_RCC_OscConfig+0x4d8>)
 80a279a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80a279c:	f003 0302 	and.w	r3, r3, #2
 80a27a0:	2b00      	cmp	r3, #0
 80a27a2:	d0ee      	beq.n	80a2782 <HAL_RCC_OscConfig+0x33a>
 80a27a4:	e014      	b.n	80a27d0 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80a27a6:	f7fe fded 	bl	80a1384 <HAL_GetTick>
 80a27aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80a27ac:	e00a      	b.n	80a27c4 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80a27ae:	f7fe fde9 	bl	80a1384 <HAL_GetTick>
 80a27b2:	4602      	mov	r2, r0
 80a27b4:	693b      	ldr	r3, [r7, #16]
 80a27b6:	1ad3      	subs	r3, r2, r3
 80a27b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80a27bc:	4293      	cmp	r3, r2
 80a27be:	d901      	bls.n	80a27c4 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80a27c0:	2303      	movs	r3, #3
 80a27c2:	e0a6      	b.n	80a2912 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80a27c4:	4b56      	ldr	r3, [pc, #344]	; (80a2920 <HAL_RCC_OscConfig+0x4d8>)
 80a27c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80a27c8:	f003 0302 	and.w	r3, r3, #2
 80a27cc:	2b00      	cmp	r3, #0
 80a27ce:	d1ee      	bne.n	80a27ae <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80a27d0:	7dfb      	ldrb	r3, [r7, #23]
 80a27d2:	2b01      	cmp	r3, #1
 80a27d4:	d105      	bne.n	80a27e2 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80a27d6:	4b52      	ldr	r3, [pc, #328]	; (80a2920 <HAL_RCC_OscConfig+0x4d8>)
 80a27d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80a27da:	4a51      	ldr	r2, [pc, #324]	; (80a2920 <HAL_RCC_OscConfig+0x4d8>)
 80a27dc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80a27e0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80a27e2:	687b      	ldr	r3, [r7, #4]
 80a27e4:	699b      	ldr	r3, [r3, #24]
 80a27e6:	2b00      	cmp	r3, #0
 80a27e8:	f000 8092 	beq.w	80a2910 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80a27ec:	4b4c      	ldr	r3, [pc, #304]	; (80a2920 <HAL_RCC_OscConfig+0x4d8>)
 80a27ee:	689b      	ldr	r3, [r3, #8]
 80a27f0:	f003 030c 	and.w	r3, r3, #12
 80a27f4:	2b08      	cmp	r3, #8
 80a27f6:	d05c      	beq.n	80a28b2 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80a27f8:	687b      	ldr	r3, [r7, #4]
 80a27fa:	699b      	ldr	r3, [r3, #24]
 80a27fc:	2b02      	cmp	r3, #2
 80a27fe:	d141      	bne.n	80a2884 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80a2800:	4b48      	ldr	r3, [pc, #288]	; (80a2924 <HAL_RCC_OscConfig+0x4dc>)
 80a2802:	2200      	movs	r2, #0
 80a2804:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80a2806:	f7fe fdbd 	bl	80a1384 <HAL_GetTick>
 80a280a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80a280c:	e008      	b.n	80a2820 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80a280e:	f7fe fdb9 	bl	80a1384 <HAL_GetTick>
 80a2812:	4602      	mov	r2, r0
 80a2814:	693b      	ldr	r3, [r7, #16]
 80a2816:	1ad3      	subs	r3, r2, r3
 80a2818:	2b02      	cmp	r3, #2
 80a281a:	d901      	bls.n	80a2820 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80a281c:	2303      	movs	r3, #3
 80a281e:	e078      	b.n	80a2912 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80a2820:	4b3f      	ldr	r3, [pc, #252]	; (80a2920 <HAL_RCC_OscConfig+0x4d8>)
 80a2822:	681b      	ldr	r3, [r3, #0]
 80a2824:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80a2828:	2b00      	cmp	r3, #0
 80a282a:	d1f0      	bne.n	80a280e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80a282c:	687b      	ldr	r3, [r7, #4]
 80a282e:	69da      	ldr	r2, [r3, #28]
 80a2830:	687b      	ldr	r3, [r7, #4]
 80a2832:	6a1b      	ldr	r3, [r3, #32]
 80a2834:	431a      	orrs	r2, r3
 80a2836:	687b      	ldr	r3, [r7, #4]
 80a2838:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a283a:	019b      	lsls	r3, r3, #6
 80a283c:	431a      	orrs	r2, r3
 80a283e:	687b      	ldr	r3, [r7, #4]
 80a2840:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80a2842:	085b      	lsrs	r3, r3, #1
 80a2844:	3b01      	subs	r3, #1
 80a2846:	041b      	lsls	r3, r3, #16
 80a2848:	431a      	orrs	r2, r3
 80a284a:	687b      	ldr	r3, [r7, #4]
 80a284c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a284e:	061b      	lsls	r3, r3, #24
 80a2850:	4933      	ldr	r1, [pc, #204]	; (80a2920 <HAL_RCC_OscConfig+0x4d8>)
 80a2852:	4313      	orrs	r3, r2
 80a2854:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80a2856:	4b33      	ldr	r3, [pc, #204]	; (80a2924 <HAL_RCC_OscConfig+0x4dc>)
 80a2858:	2201      	movs	r2, #1
 80a285a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80a285c:	f7fe fd92 	bl	80a1384 <HAL_GetTick>
 80a2860:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80a2862:	e008      	b.n	80a2876 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80a2864:	f7fe fd8e 	bl	80a1384 <HAL_GetTick>
 80a2868:	4602      	mov	r2, r0
 80a286a:	693b      	ldr	r3, [r7, #16]
 80a286c:	1ad3      	subs	r3, r2, r3
 80a286e:	2b02      	cmp	r3, #2
 80a2870:	d901      	bls.n	80a2876 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80a2872:	2303      	movs	r3, #3
 80a2874:	e04d      	b.n	80a2912 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80a2876:	4b2a      	ldr	r3, [pc, #168]	; (80a2920 <HAL_RCC_OscConfig+0x4d8>)
 80a2878:	681b      	ldr	r3, [r3, #0]
 80a287a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80a287e:	2b00      	cmp	r3, #0
 80a2880:	d0f0      	beq.n	80a2864 <HAL_RCC_OscConfig+0x41c>
 80a2882:	e045      	b.n	80a2910 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80a2884:	4b27      	ldr	r3, [pc, #156]	; (80a2924 <HAL_RCC_OscConfig+0x4dc>)
 80a2886:	2200      	movs	r2, #0
 80a2888:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80a288a:	f7fe fd7b 	bl	80a1384 <HAL_GetTick>
 80a288e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80a2890:	e008      	b.n	80a28a4 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80a2892:	f7fe fd77 	bl	80a1384 <HAL_GetTick>
 80a2896:	4602      	mov	r2, r0
 80a2898:	693b      	ldr	r3, [r7, #16]
 80a289a:	1ad3      	subs	r3, r2, r3
 80a289c:	2b02      	cmp	r3, #2
 80a289e:	d901      	bls.n	80a28a4 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80a28a0:	2303      	movs	r3, #3
 80a28a2:	e036      	b.n	80a2912 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80a28a4:	4b1e      	ldr	r3, [pc, #120]	; (80a2920 <HAL_RCC_OscConfig+0x4d8>)
 80a28a6:	681b      	ldr	r3, [r3, #0]
 80a28a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80a28ac:	2b00      	cmp	r3, #0
 80a28ae:	d1f0      	bne.n	80a2892 <HAL_RCC_OscConfig+0x44a>
 80a28b0:	e02e      	b.n	80a2910 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80a28b2:	687b      	ldr	r3, [r7, #4]
 80a28b4:	699b      	ldr	r3, [r3, #24]
 80a28b6:	2b01      	cmp	r3, #1
 80a28b8:	d101      	bne.n	80a28be <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80a28ba:	2301      	movs	r3, #1
 80a28bc:	e029      	b.n	80a2912 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80a28be:	4b18      	ldr	r3, [pc, #96]	; (80a2920 <HAL_RCC_OscConfig+0x4d8>)
 80a28c0:	685b      	ldr	r3, [r3, #4]
 80a28c2:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80a28c4:	68fb      	ldr	r3, [r7, #12]
 80a28c6:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80a28ca:	687b      	ldr	r3, [r7, #4]
 80a28cc:	69db      	ldr	r3, [r3, #28]
 80a28ce:	429a      	cmp	r2, r3
 80a28d0:	d11c      	bne.n	80a290c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80a28d2:	68fb      	ldr	r3, [r7, #12]
 80a28d4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80a28d8:	687b      	ldr	r3, [r7, #4]
 80a28da:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80a28dc:	429a      	cmp	r2, r3
 80a28de:	d115      	bne.n	80a290c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80a28e0:	68fa      	ldr	r2, [r7, #12]
 80a28e2:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80a28e6:	4013      	ands	r3, r2
 80a28e8:	687a      	ldr	r2, [r7, #4]
 80a28ea:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80a28ec:	4293      	cmp	r3, r2
 80a28ee:	d10d      	bne.n	80a290c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80a28f0:	68fb      	ldr	r3, [r7, #12]
 80a28f2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80a28f6:	687b      	ldr	r3, [r7, #4]
 80a28f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80a28fa:	429a      	cmp	r2, r3
 80a28fc:	d106      	bne.n	80a290c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80a28fe:	68fb      	ldr	r3, [r7, #12]
 80a2900:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80a2904:	687b      	ldr	r3, [r7, #4]
 80a2906:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80a2908:	429a      	cmp	r2, r3
 80a290a:	d001      	beq.n	80a2910 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80a290c:	2301      	movs	r3, #1
 80a290e:	e000      	b.n	80a2912 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 80a2910:	2300      	movs	r3, #0
}
 80a2912:	4618      	mov	r0, r3
 80a2914:	3718      	adds	r7, #24
 80a2916:	46bd      	mov	sp, r7
 80a2918:	bd80      	pop	{r7, pc}
 80a291a:	bf00      	nop
 80a291c:	40007000 	.word	0x40007000
 80a2920:	40023800 	.word	0x40023800
 80a2924:	42470060 	.word	0x42470060

080a2928 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80a2928:	b580      	push	{r7, lr}
 80a292a:	b084      	sub	sp, #16
 80a292c:	af00      	add	r7, sp, #0
 80a292e:	6078      	str	r0, [r7, #4]
 80a2930:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80a2932:	687b      	ldr	r3, [r7, #4]
 80a2934:	2b00      	cmp	r3, #0
 80a2936:	d101      	bne.n	80a293c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80a2938:	2301      	movs	r3, #1
 80a293a:	e0cc      	b.n	80a2ad6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80a293c:	4b68      	ldr	r3, [pc, #416]	; (80a2ae0 <HAL_RCC_ClockConfig+0x1b8>)
 80a293e:	681b      	ldr	r3, [r3, #0]
 80a2940:	f003 030f 	and.w	r3, r3, #15
 80a2944:	683a      	ldr	r2, [r7, #0]
 80a2946:	429a      	cmp	r2, r3
 80a2948:	d90c      	bls.n	80a2964 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80a294a:	4b65      	ldr	r3, [pc, #404]	; (80a2ae0 <HAL_RCC_ClockConfig+0x1b8>)
 80a294c:	683a      	ldr	r2, [r7, #0]
 80a294e:	b2d2      	uxtb	r2, r2
 80a2950:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80a2952:	4b63      	ldr	r3, [pc, #396]	; (80a2ae0 <HAL_RCC_ClockConfig+0x1b8>)
 80a2954:	681b      	ldr	r3, [r3, #0]
 80a2956:	f003 030f 	and.w	r3, r3, #15
 80a295a:	683a      	ldr	r2, [r7, #0]
 80a295c:	429a      	cmp	r2, r3
 80a295e:	d001      	beq.n	80a2964 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80a2960:	2301      	movs	r3, #1
 80a2962:	e0b8      	b.n	80a2ad6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80a2964:	687b      	ldr	r3, [r7, #4]
 80a2966:	681b      	ldr	r3, [r3, #0]
 80a2968:	f003 0302 	and.w	r3, r3, #2
 80a296c:	2b00      	cmp	r3, #0
 80a296e:	d020      	beq.n	80a29b2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80a2970:	687b      	ldr	r3, [r7, #4]
 80a2972:	681b      	ldr	r3, [r3, #0]
 80a2974:	f003 0304 	and.w	r3, r3, #4
 80a2978:	2b00      	cmp	r3, #0
 80a297a:	d005      	beq.n	80a2988 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80a297c:	4b59      	ldr	r3, [pc, #356]	; (80a2ae4 <HAL_RCC_ClockConfig+0x1bc>)
 80a297e:	689b      	ldr	r3, [r3, #8]
 80a2980:	4a58      	ldr	r2, [pc, #352]	; (80a2ae4 <HAL_RCC_ClockConfig+0x1bc>)
 80a2982:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80a2986:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80a2988:	687b      	ldr	r3, [r7, #4]
 80a298a:	681b      	ldr	r3, [r3, #0]
 80a298c:	f003 0308 	and.w	r3, r3, #8
 80a2990:	2b00      	cmp	r3, #0
 80a2992:	d005      	beq.n	80a29a0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80a2994:	4b53      	ldr	r3, [pc, #332]	; (80a2ae4 <HAL_RCC_ClockConfig+0x1bc>)
 80a2996:	689b      	ldr	r3, [r3, #8]
 80a2998:	4a52      	ldr	r2, [pc, #328]	; (80a2ae4 <HAL_RCC_ClockConfig+0x1bc>)
 80a299a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80a299e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80a29a0:	4b50      	ldr	r3, [pc, #320]	; (80a2ae4 <HAL_RCC_ClockConfig+0x1bc>)
 80a29a2:	689b      	ldr	r3, [r3, #8]
 80a29a4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80a29a8:	687b      	ldr	r3, [r7, #4]
 80a29aa:	689b      	ldr	r3, [r3, #8]
 80a29ac:	494d      	ldr	r1, [pc, #308]	; (80a2ae4 <HAL_RCC_ClockConfig+0x1bc>)
 80a29ae:	4313      	orrs	r3, r2
 80a29b0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80a29b2:	687b      	ldr	r3, [r7, #4]
 80a29b4:	681b      	ldr	r3, [r3, #0]
 80a29b6:	f003 0301 	and.w	r3, r3, #1
 80a29ba:	2b00      	cmp	r3, #0
 80a29bc:	d044      	beq.n	80a2a48 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80a29be:	687b      	ldr	r3, [r7, #4]
 80a29c0:	685b      	ldr	r3, [r3, #4]
 80a29c2:	2b01      	cmp	r3, #1
 80a29c4:	d107      	bne.n	80a29d6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80a29c6:	4b47      	ldr	r3, [pc, #284]	; (80a2ae4 <HAL_RCC_ClockConfig+0x1bc>)
 80a29c8:	681b      	ldr	r3, [r3, #0]
 80a29ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80a29ce:	2b00      	cmp	r3, #0
 80a29d0:	d119      	bne.n	80a2a06 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80a29d2:	2301      	movs	r3, #1
 80a29d4:	e07f      	b.n	80a2ad6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80a29d6:	687b      	ldr	r3, [r7, #4]
 80a29d8:	685b      	ldr	r3, [r3, #4]
 80a29da:	2b02      	cmp	r3, #2
 80a29dc:	d003      	beq.n	80a29e6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80a29de:	687b      	ldr	r3, [r7, #4]
 80a29e0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80a29e2:	2b03      	cmp	r3, #3
 80a29e4:	d107      	bne.n	80a29f6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80a29e6:	4b3f      	ldr	r3, [pc, #252]	; (80a2ae4 <HAL_RCC_ClockConfig+0x1bc>)
 80a29e8:	681b      	ldr	r3, [r3, #0]
 80a29ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80a29ee:	2b00      	cmp	r3, #0
 80a29f0:	d109      	bne.n	80a2a06 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80a29f2:	2301      	movs	r3, #1
 80a29f4:	e06f      	b.n	80a2ad6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80a29f6:	4b3b      	ldr	r3, [pc, #236]	; (80a2ae4 <HAL_RCC_ClockConfig+0x1bc>)
 80a29f8:	681b      	ldr	r3, [r3, #0]
 80a29fa:	f003 0302 	and.w	r3, r3, #2
 80a29fe:	2b00      	cmp	r3, #0
 80a2a00:	d101      	bne.n	80a2a06 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80a2a02:	2301      	movs	r3, #1
 80a2a04:	e067      	b.n	80a2ad6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80a2a06:	4b37      	ldr	r3, [pc, #220]	; (80a2ae4 <HAL_RCC_ClockConfig+0x1bc>)
 80a2a08:	689b      	ldr	r3, [r3, #8]
 80a2a0a:	f023 0203 	bic.w	r2, r3, #3
 80a2a0e:	687b      	ldr	r3, [r7, #4]
 80a2a10:	685b      	ldr	r3, [r3, #4]
 80a2a12:	4934      	ldr	r1, [pc, #208]	; (80a2ae4 <HAL_RCC_ClockConfig+0x1bc>)
 80a2a14:	4313      	orrs	r3, r2
 80a2a16:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80a2a18:	f7fe fcb4 	bl	80a1384 <HAL_GetTick>
 80a2a1c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80a2a1e:	e00a      	b.n	80a2a36 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80a2a20:	f7fe fcb0 	bl	80a1384 <HAL_GetTick>
 80a2a24:	4602      	mov	r2, r0
 80a2a26:	68fb      	ldr	r3, [r7, #12]
 80a2a28:	1ad3      	subs	r3, r2, r3
 80a2a2a:	f241 3288 	movw	r2, #5000	; 0x1388
 80a2a2e:	4293      	cmp	r3, r2
 80a2a30:	d901      	bls.n	80a2a36 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80a2a32:	2303      	movs	r3, #3
 80a2a34:	e04f      	b.n	80a2ad6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80a2a36:	4b2b      	ldr	r3, [pc, #172]	; (80a2ae4 <HAL_RCC_ClockConfig+0x1bc>)
 80a2a38:	689b      	ldr	r3, [r3, #8]
 80a2a3a:	f003 020c 	and.w	r2, r3, #12
 80a2a3e:	687b      	ldr	r3, [r7, #4]
 80a2a40:	685b      	ldr	r3, [r3, #4]
 80a2a42:	009b      	lsls	r3, r3, #2
 80a2a44:	429a      	cmp	r2, r3
 80a2a46:	d1eb      	bne.n	80a2a20 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80a2a48:	4b25      	ldr	r3, [pc, #148]	; (80a2ae0 <HAL_RCC_ClockConfig+0x1b8>)
 80a2a4a:	681b      	ldr	r3, [r3, #0]
 80a2a4c:	f003 030f 	and.w	r3, r3, #15
 80a2a50:	683a      	ldr	r2, [r7, #0]
 80a2a52:	429a      	cmp	r2, r3
 80a2a54:	d20c      	bcs.n	80a2a70 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80a2a56:	4b22      	ldr	r3, [pc, #136]	; (80a2ae0 <HAL_RCC_ClockConfig+0x1b8>)
 80a2a58:	683a      	ldr	r2, [r7, #0]
 80a2a5a:	b2d2      	uxtb	r2, r2
 80a2a5c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80a2a5e:	4b20      	ldr	r3, [pc, #128]	; (80a2ae0 <HAL_RCC_ClockConfig+0x1b8>)
 80a2a60:	681b      	ldr	r3, [r3, #0]
 80a2a62:	f003 030f 	and.w	r3, r3, #15
 80a2a66:	683a      	ldr	r2, [r7, #0]
 80a2a68:	429a      	cmp	r2, r3
 80a2a6a:	d001      	beq.n	80a2a70 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80a2a6c:	2301      	movs	r3, #1
 80a2a6e:	e032      	b.n	80a2ad6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80a2a70:	687b      	ldr	r3, [r7, #4]
 80a2a72:	681b      	ldr	r3, [r3, #0]
 80a2a74:	f003 0304 	and.w	r3, r3, #4
 80a2a78:	2b00      	cmp	r3, #0
 80a2a7a:	d008      	beq.n	80a2a8e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80a2a7c:	4b19      	ldr	r3, [pc, #100]	; (80a2ae4 <HAL_RCC_ClockConfig+0x1bc>)
 80a2a7e:	689b      	ldr	r3, [r3, #8]
 80a2a80:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80a2a84:	687b      	ldr	r3, [r7, #4]
 80a2a86:	68db      	ldr	r3, [r3, #12]
 80a2a88:	4916      	ldr	r1, [pc, #88]	; (80a2ae4 <HAL_RCC_ClockConfig+0x1bc>)
 80a2a8a:	4313      	orrs	r3, r2
 80a2a8c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80a2a8e:	687b      	ldr	r3, [r7, #4]
 80a2a90:	681b      	ldr	r3, [r3, #0]
 80a2a92:	f003 0308 	and.w	r3, r3, #8
 80a2a96:	2b00      	cmp	r3, #0
 80a2a98:	d009      	beq.n	80a2aae <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80a2a9a:	4b12      	ldr	r3, [pc, #72]	; (80a2ae4 <HAL_RCC_ClockConfig+0x1bc>)
 80a2a9c:	689b      	ldr	r3, [r3, #8]
 80a2a9e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80a2aa2:	687b      	ldr	r3, [r7, #4]
 80a2aa4:	691b      	ldr	r3, [r3, #16]
 80a2aa6:	00db      	lsls	r3, r3, #3
 80a2aa8:	490e      	ldr	r1, [pc, #56]	; (80a2ae4 <HAL_RCC_ClockConfig+0x1bc>)
 80a2aaa:	4313      	orrs	r3, r2
 80a2aac:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80a2aae:	f000 f821 	bl	80a2af4 <HAL_RCC_GetSysClockFreq>
 80a2ab2:	4601      	mov	r1, r0
 80a2ab4:	4b0b      	ldr	r3, [pc, #44]	; (80a2ae4 <HAL_RCC_ClockConfig+0x1bc>)
 80a2ab6:	689b      	ldr	r3, [r3, #8]
 80a2ab8:	091b      	lsrs	r3, r3, #4
 80a2aba:	f003 030f 	and.w	r3, r3, #15
 80a2abe:	4a0a      	ldr	r2, [pc, #40]	; (80a2ae8 <HAL_RCC_ClockConfig+0x1c0>)
 80a2ac0:	5cd3      	ldrb	r3, [r2, r3]
 80a2ac2:	fa21 f303 	lsr.w	r3, r1, r3
 80a2ac6:	4a09      	ldr	r2, [pc, #36]	; (80a2aec <HAL_RCC_ClockConfig+0x1c4>)
 80a2ac8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80a2aca:	4b09      	ldr	r3, [pc, #36]	; (80a2af0 <HAL_RCC_ClockConfig+0x1c8>)
 80a2acc:	681b      	ldr	r3, [r3, #0]
 80a2ace:	4618      	mov	r0, r3
 80a2ad0:	f7fe fc14 	bl	80a12fc <HAL_InitTick>

  return HAL_OK;
 80a2ad4:	2300      	movs	r3, #0
}
 80a2ad6:	4618      	mov	r0, r3
 80a2ad8:	3710      	adds	r7, #16
 80a2ada:	46bd      	mov	sp, r7
 80a2adc:	bd80      	pop	{r7, pc}
 80a2ade:	bf00      	nop
 80a2ae0:	40023c00 	.word	0x40023c00
 80a2ae4:	40023800 	.word	0x40023800
 80a2ae8:	080a4a3c 	.word	0x080a4a3c
 80a2aec:	20000000 	.word	0x20000000
 80a2af0:	20000004 	.word	0x20000004

080a2af4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80a2af4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a2af6:	b085      	sub	sp, #20
 80a2af8:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80a2afa:	2300      	movs	r3, #0
 80a2afc:	607b      	str	r3, [r7, #4]
 80a2afe:	2300      	movs	r3, #0
 80a2b00:	60fb      	str	r3, [r7, #12]
 80a2b02:	2300      	movs	r3, #0
 80a2b04:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80a2b06:	2300      	movs	r3, #0
 80a2b08:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80a2b0a:	4b63      	ldr	r3, [pc, #396]	; (80a2c98 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80a2b0c:	689b      	ldr	r3, [r3, #8]
 80a2b0e:	f003 030c 	and.w	r3, r3, #12
 80a2b12:	2b04      	cmp	r3, #4
 80a2b14:	d007      	beq.n	80a2b26 <HAL_RCC_GetSysClockFreq+0x32>
 80a2b16:	2b08      	cmp	r3, #8
 80a2b18:	d008      	beq.n	80a2b2c <HAL_RCC_GetSysClockFreq+0x38>
 80a2b1a:	2b00      	cmp	r3, #0
 80a2b1c:	f040 80b4 	bne.w	80a2c88 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80a2b20:	4b5e      	ldr	r3, [pc, #376]	; (80a2c9c <HAL_RCC_GetSysClockFreq+0x1a8>)
 80a2b22:	60bb      	str	r3, [r7, #8]
       break;
 80a2b24:	e0b3      	b.n	80a2c8e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80a2b26:	4b5e      	ldr	r3, [pc, #376]	; (80a2ca0 <HAL_RCC_GetSysClockFreq+0x1ac>)
 80a2b28:	60bb      	str	r3, [r7, #8]
      break;
 80a2b2a:	e0b0      	b.n	80a2c8e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80a2b2c:	4b5a      	ldr	r3, [pc, #360]	; (80a2c98 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80a2b2e:	685b      	ldr	r3, [r3, #4]
 80a2b30:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80a2b34:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80a2b36:	4b58      	ldr	r3, [pc, #352]	; (80a2c98 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80a2b38:	685b      	ldr	r3, [r3, #4]
 80a2b3a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80a2b3e:	2b00      	cmp	r3, #0
 80a2b40:	d04a      	beq.n	80a2bd8 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80a2b42:	4b55      	ldr	r3, [pc, #340]	; (80a2c98 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80a2b44:	685b      	ldr	r3, [r3, #4]
 80a2b46:	099b      	lsrs	r3, r3, #6
 80a2b48:	f04f 0400 	mov.w	r4, #0
 80a2b4c:	f240 11ff 	movw	r1, #511	; 0x1ff
 80a2b50:	f04f 0200 	mov.w	r2, #0
 80a2b54:	ea03 0501 	and.w	r5, r3, r1
 80a2b58:	ea04 0602 	and.w	r6, r4, r2
 80a2b5c:	4629      	mov	r1, r5
 80a2b5e:	4632      	mov	r2, r6
 80a2b60:	f04f 0300 	mov.w	r3, #0
 80a2b64:	f04f 0400 	mov.w	r4, #0
 80a2b68:	0154      	lsls	r4, r2, #5
 80a2b6a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80a2b6e:	014b      	lsls	r3, r1, #5
 80a2b70:	4619      	mov	r1, r3
 80a2b72:	4622      	mov	r2, r4
 80a2b74:	1b49      	subs	r1, r1, r5
 80a2b76:	eb62 0206 	sbc.w	r2, r2, r6
 80a2b7a:	f04f 0300 	mov.w	r3, #0
 80a2b7e:	f04f 0400 	mov.w	r4, #0
 80a2b82:	0194      	lsls	r4, r2, #6
 80a2b84:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80a2b88:	018b      	lsls	r3, r1, #6
 80a2b8a:	1a5b      	subs	r3, r3, r1
 80a2b8c:	eb64 0402 	sbc.w	r4, r4, r2
 80a2b90:	f04f 0100 	mov.w	r1, #0
 80a2b94:	f04f 0200 	mov.w	r2, #0
 80a2b98:	00e2      	lsls	r2, r4, #3
 80a2b9a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80a2b9e:	00d9      	lsls	r1, r3, #3
 80a2ba0:	460b      	mov	r3, r1
 80a2ba2:	4614      	mov	r4, r2
 80a2ba4:	195b      	adds	r3, r3, r5
 80a2ba6:	eb44 0406 	adc.w	r4, r4, r6
 80a2baa:	f04f 0100 	mov.w	r1, #0
 80a2bae:	f04f 0200 	mov.w	r2, #0
 80a2bb2:	0262      	lsls	r2, r4, #9
 80a2bb4:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80a2bb8:	0259      	lsls	r1, r3, #9
 80a2bba:	460b      	mov	r3, r1
 80a2bbc:	4614      	mov	r4, r2
 80a2bbe:	4618      	mov	r0, r3
 80a2bc0:	4621      	mov	r1, r4
 80a2bc2:	687b      	ldr	r3, [r7, #4]
 80a2bc4:	f04f 0400 	mov.w	r4, #0
 80a2bc8:	461a      	mov	r2, r3
 80a2bca:	4623      	mov	r3, r4
 80a2bcc:	f7fd fd60 	bl	80a0690 <__aeabi_uldivmod>
 80a2bd0:	4603      	mov	r3, r0
 80a2bd2:	460c      	mov	r4, r1
 80a2bd4:	60fb      	str	r3, [r7, #12]
 80a2bd6:	e049      	b.n	80a2c6c <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80a2bd8:	4b2f      	ldr	r3, [pc, #188]	; (80a2c98 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80a2bda:	685b      	ldr	r3, [r3, #4]
 80a2bdc:	099b      	lsrs	r3, r3, #6
 80a2bde:	f04f 0400 	mov.w	r4, #0
 80a2be2:	f240 11ff 	movw	r1, #511	; 0x1ff
 80a2be6:	f04f 0200 	mov.w	r2, #0
 80a2bea:	ea03 0501 	and.w	r5, r3, r1
 80a2bee:	ea04 0602 	and.w	r6, r4, r2
 80a2bf2:	4629      	mov	r1, r5
 80a2bf4:	4632      	mov	r2, r6
 80a2bf6:	f04f 0300 	mov.w	r3, #0
 80a2bfa:	f04f 0400 	mov.w	r4, #0
 80a2bfe:	0154      	lsls	r4, r2, #5
 80a2c00:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80a2c04:	014b      	lsls	r3, r1, #5
 80a2c06:	4619      	mov	r1, r3
 80a2c08:	4622      	mov	r2, r4
 80a2c0a:	1b49      	subs	r1, r1, r5
 80a2c0c:	eb62 0206 	sbc.w	r2, r2, r6
 80a2c10:	f04f 0300 	mov.w	r3, #0
 80a2c14:	f04f 0400 	mov.w	r4, #0
 80a2c18:	0194      	lsls	r4, r2, #6
 80a2c1a:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80a2c1e:	018b      	lsls	r3, r1, #6
 80a2c20:	1a5b      	subs	r3, r3, r1
 80a2c22:	eb64 0402 	sbc.w	r4, r4, r2
 80a2c26:	f04f 0100 	mov.w	r1, #0
 80a2c2a:	f04f 0200 	mov.w	r2, #0
 80a2c2e:	00e2      	lsls	r2, r4, #3
 80a2c30:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80a2c34:	00d9      	lsls	r1, r3, #3
 80a2c36:	460b      	mov	r3, r1
 80a2c38:	4614      	mov	r4, r2
 80a2c3a:	195b      	adds	r3, r3, r5
 80a2c3c:	eb44 0406 	adc.w	r4, r4, r6
 80a2c40:	f04f 0100 	mov.w	r1, #0
 80a2c44:	f04f 0200 	mov.w	r2, #0
 80a2c48:	02a2      	lsls	r2, r4, #10
 80a2c4a:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80a2c4e:	0299      	lsls	r1, r3, #10
 80a2c50:	460b      	mov	r3, r1
 80a2c52:	4614      	mov	r4, r2
 80a2c54:	4618      	mov	r0, r3
 80a2c56:	4621      	mov	r1, r4
 80a2c58:	687b      	ldr	r3, [r7, #4]
 80a2c5a:	f04f 0400 	mov.w	r4, #0
 80a2c5e:	461a      	mov	r2, r3
 80a2c60:	4623      	mov	r3, r4
 80a2c62:	f7fd fd15 	bl	80a0690 <__aeabi_uldivmod>
 80a2c66:	4603      	mov	r3, r0
 80a2c68:	460c      	mov	r4, r1
 80a2c6a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80a2c6c:	4b0a      	ldr	r3, [pc, #40]	; (80a2c98 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80a2c6e:	685b      	ldr	r3, [r3, #4]
 80a2c70:	0c1b      	lsrs	r3, r3, #16
 80a2c72:	f003 0303 	and.w	r3, r3, #3
 80a2c76:	3301      	adds	r3, #1
 80a2c78:	005b      	lsls	r3, r3, #1
 80a2c7a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80a2c7c:	68fa      	ldr	r2, [r7, #12]
 80a2c7e:	683b      	ldr	r3, [r7, #0]
 80a2c80:	fbb2 f3f3 	udiv	r3, r2, r3
 80a2c84:	60bb      	str	r3, [r7, #8]
      break;
 80a2c86:	e002      	b.n	80a2c8e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80a2c88:	4b04      	ldr	r3, [pc, #16]	; (80a2c9c <HAL_RCC_GetSysClockFreq+0x1a8>)
 80a2c8a:	60bb      	str	r3, [r7, #8]
      break;
 80a2c8c:	bf00      	nop
    }
  }
  return sysclockfreq;
 80a2c8e:	68bb      	ldr	r3, [r7, #8]
}
 80a2c90:	4618      	mov	r0, r3
 80a2c92:	3714      	adds	r7, #20
 80a2c94:	46bd      	mov	sp, r7
 80a2c96:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a2c98:	40023800 	.word	0x40023800
 80a2c9c:	00f42400 	.word	0x00f42400
 80a2ca0:	007a1200 	.word	0x007a1200

080a2ca4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80a2ca4:	b480      	push	{r7}
 80a2ca6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80a2ca8:	4b03      	ldr	r3, [pc, #12]	; (80a2cb8 <HAL_RCC_GetHCLKFreq+0x14>)
 80a2caa:	681b      	ldr	r3, [r3, #0]
}
 80a2cac:	4618      	mov	r0, r3
 80a2cae:	46bd      	mov	sp, r7
 80a2cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80a2cb4:	4770      	bx	lr
 80a2cb6:	bf00      	nop
 80a2cb8:	20000000 	.word	0x20000000

080a2cbc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80a2cbc:	b580      	push	{r7, lr}
 80a2cbe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80a2cc0:	f7ff fff0 	bl	80a2ca4 <HAL_RCC_GetHCLKFreq>
 80a2cc4:	4601      	mov	r1, r0
 80a2cc6:	4b05      	ldr	r3, [pc, #20]	; (80a2cdc <HAL_RCC_GetPCLK1Freq+0x20>)
 80a2cc8:	689b      	ldr	r3, [r3, #8]
 80a2cca:	0a9b      	lsrs	r3, r3, #10
 80a2ccc:	f003 0307 	and.w	r3, r3, #7
 80a2cd0:	4a03      	ldr	r2, [pc, #12]	; (80a2ce0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80a2cd2:	5cd3      	ldrb	r3, [r2, r3]
 80a2cd4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80a2cd8:	4618      	mov	r0, r3
 80a2cda:	bd80      	pop	{r7, pc}
 80a2cdc:	40023800 	.word	0x40023800
 80a2ce0:	080a4a4c 	.word	0x080a4a4c

080a2ce4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80a2ce4:	b580      	push	{r7, lr}
 80a2ce6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80a2ce8:	f7ff ffdc 	bl	80a2ca4 <HAL_RCC_GetHCLKFreq>
 80a2cec:	4601      	mov	r1, r0
 80a2cee:	4b05      	ldr	r3, [pc, #20]	; (80a2d04 <HAL_RCC_GetPCLK2Freq+0x20>)
 80a2cf0:	689b      	ldr	r3, [r3, #8]
 80a2cf2:	0b5b      	lsrs	r3, r3, #13
 80a2cf4:	f003 0307 	and.w	r3, r3, #7
 80a2cf8:	4a03      	ldr	r2, [pc, #12]	; (80a2d08 <HAL_RCC_GetPCLK2Freq+0x24>)
 80a2cfa:	5cd3      	ldrb	r3, [r2, r3]
 80a2cfc:	fa21 f303 	lsr.w	r3, r1, r3
}
 80a2d00:	4618      	mov	r0, r3
 80a2d02:	bd80      	pop	{r7, pc}
 80a2d04:	40023800 	.word	0x40023800
 80a2d08:	080a4a4c 	.word	0x080a4a4c

080a2d0c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80a2d0c:	b580      	push	{r7, lr}
 80a2d0e:	b082      	sub	sp, #8
 80a2d10:	af00      	add	r7, sp, #0
 80a2d12:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80a2d14:	687b      	ldr	r3, [r7, #4]
 80a2d16:	2b00      	cmp	r3, #0
 80a2d18:	d101      	bne.n	80a2d1e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80a2d1a:	2301      	movs	r3, #1
 80a2d1c:	e03f      	b.n	80a2d9e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80a2d1e:	687b      	ldr	r3, [r7, #4]
 80a2d20:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80a2d24:	b2db      	uxtb	r3, r3
 80a2d26:	2b00      	cmp	r3, #0
 80a2d28:	d106      	bne.n	80a2d38 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80a2d2a:	687b      	ldr	r3, [r7, #4]
 80a2d2c:	2200      	movs	r2, #0
 80a2d2e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80a2d32:	6878      	ldr	r0, [r7, #4]
 80a2d34:	f7fe f916 	bl	80a0f64 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80a2d38:	687b      	ldr	r3, [r7, #4]
 80a2d3a:	2224      	movs	r2, #36	; 0x24
 80a2d3c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80a2d40:	687b      	ldr	r3, [r7, #4]
 80a2d42:	681b      	ldr	r3, [r3, #0]
 80a2d44:	68da      	ldr	r2, [r3, #12]
 80a2d46:	687b      	ldr	r3, [r7, #4]
 80a2d48:	681b      	ldr	r3, [r3, #0]
 80a2d4a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80a2d4e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80a2d50:	6878      	ldr	r0, [r7, #4]
 80a2d52:	f000 f90b 	bl	80a2f6c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80a2d56:	687b      	ldr	r3, [r7, #4]
 80a2d58:	681b      	ldr	r3, [r3, #0]
 80a2d5a:	691a      	ldr	r2, [r3, #16]
 80a2d5c:	687b      	ldr	r3, [r7, #4]
 80a2d5e:	681b      	ldr	r3, [r3, #0]
 80a2d60:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80a2d64:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80a2d66:	687b      	ldr	r3, [r7, #4]
 80a2d68:	681b      	ldr	r3, [r3, #0]
 80a2d6a:	695a      	ldr	r2, [r3, #20]
 80a2d6c:	687b      	ldr	r3, [r7, #4]
 80a2d6e:	681b      	ldr	r3, [r3, #0]
 80a2d70:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80a2d74:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80a2d76:	687b      	ldr	r3, [r7, #4]
 80a2d78:	681b      	ldr	r3, [r3, #0]
 80a2d7a:	68da      	ldr	r2, [r3, #12]
 80a2d7c:	687b      	ldr	r3, [r7, #4]
 80a2d7e:	681b      	ldr	r3, [r3, #0]
 80a2d80:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80a2d84:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80a2d86:	687b      	ldr	r3, [r7, #4]
 80a2d88:	2200      	movs	r2, #0
 80a2d8a:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80a2d8c:	687b      	ldr	r3, [r7, #4]
 80a2d8e:	2220      	movs	r2, #32
 80a2d90:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80a2d94:	687b      	ldr	r3, [r7, #4]
 80a2d96:	2220      	movs	r2, #32
 80a2d98:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80a2d9c:	2300      	movs	r3, #0
}
 80a2d9e:	4618      	mov	r0, r3
 80a2da0:	3708      	adds	r7, #8
 80a2da2:	46bd      	mov	sp, r7
 80a2da4:	bd80      	pop	{r7, pc}

080a2da6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80a2da6:	b580      	push	{r7, lr}
 80a2da8:	b088      	sub	sp, #32
 80a2daa:	af02      	add	r7, sp, #8
 80a2dac:	60f8      	str	r0, [r7, #12]
 80a2dae:	60b9      	str	r1, [r7, #8]
 80a2db0:	603b      	str	r3, [r7, #0]
 80a2db2:	4613      	mov	r3, r2
 80a2db4:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 80a2db6:	2300      	movs	r3, #0
 80a2db8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80a2dba:	68fb      	ldr	r3, [r7, #12]
 80a2dbc:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80a2dc0:	b2db      	uxtb	r3, r3
 80a2dc2:	2b20      	cmp	r3, #32
 80a2dc4:	f040 8083 	bne.w	80a2ece <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 80a2dc8:	68bb      	ldr	r3, [r7, #8]
 80a2dca:	2b00      	cmp	r3, #0
 80a2dcc:	d002      	beq.n	80a2dd4 <HAL_UART_Transmit+0x2e>
 80a2dce:	88fb      	ldrh	r3, [r7, #6]
 80a2dd0:	2b00      	cmp	r3, #0
 80a2dd2:	d101      	bne.n	80a2dd8 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 80a2dd4:	2301      	movs	r3, #1
 80a2dd6:	e07b      	b.n	80a2ed0 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80a2dd8:	68fb      	ldr	r3, [r7, #12]
 80a2dda:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80a2dde:	2b01      	cmp	r3, #1
 80a2de0:	d101      	bne.n	80a2de6 <HAL_UART_Transmit+0x40>
 80a2de2:	2302      	movs	r3, #2
 80a2de4:	e074      	b.n	80a2ed0 <HAL_UART_Transmit+0x12a>
 80a2de6:	68fb      	ldr	r3, [r7, #12]
 80a2de8:	2201      	movs	r2, #1
 80a2dea:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80a2dee:	68fb      	ldr	r3, [r7, #12]
 80a2df0:	2200      	movs	r2, #0
 80a2df2:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80a2df4:	68fb      	ldr	r3, [r7, #12]
 80a2df6:	2221      	movs	r2, #33	; 0x21
 80a2df8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80a2dfc:	f7fe fac2 	bl	80a1384 <HAL_GetTick>
 80a2e00:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80a2e02:	68fb      	ldr	r3, [r7, #12]
 80a2e04:	88fa      	ldrh	r2, [r7, #6]
 80a2e06:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80a2e08:	68fb      	ldr	r3, [r7, #12]
 80a2e0a:	88fa      	ldrh	r2, [r7, #6]
 80a2e0c:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80a2e0e:	68fb      	ldr	r3, [r7, #12]
 80a2e10:	2200      	movs	r2, #0
 80a2e12:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 80a2e16:	e042      	b.n	80a2e9e <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 80a2e18:	68fb      	ldr	r3, [r7, #12]
 80a2e1a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80a2e1c:	b29b      	uxth	r3, r3
 80a2e1e:	3b01      	subs	r3, #1
 80a2e20:	b29a      	uxth	r2, r3
 80a2e22:	68fb      	ldr	r3, [r7, #12]
 80a2e24:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80a2e26:	68fb      	ldr	r3, [r7, #12]
 80a2e28:	689b      	ldr	r3, [r3, #8]
 80a2e2a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80a2e2e:	d122      	bne.n	80a2e76 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80a2e30:	683b      	ldr	r3, [r7, #0]
 80a2e32:	9300      	str	r3, [sp, #0]
 80a2e34:	697b      	ldr	r3, [r7, #20]
 80a2e36:	2200      	movs	r2, #0
 80a2e38:	2180      	movs	r1, #128	; 0x80
 80a2e3a:	68f8      	ldr	r0, [r7, #12]
 80a2e3c:	f000 f84c 	bl	80a2ed8 <UART_WaitOnFlagUntilTimeout>
 80a2e40:	4603      	mov	r3, r0
 80a2e42:	2b00      	cmp	r3, #0
 80a2e44:	d001      	beq.n	80a2e4a <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 80a2e46:	2303      	movs	r3, #3
 80a2e48:	e042      	b.n	80a2ed0 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 80a2e4a:	68bb      	ldr	r3, [r7, #8]
 80a2e4c:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80a2e4e:	693b      	ldr	r3, [r7, #16]
 80a2e50:	881b      	ldrh	r3, [r3, #0]
 80a2e52:	461a      	mov	r2, r3
 80a2e54:	68fb      	ldr	r3, [r7, #12]
 80a2e56:	681b      	ldr	r3, [r3, #0]
 80a2e58:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80a2e5c:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80a2e5e:	68fb      	ldr	r3, [r7, #12]
 80a2e60:	691b      	ldr	r3, [r3, #16]
 80a2e62:	2b00      	cmp	r3, #0
 80a2e64:	d103      	bne.n	80a2e6e <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 80a2e66:	68bb      	ldr	r3, [r7, #8]
 80a2e68:	3302      	adds	r3, #2
 80a2e6a:	60bb      	str	r3, [r7, #8]
 80a2e6c:	e017      	b.n	80a2e9e <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 80a2e6e:	68bb      	ldr	r3, [r7, #8]
 80a2e70:	3301      	adds	r3, #1
 80a2e72:	60bb      	str	r3, [r7, #8]
 80a2e74:	e013      	b.n	80a2e9e <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80a2e76:	683b      	ldr	r3, [r7, #0]
 80a2e78:	9300      	str	r3, [sp, #0]
 80a2e7a:	697b      	ldr	r3, [r7, #20]
 80a2e7c:	2200      	movs	r2, #0
 80a2e7e:	2180      	movs	r1, #128	; 0x80
 80a2e80:	68f8      	ldr	r0, [r7, #12]
 80a2e82:	f000 f829 	bl	80a2ed8 <UART_WaitOnFlagUntilTimeout>
 80a2e86:	4603      	mov	r3, r0
 80a2e88:	2b00      	cmp	r3, #0
 80a2e8a:	d001      	beq.n	80a2e90 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 80a2e8c:	2303      	movs	r3, #3
 80a2e8e:	e01f      	b.n	80a2ed0 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 80a2e90:	68bb      	ldr	r3, [r7, #8]
 80a2e92:	1c5a      	adds	r2, r3, #1
 80a2e94:	60ba      	str	r2, [r7, #8]
 80a2e96:	781a      	ldrb	r2, [r3, #0]
 80a2e98:	68fb      	ldr	r3, [r7, #12]
 80a2e9a:	681b      	ldr	r3, [r3, #0]
 80a2e9c:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 80a2e9e:	68fb      	ldr	r3, [r7, #12]
 80a2ea0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80a2ea2:	b29b      	uxth	r3, r3
 80a2ea4:	2b00      	cmp	r3, #0
 80a2ea6:	d1b7      	bne.n	80a2e18 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80a2ea8:	683b      	ldr	r3, [r7, #0]
 80a2eaa:	9300      	str	r3, [sp, #0]
 80a2eac:	697b      	ldr	r3, [r7, #20]
 80a2eae:	2200      	movs	r2, #0
 80a2eb0:	2140      	movs	r1, #64	; 0x40
 80a2eb2:	68f8      	ldr	r0, [r7, #12]
 80a2eb4:	f000 f810 	bl	80a2ed8 <UART_WaitOnFlagUntilTimeout>
 80a2eb8:	4603      	mov	r3, r0
 80a2eba:	2b00      	cmp	r3, #0
 80a2ebc:	d001      	beq.n	80a2ec2 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 80a2ebe:	2303      	movs	r3, #3
 80a2ec0:	e006      	b.n	80a2ed0 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80a2ec2:	68fb      	ldr	r3, [r7, #12]
 80a2ec4:	2220      	movs	r2, #32
 80a2ec6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 80a2eca:	2300      	movs	r3, #0
 80a2ecc:	e000      	b.n	80a2ed0 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 80a2ece:	2302      	movs	r3, #2
  }
}
 80a2ed0:	4618      	mov	r0, r3
 80a2ed2:	3718      	adds	r7, #24
 80a2ed4:	46bd      	mov	sp, r7
 80a2ed6:	bd80      	pop	{r7, pc}

080a2ed8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80a2ed8:	b580      	push	{r7, lr}
 80a2eda:	b084      	sub	sp, #16
 80a2edc:	af00      	add	r7, sp, #0
 80a2ede:	60f8      	str	r0, [r7, #12]
 80a2ee0:	60b9      	str	r1, [r7, #8]
 80a2ee2:	603b      	str	r3, [r7, #0]
 80a2ee4:	4613      	mov	r3, r2
 80a2ee6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80a2ee8:	e02c      	b.n	80a2f44 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80a2eea:	69bb      	ldr	r3, [r7, #24]
 80a2eec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80a2ef0:	d028      	beq.n	80a2f44 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80a2ef2:	69bb      	ldr	r3, [r7, #24]
 80a2ef4:	2b00      	cmp	r3, #0
 80a2ef6:	d007      	beq.n	80a2f08 <UART_WaitOnFlagUntilTimeout+0x30>
 80a2ef8:	f7fe fa44 	bl	80a1384 <HAL_GetTick>
 80a2efc:	4602      	mov	r2, r0
 80a2efe:	683b      	ldr	r3, [r7, #0]
 80a2f00:	1ad3      	subs	r3, r2, r3
 80a2f02:	69ba      	ldr	r2, [r7, #24]
 80a2f04:	429a      	cmp	r2, r3
 80a2f06:	d21d      	bcs.n	80a2f44 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80a2f08:	68fb      	ldr	r3, [r7, #12]
 80a2f0a:	681b      	ldr	r3, [r3, #0]
 80a2f0c:	68da      	ldr	r2, [r3, #12]
 80a2f0e:	68fb      	ldr	r3, [r7, #12]
 80a2f10:	681b      	ldr	r3, [r3, #0]
 80a2f12:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80a2f16:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80a2f18:	68fb      	ldr	r3, [r7, #12]
 80a2f1a:	681b      	ldr	r3, [r3, #0]
 80a2f1c:	695a      	ldr	r2, [r3, #20]
 80a2f1e:	68fb      	ldr	r3, [r7, #12]
 80a2f20:	681b      	ldr	r3, [r3, #0]
 80a2f22:	f022 0201 	bic.w	r2, r2, #1
 80a2f26:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80a2f28:	68fb      	ldr	r3, [r7, #12]
 80a2f2a:	2220      	movs	r2, #32
 80a2f2c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80a2f30:	68fb      	ldr	r3, [r7, #12]
 80a2f32:	2220      	movs	r2, #32
 80a2f34:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80a2f38:	68fb      	ldr	r3, [r7, #12]
 80a2f3a:	2200      	movs	r2, #0
 80a2f3c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 80a2f40:	2303      	movs	r3, #3
 80a2f42:	e00f      	b.n	80a2f64 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80a2f44:	68fb      	ldr	r3, [r7, #12]
 80a2f46:	681b      	ldr	r3, [r3, #0]
 80a2f48:	681a      	ldr	r2, [r3, #0]
 80a2f4a:	68bb      	ldr	r3, [r7, #8]
 80a2f4c:	4013      	ands	r3, r2
 80a2f4e:	68ba      	ldr	r2, [r7, #8]
 80a2f50:	429a      	cmp	r2, r3
 80a2f52:	bf0c      	ite	eq
 80a2f54:	2301      	moveq	r3, #1
 80a2f56:	2300      	movne	r3, #0
 80a2f58:	b2db      	uxtb	r3, r3
 80a2f5a:	461a      	mov	r2, r3
 80a2f5c:	79fb      	ldrb	r3, [r7, #7]
 80a2f5e:	429a      	cmp	r2, r3
 80a2f60:	d0c3      	beq.n	80a2eea <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80a2f62:	2300      	movs	r3, #0
}
 80a2f64:	4618      	mov	r0, r3
 80a2f66:	3710      	adds	r7, #16
 80a2f68:	46bd      	mov	sp, r7
 80a2f6a:	bd80      	pop	{r7, pc}

080a2f6c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80a2f6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a2f70:	b085      	sub	sp, #20
 80a2f72:	af00      	add	r7, sp, #0
 80a2f74:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80a2f76:	687b      	ldr	r3, [r7, #4]
 80a2f78:	681b      	ldr	r3, [r3, #0]
 80a2f7a:	691b      	ldr	r3, [r3, #16]
 80a2f7c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80a2f80:	687b      	ldr	r3, [r7, #4]
 80a2f82:	68da      	ldr	r2, [r3, #12]
 80a2f84:	687b      	ldr	r3, [r7, #4]
 80a2f86:	681b      	ldr	r3, [r3, #0]
 80a2f88:	430a      	orrs	r2, r1
 80a2f8a:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80a2f8c:	687b      	ldr	r3, [r7, #4]
 80a2f8e:	689a      	ldr	r2, [r3, #8]
 80a2f90:	687b      	ldr	r3, [r7, #4]
 80a2f92:	691b      	ldr	r3, [r3, #16]
 80a2f94:	431a      	orrs	r2, r3
 80a2f96:	687b      	ldr	r3, [r7, #4]
 80a2f98:	695b      	ldr	r3, [r3, #20]
 80a2f9a:	431a      	orrs	r2, r3
 80a2f9c:	687b      	ldr	r3, [r7, #4]
 80a2f9e:	69db      	ldr	r3, [r3, #28]
 80a2fa0:	4313      	orrs	r3, r2
 80a2fa2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 80a2fa4:	687b      	ldr	r3, [r7, #4]
 80a2fa6:	681b      	ldr	r3, [r3, #0]
 80a2fa8:	68db      	ldr	r3, [r3, #12]
 80a2faa:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80a2fae:	f023 030c 	bic.w	r3, r3, #12
 80a2fb2:	687a      	ldr	r2, [r7, #4]
 80a2fb4:	6812      	ldr	r2, [r2, #0]
 80a2fb6:	68f9      	ldr	r1, [r7, #12]
 80a2fb8:	430b      	orrs	r3, r1
 80a2fba:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80a2fbc:	687b      	ldr	r3, [r7, #4]
 80a2fbe:	681b      	ldr	r3, [r3, #0]
 80a2fc0:	695b      	ldr	r3, [r3, #20]
 80a2fc2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80a2fc6:	687b      	ldr	r3, [r7, #4]
 80a2fc8:	699a      	ldr	r2, [r3, #24]
 80a2fca:	687b      	ldr	r3, [r7, #4]
 80a2fcc:	681b      	ldr	r3, [r3, #0]
 80a2fce:	430a      	orrs	r2, r1
 80a2fd0:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80a2fd2:	687b      	ldr	r3, [r7, #4]
 80a2fd4:	69db      	ldr	r3, [r3, #28]
 80a2fd6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80a2fda:	f040 818b 	bne.w	80a32f4 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80a2fde:	687b      	ldr	r3, [r7, #4]
 80a2fe0:	681b      	ldr	r3, [r3, #0]
 80a2fe2:	4ac1      	ldr	r2, [pc, #772]	; (80a32e8 <UART_SetConfig+0x37c>)
 80a2fe4:	4293      	cmp	r3, r2
 80a2fe6:	d005      	beq.n	80a2ff4 <UART_SetConfig+0x88>
 80a2fe8:	687b      	ldr	r3, [r7, #4]
 80a2fea:	681b      	ldr	r3, [r3, #0]
 80a2fec:	4abf      	ldr	r2, [pc, #764]	; (80a32ec <UART_SetConfig+0x380>)
 80a2fee:	4293      	cmp	r3, r2
 80a2ff0:	f040 80bd 	bne.w	80a316e <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80a2ff4:	f7ff fe76 	bl	80a2ce4 <HAL_RCC_GetPCLK2Freq>
 80a2ff8:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80a2ffa:	68bb      	ldr	r3, [r7, #8]
 80a2ffc:	461d      	mov	r5, r3
 80a2ffe:	f04f 0600 	mov.w	r6, #0
 80a3002:	46a8      	mov	r8, r5
 80a3004:	46b1      	mov	r9, r6
 80a3006:	eb18 0308 	adds.w	r3, r8, r8
 80a300a:	eb49 0409 	adc.w	r4, r9, r9
 80a300e:	4698      	mov	r8, r3
 80a3010:	46a1      	mov	r9, r4
 80a3012:	eb18 0805 	adds.w	r8, r8, r5
 80a3016:	eb49 0906 	adc.w	r9, r9, r6
 80a301a:	f04f 0100 	mov.w	r1, #0
 80a301e:	f04f 0200 	mov.w	r2, #0
 80a3022:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80a3026:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80a302a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80a302e:	4688      	mov	r8, r1
 80a3030:	4691      	mov	r9, r2
 80a3032:	eb18 0005 	adds.w	r0, r8, r5
 80a3036:	eb49 0106 	adc.w	r1, r9, r6
 80a303a:	687b      	ldr	r3, [r7, #4]
 80a303c:	685b      	ldr	r3, [r3, #4]
 80a303e:	461d      	mov	r5, r3
 80a3040:	f04f 0600 	mov.w	r6, #0
 80a3044:	196b      	adds	r3, r5, r5
 80a3046:	eb46 0406 	adc.w	r4, r6, r6
 80a304a:	461a      	mov	r2, r3
 80a304c:	4623      	mov	r3, r4
 80a304e:	f7fd fb1f 	bl	80a0690 <__aeabi_uldivmod>
 80a3052:	4603      	mov	r3, r0
 80a3054:	460c      	mov	r4, r1
 80a3056:	461a      	mov	r2, r3
 80a3058:	4ba5      	ldr	r3, [pc, #660]	; (80a32f0 <UART_SetConfig+0x384>)
 80a305a:	fba3 2302 	umull	r2, r3, r3, r2
 80a305e:	095b      	lsrs	r3, r3, #5
 80a3060:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80a3064:	68bb      	ldr	r3, [r7, #8]
 80a3066:	461d      	mov	r5, r3
 80a3068:	f04f 0600 	mov.w	r6, #0
 80a306c:	46a9      	mov	r9, r5
 80a306e:	46b2      	mov	sl, r6
 80a3070:	eb19 0309 	adds.w	r3, r9, r9
 80a3074:	eb4a 040a 	adc.w	r4, sl, sl
 80a3078:	4699      	mov	r9, r3
 80a307a:	46a2      	mov	sl, r4
 80a307c:	eb19 0905 	adds.w	r9, r9, r5
 80a3080:	eb4a 0a06 	adc.w	sl, sl, r6
 80a3084:	f04f 0100 	mov.w	r1, #0
 80a3088:	f04f 0200 	mov.w	r2, #0
 80a308c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80a3090:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80a3094:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80a3098:	4689      	mov	r9, r1
 80a309a:	4692      	mov	sl, r2
 80a309c:	eb19 0005 	adds.w	r0, r9, r5
 80a30a0:	eb4a 0106 	adc.w	r1, sl, r6
 80a30a4:	687b      	ldr	r3, [r7, #4]
 80a30a6:	685b      	ldr	r3, [r3, #4]
 80a30a8:	461d      	mov	r5, r3
 80a30aa:	f04f 0600 	mov.w	r6, #0
 80a30ae:	196b      	adds	r3, r5, r5
 80a30b0:	eb46 0406 	adc.w	r4, r6, r6
 80a30b4:	461a      	mov	r2, r3
 80a30b6:	4623      	mov	r3, r4
 80a30b8:	f7fd faea 	bl	80a0690 <__aeabi_uldivmod>
 80a30bc:	4603      	mov	r3, r0
 80a30be:	460c      	mov	r4, r1
 80a30c0:	461a      	mov	r2, r3
 80a30c2:	4b8b      	ldr	r3, [pc, #556]	; (80a32f0 <UART_SetConfig+0x384>)
 80a30c4:	fba3 1302 	umull	r1, r3, r3, r2
 80a30c8:	095b      	lsrs	r3, r3, #5
 80a30ca:	2164      	movs	r1, #100	; 0x64
 80a30cc:	fb01 f303 	mul.w	r3, r1, r3
 80a30d0:	1ad3      	subs	r3, r2, r3
 80a30d2:	00db      	lsls	r3, r3, #3
 80a30d4:	3332      	adds	r3, #50	; 0x32
 80a30d6:	4a86      	ldr	r2, [pc, #536]	; (80a32f0 <UART_SetConfig+0x384>)
 80a30d8:	fba2 2303 	umull	r2, r3, r2, r3
 80a30dc:	095b      	lsrs	r3, r3, #5
 80a30de:	005b      	lsls	r3, r3, #1
 80a30e0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80a30e4:	4498      	add	r8, r3
 80a30e6:	68bb      	ldr	r3, [r7, #8]
 80a30e8:	461d      	mov	r5, r3
 80a30ea:	f04f 0600 	mov.w	r6, #0
 80a30ee:	46a9      	mov	r9, r5
 80a30f0:	46b2      	mov	sl, r6
 80a30f2:	eb19 0309 	adds.w	r3, r9, r9
 80a30f6:	eb4a 040a 	adc.w	r4, sl, sl
 80a30fa:	4699      	mov	r9, r3
 80a30fc:	46a2      	mov	sl, r4
 80a30fe:	eb19 0905 	adds.w	r9, r9, r5
 80a3102:	eb4a 0a06 	adc.w	sl, sl, r6
 80a3106:	f04f 0100 	mov.w	r1, #0
 80a310a:	f04f 0200 	mov.w	r2, #0
 80a310e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80a3112:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80a3116:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80a311a:	4689      	mov	r9, r1
 80a311c:	4692      	mov	sl, r2
 80a311e:	eb19 0005 	adds.w	r0, r9, r5
 80a3122:	eb4a 0106 	adc.w	r1, sl, r6
 80a3126:	687b      	ldr	r3, [r7, #4]
 80a3128:	685b      	ldr	r3, [r3, #4]
 80a312a:	461d      	mov	r5, r3
 80a312c:	f04f 0600 	mov.w	r6, #0
 80a3130:	196b      	adds	r3, r5, r5
 80a3132:	eb46 0406 	adc.w	r4, r6, r6
 80a3136:	461a      	mov	r2, r3
 80a3138:	4623      	mov	r3, r4
 80a313a:	f7fd faa9 	bl	80a0690 <__aeabi_uldivmod>
 80a313e:	4603      	mov	r3, r0
 80a3140:	460c      	mov	r4, r1
 80a3142:	461a      	mov	r2, r3
 80a3144:	4b6a      	ldr	r3, [pc, #424]	; (80a32f0 <UART_SetConfig+0x384>)
 80a3146:	fba3 1302 	umull	r1, r3, r3, r2
 80a314a:	095b      	lsrs	r3, r3, #5
 80a314c:	2164      	movs	r1, #100	; 0x64
 80a314e:	fb01 f303 	mul.w	r3, r1, r3
 80a3152:	1ad3      	subs	r3, r2, r3
 80a3154:	00db      	lsls	r3, r3, #3
 80a3156:	3332      	adds	r3, #50	; 0x32
 80a3158:	4a65      	ldr	r2, [pc, #404]	; (80a32f0 <UART_SetConfig+0x384>)
 80a315a:	fba2 2303 	umull	r2, r3, r2, r3
 80a315e:	095b      	lsrs	r3, r3, #5
 80a3160:	f003 0207 	and.w	r2, r3, #7
 80a3164:	687b      	ldr	r3, [r7, #4]
 80a3166:	681b      	ldr	r3, [r3, #0]
 80a3168:	4442      	add	r2, r8
 80a316a:	609a      	str	r2, [r3, #8]
 80a316c:	e26f      	b.n	80a364e <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80a316e:	f7ff fda5 	bl	80a2cbc <HAL_RCC_GetPCLK1Freq>
 80a3172:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80a3174:	68bb      	ldr	r3, [r7, #8]
 80a3176:	461d      	mov	r5, r3
 80a3178:	f04f 0600 	mov.w	r6, #0
 80a317c:	46a8      	mov	r8, r5
 80a317e:	46b1      	mov	r9, r6
 80a3180:	eb18 0308 	adds.w	r3, r8, r8
 80a3184:	eb49 0409 	adc.w	r4, r9, r9
 80a3188:	4698      	mov	r8, r3
 80a318a:	46a1      	mov	r9, r4
 80a318c:	eb18 0805 	adds.w	r8, r8, r5
 80a3190:	eb49 0906 	adc.w	r9, r9, r6
 80a3194:	f04f 0100 	mov.w	r1, #0
 80a3198:	f04f 0200 	mov.w	r2, #0
 80a319c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80a31a0:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80a31a4:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80a31a8:	4688      	mov	r8, r1
 80a31aa:	4691      	mov	r9, r2
 80a31ac:	eb18 0005 	adds.w	r0, r8, r5
 80a31b0:	eb49 0106 	adc.w	r1, r9, r6
 80a31b4:	687b      	ldr	r3, [r7, #4]
 80a31b6:	685b      	ldr	r3, [r3, #4]
 80a31b8:	461d      	mov	r5, r3
 80a31ba:	f04f 0600 	mov.w	r6, #0
 80a31be:	196b      	adds	r3, r5, r5
 80a31c0:	eb46 0406 	adc.w	r4, r6, r6
 80a31c4:	461a      	mov	r2, r3
 80a31c6:	4623      	mov	r3, r4
 80a31c8:	f7fd fa62 	bl	80a0690 <__aeabi_uldivmod>
 80a31cc:	4603      	mov	r3, r0
 80a31ce:	460c      	mov	r4, r1
 80a31d0:	461a      	mov	r2, r3
 80a31d2:	4b47      	ldr	r3, [pc, #284]	; (80a32f0 <UART_SetConfig+0x384>)
 80a31d4:	fba3 2302 	umull	r2, r3, r3, r2
 80a31d8:	095b      	lsrs	r3, r3, #5
 80a31da:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80a31de:	68bb      	ldr	r3, [r7, #8]
 80a31e0:	461d      	mov	r5, r3
 80a31e2:	f04f 0600 	mov.w	r6, #0
 80a31e6:	46a9      	mov	r9, r5
 80a31e8:	46b2      	mov	sl, r6
 80a31ea:	eb19 0309 	adds.w	r3, r9, r9
 80a31ee:	eb4a 040a 	adc.w	r4, sl, sl
 80a31f2:	4699      	mov	r9, r3
 80a31f4:	46a2      	mov	sl, r4
 80a31f6:	eb19 0905 	adds.w	r9, r9, r5
 80a31fa:	eb4a 0a06 	adc.w	sl, sl, r6
 80a31fe:	f04f 0100 	mov.w	r1, #0
 80a3202:	f04f 0200 	mov.w	r2, #0
 80a3206:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80a320a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80a320e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80a3212:	4689      	mov	r9, r1
 80a3214:	4692      	mov	sl, r2
 80a3216:	eb19 0005 	adds.w	r0, r9, r5
 80a321a:	eb4a 0106 	adc.w	r1, sl, r6
 80a321e:	687b      	ldr	r3, [r7, #4]
 80a3220:	685b      	ldr	r3, [r3, #4]
 80a3222:	461d      	mov	r5, r3
 80a3224:	f04f 0600 	mov.w	r6, #0
 80a3228:	196b      	adds	r3, r5, r5
 80a322a:	eb46 0406 	adc.w	r4, r6, r6
 80a322e:	461a      	mov	r2, r3
 80a3230:	4623      	mov	r3, r4
 80a3232:	f7fd fa2d 	bl	80a0690 <__aeabi_uldivmod>
 80a3236:	4603      	mov	r3, r0
 80a3238:	460c      	mov	r4, r1
 80a323a:	461a      	mov	r2, r3
 80a323c:	4b2c      	ldr	r3, [pc, #176]	; (80a32f0 <UART_SetConfig+0x384>)
 80a323e:	fba3 1302 	umull	r1, r3, r3, r2
 80a3242:	095b      	lsrs	r3, r3, #5
 80a3244:	2164      	movs	r1, #100	; 0x64
 80a3246:	fb01 f303 	mul.w	r3, r1, r3
 80a324a:	1ad3      	subs	r3, r2, r3
 80a324c:	00db      	lsls	r3, r3, #3
 80a324e:	3332      	adds	r3, #50	; 0x32
 80a3250:	4a27      	ldr	r2, [pc, #156]	; (80a32f0 <UART_SetConfig+0x384>)
 80a3252:	fba2 2303 	umull	r2, r3, r2, r3
 80a3256:	095b      	lsrs	r3, r3, #5
 80a3258:	005b      	lsls	r3, r3, #1
 80a325a:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80a325e:	4498      	add	r8, r3
 80a3260:	68bb      	ldr	r3, [r7, #8]
 80a3262:	461d      	mov	r5, r3
 80a3264:	f04f 0600 	mov.w	r6, #0
 80a3268:	46a9      	mov	r9, r5
 80a326a:	46b2      	mov	sl, r6
 80a326c:	eb19 0309 	adds.w	r3, r9, r9
 80a3270:	eb4a 040a 	adc.w	r4, sl, sl
 80a3274:	4699      	mov	r9, r3
 80a3276:	46a2      	mov	sl, r4
 80a3278:	eb19 0905 	adds.w	r9, r9, r5
 80a327c:	eb4a 0a06 	adc.w	sl, sl, r6
 80a3280:	f04f 0100 	mov.w	r1, #0
 80a3284:	f04f 0200 	mov.w	r2, #0
 80a3288:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80a328c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80a3290:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80a3294:	4689      	mov	r9, r1
 80a3296:	4692      	mov	sl, r2
 80a3298:	eb19 0005 	adds.w	r0, r9, r5
 80a329c:	eb4a 0106 	adc.w	r1, sl, r6
 80a32a0:	687b      	ldr	r3, [r7, #4]
 80a32a2:	685b      	ldr	r3, [r3, #4]
 80a32a4:	461d      	mov	r5, r3
 80a32a6:	f04f 0600 	mov.w	r6, #0
 80a32aa:	196b      	adds	r3, r5, r5
 80a32ac:	eb46 0406 	adc.w	r4, r6, r6
 80a32b0:	461a      	mov	r2, r3
 80a32b2:	4623      	mov	r3, r4
 80a32b4:	f7fd f9ec 	bl	80a0690 <__aeabi_uldivmod>
 80a32b8:	4603      	mov	r3, r0
 80a32ba:	460c      	mov	r4, r1
 80a32bc:	461a      	mov	r2, r3
 80a32be:	4b0c      	ldr	r3, [pc, #48]	; (80a32f0 <UART_SetConfig+0x384>)
 80a32c0:	fba3 1302 	umull	r1, r3, r3, r2
 80a32c4:	095b      	lsrs	r3, r3, #5
 80a32c6:	2164      	movs	r1, #100	; 0x64
 80a32c8:	fb01 f303 	mul.w	r3, r1, r3
 80a32cc:	1ad3      	subs	r3, r2, r3
 80a32ce:	00db      	lsls	r3, r3, #3
 80a32d0:	3332      	adds	r3, #50	; 0x32
 80a32d2:	4a07      	ldr	r2, [pc, #28]	; (80a32f0 <UART_SetConfig+0x384>)
 80a32d4:	fba2 2303 	umull	r2, r3, r2, r3
 80a32d8:	095b      	lsrs	r3, r3, #5
 80a32da:	f003 0207 	and.w	r2, r3, #7
 80a32de:	687b      	ldr	r3, [r7, #4]
 80a32e0:	681b      	ldr	r3, [r3, #0]
 80a32e2:	4442      	add	r2, r8
 80a32e4:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 80a32e6:	e1b2      	b.n	80a364e <UART_SetConfig+0x6e2>
 80a32e8:	40011000 	.word	0x40011000
 80a32ec:	40011400 	.word	0x40011400
 80a32f0:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80a32f4:	687b      	ldr	r3, [r7, #4]
 80a32f6:	681b      	ldr	r3, [r3, #0]
 80a32f8:	4ad7      	ldr	r2, [pc, #860]	; (80a3658 <UART_SetConfig+0x6ec>)
 80a32fa:	4293      	cmp	r3, r2
 80a32fc:	d005      	beq.n	80a330a <UART_SetConfig+0x39e>
 80a32fe:	687b      	ldr	r3, [r7, #4]
 80a3300:	681b      	ldr	r3, [r3, #0]
 80a3302:	4ad6      	ldr	r2, [pc, #856]	; (80a365c <UART_SetConfig+0x6f0>)
 80a3304:	4293      	cmp	r3, r2
 80a3306:	f040 80d1 	bne.w	80a34ac <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 80a330a:	f7ff fceb 	bl	80a2ce4 <HAL_RCC_GetPCLK2Freq>
 80a330e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80a3310:	68bb      	ldr	r3, [r7, #8]
 80a3312:	469a      	mov	sl, r3
 80a3314:	f04f 0b00 	mov.w	fp, #0
 80a3318:	46d0      	mov	r8, sl
 80a331a:	46d9      	mov	r9, fp
 80a331c:	eb18 0308 	adds.w	r3, r8, r8
 80a3320:	eb49 0409 	adc.w	r4, r9, r9
 80a3324:	4698      	mov	r8, r3
 80a3326:	46a1      	mov	r9, r4
 80a3328:	eb18 080a 	adds.w	r8, r8, sl
 80a332c:	eb49 090b 	adc.w	r9, r9, fp
 80a3330:	f04f 0100 	mov.w	r1, #0
 80a3334:	f04f 0200 	mov.w	r2, #0
 80a3338:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80a333c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80a3340:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80a3344:	4688      	mov	r8, r1
 80a3346:	4691      	mov	r9, r2
 80a3348:	eb1a 0508 	adds.w	r5, sl, r8
 80a334c:	eb4b 0609 	adc.w	r6, fp, r9
 80a3350:	687b      	ldr	r3, [r7, #4]
 80a3352:	685b      	ldr	r3, [r3, #4]
 80a3354:	4619      	mov	r1, r3
 80a3356:	f04f 0200 	mov.w	r2, #0
 80a335a:	f04f 0300 	mov.w	r3, #0
 80a335e:	f04f 0400 	mov.w	r4, #0
 80a3362:	0094      	lsls	r4, r2, #2
 80a3364:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80a3368:	008b      	lsls	r3, r1, #2
 80a336a:	461a      	mov	r2, r3
 80a336c:	4623      	mov	r3, r4
 80a336e:	4628      	mov	r0, r5
 80a3370:	4631      	mov	r1, r6
 80a3372:	f7fd f98d 	bl	80a0690 <__aeabi_uldivmod>
 80a3376:	4603      	mov	r3, r0
 80a3378:	460c      	mov	r4, r1
 80a337a:	461a      	mov	r2, r3
 80a337c:	4bb8      	ldr	r3, [pc, #736]	; (80a3660 <UART_SetConfig+0x6f4>)
 80a337e:	fba3 2302 	umull	r2, r3, r3, r2
 80a3382:	095b      	lsrs	r3, r3, #5
 80a3384:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80a3388:	68bb      	ldr	r3, [r7, #8]
 80a338a:	469b      	mov	fp, r3
 80a338c:	f04f 0c00 	mov.w	ip, #0
 80a3390:	46d9      	mov	r9, fp
 80a3392:	46e2      	mov	sl, ip
 80a3394:	eb19 0309 	adds.w	r3, r9, r9
 80a3398:	eb4a 040a 	adc.w	r4, sl, sl
 80a339c:	4699      	mov	r9, r3
 80a339e:	46a2      	mov	sl, r4
 80a33a0:	eb19 090b 	adds.w	r9, r9, fp
 80a33a4:	eb4a 0a0c 	adc.w	sl, sl, ip
 80a33a8:	f04f 0100 	mov.w	r1, #0
 80a33ac:	f04f 0200 	mov.w	r2, #0
 80a33b0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80a33b4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80a33b8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80a33bc:	4689      	mov	r9, r1
 80a33be:	4692      	mov	sl, r2
 80a33c0:	eb1b 0509 	adds.w	r5, fp, r9
 80a33c4:	eb4c 060a 	adc.w	r6, ip, sl
 80a33c8:	687b      	ldr	r3, [r7, #4]
 80a33ca:	685b      	ldr	r3, [r3, #4]
 80a33cc:	4619      	mov	r1, r3
 80a33ce:	f04f 0200 	mov.w	r2, #0
 80a33d2:	f04f 0300 	mov.w	r3, #0
 80a33d6:	f04f 0400 	mov.w	r4, #0
 80a33da:	0094      	lsls	r4, r2, #2
 80a33dc:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80a33e0:	008b      	lsls	r3, r1, #2
 80a33e2:	461a      	mov	r2, r3
 80a33e4:	4623      	mov	r3, r4
 80a33e6:	4628      	mov	r0, r5
 80a33e8:	4631      	mov	r1, r6
 80a33ea:	f7fd f951 	bl	80a0690 <__aeabi_uldivmod>
 80a33ee:	4603      	mov	r3, r0
 80a33f0:	460c      	mov	r4, r1
 80a33f2:	461a      	mov	r2, r3
 80a33f4:	4b9a      	ldr	r3, [pc, #616]	; (80a3660 <UART_SetConfig+0x6f4>)
 80a33f6:	fba3 1302 	umull	r1, r3, r3, r2
 80a33fa:	095b      	lsrs	r3, r3, #5
 80a33fc:	2164      	movs	r1, #100	; 0x64
 80a33fe:	fb01 f303 	mul.w	r3, r1, r3
 80a3402:	1ad3      	subs	r3, r2, r3
 80a3404:	011b      	lsls	r3, r3, #4
 80a3406:	3332      	adds	r3, #50	; 0x32
 80a3408:	4a95      	ldr	r2, [pc, #596]	; (80a3660 <UART_SetConfig+0x6f4>)
 80a340a:	fba2 2303 	umull	r2, r3, r2, r3
 80a340e:	095b      	lsrs	r3, r3, #5
 80a3410:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80a3414:	4498      	add	r8, r3
 80a3416:	68bb      	ldr	r3, [r7, #8]
 80a3418:	469b      	mov	fp, r3
 80a341a:	f04f 0c00 	mov.w	ip, #0
 80a341e:	46d9      	mov	r9, fp
 80a3420:	46e2      	mov	sl, ip
 80a3422:	eb19 0309 	adds.w	r3, r9, r9
 80a3426:	eb4a 040a 	adc.w	r4, sl, sl
 80a342a:	4699      	mov	r9, r3
 80a342c:	46a2      	mov	sl, r4
 80a342e:	eb19 090b 	adds.w	r9, r9, fp
 80a3432:	eb4a 0a0c 	adc.w	sl, sl, ip
 80a3436:	f04f 0100 	mov.w	r1, #0
 80a343a:	f04f 0200 	mov.w	r2, #0
 80a343e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80a3442:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80a3446:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80a344a:	4689      	mov	r9, r1
 80a344c:	4692      	mov	sl, r2
 80a344e:	eb1b 0509 	adds.w	r5, fp, r9
 80a3452:	eb4c 060a 	adc.w	r6, ip, sl
 80a3456:	687b      	ldr	r3, [r7, #4]
 80a3458:	685b      	ldr	r3, [r3, #4]
 80a345a:	4619      	mov	r1, r3
 80a345c:	f04f 0200 	mov.w	r2, #0
 80a3460:	f04f 0300 	mov.w	r3, #0
 80a3464:	f04f 0400 	mov.w	r4, #0
 80a3468:	0094      	lsls	r4, r2, #2
 80a346a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80a346e:	008b      	lsls	r3, r1, #2
 80a3470:	461a      	mov	r2, r3
 80a3472:	4623      	mov	r3, r4
 80a3474:	4628      	mov	r0, r5
 80a3476:	4631      	mov	r1, r6
 80a3478:	f7fd f90a 	bl	80a0690 <__aeabi_uldivmod>
 80a347c:	4603      	mov	r3, r0
 80a347e:	460c      	mov	r4, r1
 80a3480:	461a      	mov	r2, r3
 80a3482:	4b77      	ldr	r3, [pc, #476]	; (80a3660 <UART_SetConfig+0x6f4>)
 80a3484:	fba3 1302 	umull	r1, r3, r3, r2
 80a3488:	095b      	lsrs	r3, r3, #5
 80a348a:	2164      	movs	r1, #100	; 0x64
 80a348c:	fb01 f303 	mul.w	r3, r1, r3
 80a3490:	1ad3      	subs	r3, r2, r3
 80a3492:	011b      	lsls	r3, r3, #4
 80a3494:	3332      	adds	r3, #50	; 0x32
 80a3496:	4a72      	ldr	r2, [pc, #456]	; (80a3660 <UART_SetConfig+0x6f4>)
 80a3498:	fba2 2303 	umull	r2, r3, r2, r3
 80a349c:	095b      	lsrs	r3, r3, #5
 80a349e:	f003 020f 	and.w	r2, r3, #15
 80a34a2:	687b      	ldr	r3, [r7, #4]
 80a34a4:	681b      	ldr	r3, [r3, #0]
 80a34a6:	4442      	add	r2, r8
 80a34a8:	609a      	str	r2, [r3, #8]
 80a34aa:	e0d0      	b.n	80a364e <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 80a34ac:	f7ff fc06 	bl	80a2cbc <HAL_RCC_GetPCLK1Freq>
 80a34b0:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80a34b2:	68bb      	ldr	r3, [r7, #8]
 80a34b4:	469a      	mov	sl, r3
 80a34b6:	f04f 0b00 	mov.w	fp, #0
 80a34ba:	46d0      	mov	r8, sl
 80a34bc:	46d9      	mov	r9, fp
 80a34be:	eb18 0308 	adds.w	r3, r8, r8
 80a34c2:	eb49 0409 	adc.w	r4, r9, r9
 80a34c6:	4698      	mov	r8, r3
 80a34c8:	46a1      	mov	r9, r4
 80a34ca:	eb18 080a 	adds.w	r8, r8, sl
 80a34ce:	eb49 090b 	adc.w	r9, r9, fp
 80a34d2:	f04f 0100 	mov.w	r1, #0
 80a34d6:	f04f 0200 	mov.w	r2, #0
 80a34da:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80a34de:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80a34e2:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80a34e6:	4688      	mov	r8, r1
 80a34e8:	4691      	mov	r9, r2
 80a34ea:	eb1a 0508 	adds.w	r5, sl, r8
 80a34ee:	eb4b 0609 	adc.w	r6, fp, r9
 80a34f2:	687b      	ldr	r3, [r7, #4]
 80a34f4:	685b      	ldr	r3, [r3, #4]
 80a34f6:	4619      	mov	r1, r3
 80a34f8:	f04f 0200 	mov.w	r2, #0
 80a34fc:	f04f 0300 	mov.w	r3, #0
 80a3500:	f04f 0400 	mov.w	r4, #0
 80a3504:	0094      	lsls	r4, r2, #2
 80a3506:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80a350a:	008b      	lsls	r3, r1, #2
 80a350c:	461a      	mov	r2, r3
 80a350e:	4623      	mov	r3, r4
 80a3510:	4628      	mov	r0, r5
 80a3512:	4631      	mov	r1, r6
 80a3514:	f7fd f8bc 	bl	80a0690 <__aeabi_uldivmod>
 80a3518:	4603      	mov	r3, r0
 80a351a:	460c      	mov	r4, r1
 80a351c:	461a      	mov	r2, r3
 80a351e:	4b50      	ldr	r3, [pc, #320]	; (80a3660 <UART_SetConfig+0x6f4>)
 80a3520:	fba3 2302 	umull	r2, r3, r3, r2
 80a3524:	095b      	lsrs	r3, r3, #5
 80a3526:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80a352a:	68bb      	ldr	r3, [r7, #8]
 80a352c:	469b      	mov	fp, r3
 80a352e:	f04f 0c00 	mov.w	ip, #0
 80a3532:	46d9      	mov	r9, fp
 80a3534:	46e2      	mov	sl, ip
 80a3536:	eb19 0309 	adds.w	r3, r9, r9
 80a353a:	eb4a 040a 	adc.w	r4, sl, sl
 80a353e:	4699      	mov	r9, r3
 80a3540:	46a2      	mov	sl, r4
 80a3542:	eb19 090b 	adds.w	r9, r9, fp
 80a3546:	eb4a 0a0c 	adc.w	sl, sl, ip
 80a354a:	f04f 0100 	mov.w	r1, #0
 80a354e:	f04f 0200 	mov.w	r2, #0
 80a3552:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80a3556:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80a355a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80a355e:	4689      	mov	r9, r1
 80a3560:	4692      	mov	sl, r2
 80a3562:	eb1b 0509 	adds.w	r5, fp, r9
 80a3566:	eb4c 060a 	adc.w	r6, ip, sl
 80a356a:	687b      	ldr	r3, [r7, #4]
 80a356c:	685b      	ldr	r3, [r3, #4]
 80a356e:	4619      	mov	r1, r3
 80a3570:	f04f 0200 	mov.w	r2, #0
 80a3574:	f04f 0300 	mov.w	r3, #0
 80a3578:	f04f 0400 	mov.w	r4, #0
 80a357c:	0094      	lsls	r4, r2, #2
 80a357e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80a3582:	008b      	lsls	r3, r1, #2
 80a3584:	461a      	mov	r2, r3
 80a3586:	4623      	mov	r3, r4
 80a3588:	4628      	mov	r0, r5
 80a358a:	4631      	mov	r1, r6
 80a358c:	f7fd f880 	bl	80a0690 <__aeabi_uldivmod>
 80a3590:	4603      	mov	r3, r0
 80a3592:	460c      	mov	r4, r1
 80a3594:	461a      	mov	r2, r3
 80a3596:	4b32      	ldr	r3, [pc, #200]	; (80a3660 <UART_SetConfig+0x6f4>)
 80a3598:	fba3 1302 	umull	r1, r3, r3, r2
 80a359c:	095b      	lsrs	r3, r3, #5
 80a359e:	2164      	movs	r1, #100	; 0x64
 80a35a0:	fb01 f303 	mul.w	r3, r1, r3
 80a35a4:	1ad3      	subs	r3, r2, r3
 80a35a6:	011b      	lsls	r3, r3, #4
 80a35a8:	3332      	adds	r3, #50	; 0x32
 80a35aa:	4a2d      	ldr	r2, [pc, #180]	; (80a3660 <UART_SetConfig+0x6f4>)
 80a35ac:	fba2 2303 	umull	r2, r3, r2, r3
 80a35b0:	095b      	lsrs	r3, r3, #5
 80a35b2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80a35b6:	4498      	add	r8, r3
 80a35b8:	68bb      	ldr	r3, [r7, #8]
 80a35ba:	469b      	mov	fp, r3
 80a35bc:	f04f 0c00 	mov.w	ip, #0
 80a35c0:	46d9      	mov	r9, fp
 80a35c2:	46e2      	mov	sl, ip
 80a35c4:	eb19 0309 	adds.w	r3, r9, r9
 80a35c8:	eb4a 040a 	adc.w	r4, sl, sl
 80a35cc:	4699      	mov	r9, r3
 80a35ce:	46a2      	mov	sl, r4
 80a35d0:	eb19 090b 	adds.w	r9, r9, fp
 80a35d4:	eb4a 0a0c 	adc.w	sl, sl, ip
 80a35d8:	f04f 0100 	mov.w	r1, #0
 80a35dc:	f04f 0200 	mov.w	r2, #0
 80a35e0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80a35e4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80a35e8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80a35ec:	4689      	mov	r9, r1
 80a35ee:	4692      	mov	sl, r2
 80a35f0:	eb1b 0509 	adds.w	r5, fp, r9
 80a35f4:	eb4c 060a 	adc.w	r6, ip, sl
 80a35f8:	687b      	ldr	r3, [r7, #4]
 80a35fa:	685b      	ldr	r3, [r3, #4]
 80a35fc:	4619      	mov	r1, r3
 80a35fe:	f04f 0200 	mov.w	r2, #0
 80a3602:	f04f 0300 	mov.w	r3, #0
 80a3606:	f04f 0400 	mov.w	r4, #0
 80a360a:	0094      	lsls	r4, r2, #2
 80a360c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80a3610:	008b      	lsls	r3, r1, #2
 80a3612:	461a      	mov	r2, r3
 80a3614:	4623      	mov	r3, r4
 80a3616:	4628      	mov	r0, r5
 80a3618:	4631      	mov	r1, r6
 80a361a:	f7fd f839 	bl	80a0690 <__aeabi_uldivmod>
 80a361e:	4603      	mov	r3, r0
 80a3620:	460c      	mov	r4, r1
 80a3622:	461a      	mov	r2, r3
 80a3624:	4b0e      	ldr	r3, [pc, #56]	; (80a3660 <UART_SetConfig+0x6f4>)
 80a3626:	fba3 1302 	umull	r1, r3, r3, r2
 80a362a:	095b      	lsrs	r3, r3, #5
 80a362c:	2164      	movs	r1, #100	; 0x64
 80a362e:	fb01 f303 	mul.w	r3, r1, r3
 80a3632:	1ad3      	subs	r3, r2, r3
 80a3634:	011b      	lsls	r3, r3, #4
 80a3636:	3332      	adds	r3, #50	; 0x32
 80a3638:	4a09      	ldr	r2, [pc, #36]	; (80a3660 <UART_SetConfig+0x6f4>)
 80a363a:	fba2 2303 	umull	r2, r3, r2, r3
 80a363e:	095b      	lsrs	r3, r3, #5
 80a3640:	f003 020f 	and.w	r2, r3, #15
 80a3644:	687b      	ldr	r3, [r7, #4]
 80a3646:	681b      	ldr	r3, [r3, #0]
 80a3648:	4442      	add	r2, r8
 80a364a:	609a      	str	r2, [r3, #8]
}
 80a364c:	e7ff      	b.n	80a364e <UART_SetConfig+0x6e2>
 80a364e:	bf00      	nop
 80a3650:	3714      	adds	r7, #20
 80a3652:	46bd      	mov	sp, r7
 80a3654:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a3658:	40011000 	.word	0x40011000
 80a365c:	40011400 	.word	0x40011400
 80a3660:	51eb851f 	.word	0x51eb851f

080a3664 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80a3664:	b084      	sub	sp, #16
 80a3666:	b580      	push	{r7, lr}
 80a3668:	b084      	sub	sp, #16
 80a366a:	af00      	add	r7, sp, #0
 80a366c:	6078      	str	r0, [r7, #4]
 80a366e:	f107 001c 	add.w	r0, r7, #28
 80a3672:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80a3676:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80a3678:	2b01      	cmp	r3, #1
 80a367a:	d122      	bne.n	80a36c2 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80a367c:	687b      	ldr	r3, [r7, #4]
 80a367e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80a3680:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80a3684:	687b      	ldr	r3, [r7, #4]
 80a3686:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80a3688:	687b      	ldr	r3, [r7, #4]
 80a368a:	68db      	ldr	r3, [r3, #12]
 80a368c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80a3690:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80a3694:	687a      	ldr	r2, [r7, #4]
 80a3696:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80a3698:	687b      	ldr	r3, [r7, #4]
 80a369a:	68db      	ldr	r3, [r3, #12]
 80a369c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80a36a0:	687b      	ldr	r3, [r7, #4]
 80a36a2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80a36a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80a36a6:	2b01      	cmp	r3, #1
 80a36a8:	d105      	bne.n	80a36b6 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80a36aa:	687b      	ldr	r3, [r7, #4]
 80a36ac:	68db      	ldr	r3, [r3, #12]
 80a36ae:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80a36b2:	687b      	ldr	r3, [r7, #4]
 80a36b4:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 80a36b6:	6878      	ldr	r0, [r7, #4]
 80a36b8:	f000 fa56 	bl	80a3b68 <USB_CoreReset>
 80a36bc:	4603      	mov	r3, r0
 80a36be:	73fb      	strb	r3, [r7, #15]
 80a36c0:	e01a      	b.n	80a36f8 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80a36c2:	687b      	ldr	r3, [r7, #4]
 80a36c4:	68db      	ldr	r3, [r3, #12]
 80a36c6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80a36ca:	687b      	ldr	r3, [r7, #4]
 80a36cc:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80a36ce:	6878      	ldr	r0, [r7, #4]
 80a36d0:	f000 fa4a 	bl	80a3b68 <USB_CoreReset>
 80a36d4:	4603      	mov	r3, r0
 80a36d6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80a36d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80a36da:	2b00      	cmp	r3, #0
 80a36dc:	d106      	bne.n	80a36ec <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80a36de:	687b      	ldr	r3, [r7, #4]
 80a36e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80a36e2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80a36e6:	687b      	ldr	r3, [r7, #4]
 80a36e8:	639a      	str	r2, [r3, #56]	; 0x38
 80a36ea:	e005      	b.n	80a36f8 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80a36ec:	687b      	ldr	r3, [r7, #4]
 80a36ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80a36f0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80a36f4:	687b      	ldr	r3, [r7, #4]
 80a36f6:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80a36f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80a36fa:	2b01      	cmp	r3, #1
 80a36fc:	d10b      	bne.n	80a3716 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80a36fe:	687b      	ldr	r3, [r7, #4]
 80a3700:	689b      	ldr	r3, [r3, #8]
 80a3702:	f043 0206 	orr.w	r2, r3, #6
 80a3706:	687b      	ldr	r3, [r7, #4]
 80a3708:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80a370a:	687b      	ldr	r3, [r7, #4]
 80a370c:	689b      	ldr	r3, [r3, #8]
 80a370e:	f043 0220 	orr.w	r2, r3, #32
 80a3712:	687b      	ldr	r3, [r7, #4]
 80a3714:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80a3716:	7bfb      	ldrb	r3, [r7, #15]
}
 80a3718:	4618      	mov	r0, r3
 80a371a:	3710      	adds	r7, #16
 80a371c:	46bd      	mov	sp, r7
 80a371e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80a3722:	b004      	add	sp, #16
 80a3724:	4770      	bx	lr

080a3726 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80a3726:	b480      	push	{r7}
 80a3728:	b083      	sub	sp, #12
 80a372a:	af00      	add	r7, sp, #0
 80a372c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80a372e:	687b      	ldr	r3, [r7, #4]
 80a3730:	689b      	ldr	r3, [r3, #8]
 80a3732:	f023 0201 	bic.w	r2, r3, #1
 80a3736:	687b      	ldr	r3, [r7, #4]
 80a3738:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80a373a:	2300      	movs	r3, #0
}
 80a373c:	4618      	mov	r0, r3
 80a373e:	370c      	adds	r7, #12
 80a3740:	46bd      	mov	sp, r7
 80a3742:	f85d 7b04 	ldr.w	r7, [sp], #4
 80a3746:	4770      	bx	lr

080a3748 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80a3748:	b580      	push	{r7, lr}
 80a374a:	b082      	sub	sp, #8
 80a374c:	af00      	add	r7, sp, #0
 80a374e:	6078      	str	r0, [r7, #4]
 80a3750:	460b      	mov	r3, r1
 80a3752:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80a3754:	687b      	ldr	r3, [r7, #4]
 80a3756:	68db      	ldr	r3, [r3, #12]
 80a3758:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80a375c:	687b      	ldr	r3, [r7, #4]
 80a375e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80a3760:	78fb      	ldrb	r3, [r7, #3]
 80a3762:	2b01      	cmp	r3, #1
 80a3764:	d106      	bne.n	80a3774 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80a3766:	687b      	ldr	r3, [r7, #4]
 80a3768:	68db      	ldr	r3, [r3, #12]
 80a376a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80a376e:	687b      	ldr	r3, [r7, #4]
 80a3770:	60da      	str	r2, [r3, #12]
 80a3772:	e00b      	b.n	80a378c <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 80a3774:	78fb      	ldrb	r3, [r7, #3]
 80a3776:	2b00      	cmp	r3, #0
 80a3778:	d106      	bne.n	80a3788 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80a377a:	687b      	ldr	r3, [r7, #4]
 80a377c:	68db      	ldr	r3, [r3, #12]
 80a377e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80a3782:	687b      	ldr	r3, [r7, #4]
 80a3784:	60da      	str	r2, [r3, #12]
 80a3786:	e001      	b.n	80a378c <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 80a3788:	2301      	movs	r3, #1
 80a378a:	e003      	b.n	80a3794 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 80a378c:	2032      	movs	r0, #50	; 0x32
 80a378e:	f7fd fe05 	bl	80a139c <HAL_Delay>

  return HAL_OK;
 80a3792:	2300      	movs	r3, #0
}
 80a3794:	4618      	mov	r0, r3
 80a3796:	3708      	adds	r7, #8
 80a3798:	46bd      	mov	sp, r7
 80a379a:	bd80      	pop	{r7, pc}

080a379c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80a379c:	b084      	sub	sp, #16
 80a379e:	b580      	push	{r7, lr}
 80a37a0:	b086      	sub	sp, #24
 80a37a2:	af00      	add	r7, sp, #0
 80a37a4:	6078      	str	r0, [r7, #4]
 80a37a6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80a37aa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80a37ae:	2300      	movs	r3, #0
 80a37b0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80a37b2:	687b      	ldr	r3, [r7, #4]
 80a37b4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80a37b6:	2300      	movs	r3, #0
 80a37b8:	613b      	str	r3, [r7, #16]
 80a37ba:	e009      	b.n	80a37d0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80a37bc:	687a      	ldr	r2, [r7, #4]
 80a37be:	693b      	ldr	r3, [r7, #16]
 80a37c0:	3340      	adds	r3, #64	; 0x40
 80a37c2:	009b      	lsls	r3, r3, #2
 80a37c4:	4413      	add	r3, r2
 80a37c6:	2200      	movs	r2, #0
 80a37c8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80a37ca:	693b      	ldr	r3, [r7, #16]
 80a37cc:	3301      	adds	r3, #1
 80a37ce:	613b      	str	r3, [r7, #16]
 80a37d0:	693b      	ldr	r3, [r7, #16]
 80a37d2:	2b0e      	cmp	r3, #14
 80a37d4:	d9f2      	bls.n	80a37bc <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80a37d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80a37d8:	2b00      	cmp	r3, #0
 80a37da:	d11c      	bne.n	80a3816 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80a37dc:	68fb      	ldr	r3, [r7, #12]
 80a37de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80a37e2:	685b      	ldr	r3, [r3, #4]
 80a37e4:	68fa      	ldr	r2, [r7, #12]
 80a37e6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80a37ea:	f043 0302 	orr.w	r3, r3, #2
 80a37ee:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80a37f0:	687b      	ldr	r3, [r7, #4]
 80a37f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80a37f4:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80a37f8:	687b      	ldr	r3, [r7, #4]
 80a37fa:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80a37fc:	687b      	ldr	r3, [r7, #4]
 80a37fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80a3800:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80a3804:	687b      	ldr	r3, [r7, #4]
 80a3806:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80a3808:	687b      	ldr	r3, [r7, #4]
 80a380a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80a380c:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80a3810:	687b      	ldr	r3, [r7, #4]
 80a3812:	639a      	str	r2, [r3, #56]	; 0x38
 80a3814:	e00b      	b.n	80a382e <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80a3816:	687b      	ldr	r3, [r7, #4]
 80a3818:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80a381a:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80a381e:	687b      	ldr	r3, [r7, #4]
 80a3820:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80a3822:	687b      	ldr	r3, [r7, #4]
 80a3824:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80a3826:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80a382a:	687b      	ldr	r3, [r7, #4]
 80a382c:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80a382e:	68fb      	ldr	r3, [r7, #12]
 80a3830:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80a3834:	461a      	mov	r2, r3
 80a3836:	2300      	movs	r3, #0
 80a3838:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80a383a:	68fb      	ldr	r3, [r7, #12]
 80a383c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80a3840:	4619      	mov	r1, r3
 80a3842:	68fb      	ldr	r3, [r7, #12]
 80a3844:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80a3848:	461a      	mov	r2, r3
 80a384a:	680b      	ldr	r3, [r1, #0]
 80a384c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80a384e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80a3850:	2b01      	cmp	r3, #1
 80a3852:	d10c      	bne.n	80a386e <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80a3854:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80a3856:	2b00      	cmp	r3, #0
 80a3858:	d104      	bne.n	80a3864 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80a385a:	2100      	movs	r1, #0
 80a385c:	6878      	ldr	r0, [r7, #4]
 80a385e:	f000 f949 	bl	80a3af4 <USB_SetDevSpeed>
 80a3862:	e008      	b.n	80a3876 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80a3864:	2101      	movs	r1, #1
 80a3866:	6878      	ldr	r0, [r7, #4]
 80a3868:	f000 f944 	bl	80a3af4 <USB_SetDevSpeed>
 80a386c:	e003      	b.n	80a3876 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80a386e:	2103      	movs	r1, #3
 80a3870:	6878      	ldr	r0, [r7, #4]
 80a3872:	f000 f93f 	bl	80a3af4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80a3876:	2110      	movs	r1, #16
 80a3878:	6878      	ldr	r0, [r7, #4]
 80a387a:	f000 f8f3 	bl	80a3a64 <USB_FlushTxFifo>
 80a387e:	4603      	mov	r3, r0
 80a3880:	2b00      	cmp	r3, #0
 80a3882:	d001      	beq.n	80a3888 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 80a3884:	2301      	movs	r3, #1
 80a3886:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80a3888:	6878      	ldr	r0, [r7, #4]
 80a388a:	f000 f911 	bl	80a3ab0 <USB_FlushRxFifo>
 80a388e:	4603      	mov	r3, r0
 80a3890:	2b00      	cmp	r3, #0
 80a3892:	d001      	beq.n	80a3898 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 80a3894:	2301      	movs	r3, #1
 80a3896:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80a3898:	68fb      	ldr	r3, [r7, #12]
 80a389a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80a389e:	461a      	mov	r2, r3
 80a38a0:	2300      	movs	r3, #0
 80a38a2:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80a38a4:	68fb      	ldr	r3, [r7, #12]
 80a38a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80a38aa:	461a      	mov	r2, r3
 80a38ac:	2300      	movs	r3, #0
 80a38ae:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80a38b0:	68fb      	ldr	r3, [r7, #12]
 80a38b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80a38b6:	461a      	mov	r2, r3
 80a38b8:	2300      	movs	r3, #0
 80a38ba:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80a38bc:	2300      	movs	r3, #0
 80a38be:	613b      	str	r3, [r7, #16]
 80a38c0:	e043      	b.n	80a394a <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80a38c2:	693b      	ldr	r3, [r7, #16]
 80a38c4:	015a      	lsls	r2, r3, #5
 80a38c6:	68fb      	ldr	r3, [r7, #12]
 80a38c8:	4413      	add	r3, r2
 80a38ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80a38ce:	681b      	ldr	r3, [r3, #0]
 80a38d0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80a38d4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80a38d8:	d118      	bne.n	80a390c <USB_DevInit+0x170>
    {
      if (i == 0U)
 80a38da:	693b      	ldr	r3, [r7, #16]
 80a38dc:	2b00      	cmp	r3, #0
 80a38de:	d10a      	bne.n	80a38f6 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80a38e0:	693b      	ldr	r3, [r7, #16]
 80a38e2:	015a      	lsls	r2, r3, #5
 80a38e4:	68fb      	ldr	r3, [r7, #12]
 80a38e6:	4413      	add	r3, r2
 80a38e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80a38ec:	461a      	mov	r2, r3
 80a38ee:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80a38f2:	6013      	str	r3, [r2, #0]
 80a38f4:	e013      	b.n	80a391e <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80a38f6:	693b      	ldr	r3, [r7, #16]
 80a38f8:	015a      	lsls	r2, r3, #5
 80a38fa:	68fb      	ldr	r3, [r7, #12]
 80a38fc:	4413      	add	r3, r2
 80a38fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80a3902:	461a      	mov	r2, r3
 80a3904:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80a3908:	6013      	str	r3, [r2, #0]
 80a390a:	e008      	b.n	80a391e <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80a390c:	693b      	ldr	r3, [r7, #16]
 80a390e:	015a      	lsls	r2, r3, #5
 80a3910:	68fb      	ldr	r3, [r7, #12]
 80a3912:	4413      	add	r3, r2
 80a3914:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80a3918:	461a      	mov	r2, r3
 80a391a:	2300      	movs	r3, #0
 80a391c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80a391e:	693b      	ldr	r3, [r7, #16]
 80a3920:	015a      	lsls	r2, r3, #5
 80a3922:	68fb      	ldr	r3, [r7, #12]
 80a3924:	4413      	add	r3, r2
 80a3926:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80a392a:	461a      	mov	r2, r3
 80a392c:	2300      	movs	r3, #0
 80a392e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80a3930:	693b      	ldr	r3, [r7, #16]
 80a3932:	015a      	lsls	r2, r3, #5
 80a3934:	68fb      	ldr	r3, [r7, #12]
 80a3936:	4413      	add	r3, r2
 80a3938:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80a393c:	461a      	mov	r2, r3
 80a393e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80a3942:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80a3944:	693b      	ldr	r3, [r7, #16]
 80a3946:	3301      	adds	r3, #1
 80a3948:	613b      	str	r3, [r7, #16]
 80a394a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80a394c:	693a      	ldr	r2, [r7, #16]
 80a394e:	429a      	cmp	r2, r3
 80a3950:	d3b7      	bcc.n	80a38c2 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80a3952:	2300      	movs	r3, #0
 80a3954:	613b      	str	r3, [r7, #16]
 80a3956:	e043      	b.n	80a39e0 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80a3958:	693b      	ldr	r3, [r7, #16]
 80a395a:	015a      	lsls	r2, r3, #5
 80a395c:	68fb      	ldr	r3, [r7, #12]
 80a395e:	4413      	add	r3, r2
 80a3960:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80a3964:	681b      	ldr	r3, [r3, #0]
 80a3966:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80a396a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80a396e:	d118      	bne.n	80a39a2 <USB_DevInit+0x206>
    {
      if (i == 0U)
 80a3970:	693b      	ldr	r3, [r7, #16]
 80a3972:	2b00      	cmp	r3, #0
 80a3974:	d10a      	bne.n	80a398c <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80a3976:	693b      	ldr	r3, [r7, #16]
 80a3978:	015a      	lsls	r2, r3, #5
 80a397a:	68fb      	ldr	r3, [r7, #12]
 80a397c:	4413      	add	r3, r2
 80a397e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80a3982:	461a      	mov	r2, r3
 80a3984:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80a3988:	6013      	str	r3, [r2, #0]
 80a398a:	e013      	b.n	80a39b4 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80a398c:	693b      	ldr	r3, [r7, #16]
 80a398e:	015a      	lsls	r2, r3, #5
 80a3990:	68fb      	ldr	r3, [r7, #12]
 80a3992:	4413      	add	r3, r2
 80a3994:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80a3998:	461a      	mov	r2, r3
 80a399a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80a399e:	6013      	str	r3, [r2, #0]
 80a39a0:	e008      	b.n	80a39b4 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80a39a2:	693b      	ldr	r3, [r7, #16]
 80a39a4:	015a      	lsls	r2, r3, #5
 80a39a6:	68fb      	ldr	r3, [r7, #12]
 80a39a8:	4413      	add	r3, r2
 80a39aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80a39ae:	461a      	mov	r2, r3
 80a39b0:	2300      	movs	r3, #0
 80a39b2:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80a39b4:	693b      	ldr	r3, [r7, #16]
 80a39b6:	015a      	lsls	r2, r3, #5
 80a39b8:	68fb      	ldr	r3, [r7, #12]
 80a39ba:	4413      	add	r3, r2
 80a39bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80a39c0:	461a      	mov	r2, r3
 80a39c2:	2300      	movs	r3, #0
 80a39c4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80a39c6:	693b      	ldr	r3, [r7, #16]
 80a39c8:	015a      	lsls	r2, r3, #5
 80a39ca:	68fb      	ldr	r3, [r7, #12]
 80a39cc:	4413      	add	r3, r2
 80a39ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80a39d2:	461a      	mov	r2, r3
 80a39d4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80a39d8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80a39da:	693b      	ldr	r3, [r7, #16]
 80a39dc:	3301      	adds	r3, #1
 80a39de:	613b      	str	r3, [r7, #16]
 80a39e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80a39e2:	693a      	ldr	r2, [r7, #16]
 80a39e4:	429a      	cmp	r2, r3
 80a39e6:	d3b7      	bcc.n	80a3958 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80a39e8:	68fb      	ldr	r3, [r7, #12]
 80a39ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80a39ee:	691b      	ldr	r3, [r3, #16]
 80a39f0:	68fa      	ldr	r2, [r7, #12]
 80a39f2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80a39f6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80a39fa:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80a39fc:	687b      	ldr	r3, [r7, #4]
 80a39fe:	2200      	movs	r2, #0
 80a3a00:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80a3a02:	687b      	ldr	r3, [r7, #4]
 80a3a04:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80a3a08:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80a3a0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80a3a0c:	2b00      	cmp	r3, #0
 80a3a0e:	d105      	bne.n	80a3a1c <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80a3a10:	687b      	ldr	r3, [r7, #4]
 80a3a12:	699b      	ldr	r3, [r3, #24]
 80a3a14:	f043 0210 	orr.w	r2, r3, #16
 80a3a18:	687b      	ldr	r3, [r7, #4]
 80a3a1a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80a3a1c:	687b      	ldr	r3, [r7, #4]
 80a3a1e:	699a      	ldr	r2, [r3, #24]
 80a3a20:	4b0f      	ldr	r3, [pc, #60]	; (80a3a60 <USB_DevInit+0x2c4>)
 80a3a22:	4313      	orrs	r3, r2
 80a3a24:	687a      	ldr	r2, [r7, #4]
 80a3a26:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80a3a28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80a3a2a:	2b00      	cmp	r3, #0
 80a3a2c:	d005      	beq.n	80a3a3a <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80a3a2e:	687b      	ldr	r3, [r7, #4]
 80a3a30:	699b      	ldr	r3, [r3, #24]
 80a3a32:	f043 0208 	orr.w	r2, r3, #8
 80a3a36:	687b      	ldr	r3, [r7, #4]
 80a3a38:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80a3a3a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80a3a3c:	2b01      	cmp	r3, #1
 80a3a3e:	d107      	bne.n	80a3a50 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80a3a40:	687b      	ldr	r3, [r7, #4]
 80a3a42:	699b      	ldr	r3, [r3, #24]
 80a3a44:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80a3a48:	f043 0304 	orr.w	r3, r3, #4
 80a3a4c:	687a      	ldr	r2, [r7, #4]
 80a3a4e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80a3a50:	7dfb      	ldrb	r3, [r7, #23]
}
 80a3a52:	4618      	mov	r0, r3
 80a3a54:	3718      	adds	r7, #24
 80a3a56:	46bd      	mov	sp, r7
 80a3a58:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80a3a5c:	b004      	add	sp, #16
 80a3a5e:	4770      	bx	lr
 80a3a60:	803c3800 	.word	0x803c3800

080a3a64 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80a3a64:	b480      	push	{r7}
 80a3a66:	b085      	sub	sp, #20
 80a3a68:	af00      	add	r7, sp, #0
 80a3a6a:	6078      	str	r0, [r7, #4]
 80a3a6c:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 80a3a6e:	2300      	movs	r3, #0
 80a3a70:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80a3a72:	683b      	ldr	r3, [r7, #0]
 80a3a74:	019b      	lsls	r3, r3, #6
 80a3a76:	f043 0220 	orr.w	r2, r3, #32
 80a3a7a:	687b      	ldr	r3, [r7, #4]
 80a3a7c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80a3a7e:	68fb      	ldr	r3, [r7, #12]
 80a3a80:	3301      	adds	r3, #1
 80a3a82:	60fb      	str	r3, [r7, #12]
 80a3a84:	68fb      	ldr	r3, [r7, #12]
 80a3a86:	4a09      	ldr	r2, [pc, #36]	; (80a3aac <USB_FlushTxFifo+0x48>)
 80a3a88:	4293      	cmp	r3, r2
 80a3a8a:	d901      	bls.n	80a3a90 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 80a3a8c:	2303      	movs	r3, #3
 80a3a8e:	e006      	b.n	80a3a9e <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80a3a90:	687b      	ldr	r3, [r7, #4]
 80a3a92:	691b      	ldr	r3, [r3, #16]
 80a3a94:	f003 0320 	and.w	r3, r3, #32
 80a3a98:	2b20      	cmp	r3, #32
 80a3a9a:	d0f0      	beq.n	80a3a7e <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 80a3a9c:	2300      	movs	r3, #0
}
 80a3a9e:	4618      	mov	r0, r3
 80a3aa0:	3714      	adds	r7, #20
 80a3aa2:	46bd      	mov	sp, r7
 80a3aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80a3aa8:	4770      	bx	lr
 80a3aaa:	bf00      	nop
 80a3aac:	00030d40 	.word	0x00030d40

080a3ab0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80a3ab0:	b480      	push	{r7}
 80a3ab2:	b085      	sub	sp, #20
 80a3ab4:	af00      	add	r7, sp, #0
 80a3ab6:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 80a3ab8:	2300      	movs	r3, #0
 80a3aba:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80a3abc:	687b      	ldr	r3, [r7, #4]
 80a3abe:	2210      	movs	r2, #16
 80a3ac0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80a3ac2:	68fb      	ldr	r3, [r7, #12]
 80a3ac4:	3301      	adds	r3, #1
 80a3ac6:	60fb      	str	r3, [r7, #12]
 80a3ac8:	68fb      	ldr	r3, [r7, #12]
 80a3aca:	4a09      	ldr	r2, [pc, #36]	; (80a3af0 <USB_FlushRxFifo+0x40>)
 80a3acc:	4293      	cmp	r3, r2
 80a3ace:	d901      	bls.n	80a3ad4 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 80a3ad0:	2303      	movs	r3, #3
 80a3ad2:	e006      	b.n	80a3ae2 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80a3ad4:	687b      	ldr	r3, [r7, #4]
 80a3ad6:	691b      	ldr	r3, [r3, #16]
 80a3ad8:	f003 0310 	and.w	r3, r3, #16
 80a3adc:	2b10      	cmp	r3, #16
 80a3ade:	d0f0      	beq.n	80a3ac2 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 80a3ae0:	2300      	movs	r3, #0
}
 80a3ae2:	4618      	mov	r0, r3
 80a3ae4:	3714      	adds	r7, #20
 80a3ae6:	46bd      	mov	sp, r7
 80a3ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80a3aec:	4770      	bx	lr
 80a3aee:	bf00      	nop
 80a3af0:	00030d40 	.word	0x00030d40

080a3af4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80a3af4:	b480      	push	{r7}
 80a3af6:	b085      	sub	sp, #20
 80a3af8:	af00      	add	r7, sp, #0
 80a3afa:	6078      	str	r0, [r7, #4]
 80a3afc:	460b      	mov	r3, r1
 80a3afe:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80a3b00:	687b      	ldr	r3, [r7, #4]
 80a3b02:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80a3b04:	68fb      	ldr	r3, [r7, #12]
 80a3b06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80a3b0a:	681a      	ldr	r2, [r3, #0]
 80a3b0c:	78fb      	ldrb	r3, [r7, #3]
 80a3b0e:	68f9      	ldr	r1, [r7, #12]
 80a3b10:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80a3b14:	4313      	orrs	r3, r2
 80a3b16:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80a3b18:	2300      	movs	r3, #0
}
 80a3b1a:	4618      	mov	r0, r3
 80a3b1c:	3714      	adds	r7, #20
 80a3b1e:	46bd      	mov	sp, r7
 80a3b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 80a3b24:	4770      	bx	lr

080a3b26 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80a3b26:	b480      	push	{r7}
 80a3b28:	b085      	sub	sp, #20
 80a3b2a:	af00      	add	r7, sp, #0
 80a3b2c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80a3b2e:	687b      	ldr	r3, [r7, #4]
 80a3b30:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80a3b32:	68fb      	ldr	r3, [r7, #12]
 80a3b34:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80a3b38:	681b      	ldr	r3, [r3, #0]
 80a3b3a:	68fa      	ldr	r2, [r7, #12]
 80a3b3c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80a3b40:	f023 0303 	bic.w	r3, r3, #3
 80a3b44:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80a3b46:	68fb      	ldr	r3, [r7, #12]
 80a3b48:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80a3b4c:	685b      	ldr	r3, [r3, #4]
 80a3b4e:	68fa      	ldr	r2, [r7, #12]
 80a3b50:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80a3b54:	f043 0302 	orr.w	r3, r3, #2
 80a3b58:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80a3b5a:	2300      	movs	r3, #0
}
 80a3b5c:	4618      	mov	r0, r3
 80a3b5e:	3714      	adds	r7, #20
 80a3b60:	46bd      	mov	sp, r7
 80a3b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 80a3b66:	4770      	bx	lr

080a3b68 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80a3b68:	b480      	push	{r7}
 80a3b6a:	b085      	sub	sp, #20
 80a3b6c:	af00      	add	r7, sp, #0
 80a3b6e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 80a3b70:	2300      	movs	r3, #0
 80a3b72:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80a3b74:	68fb      	ldr	r3, [r7, #12]
 80a3b76:	3301      	adds	r3, #1
 80a3b78:	60fb      	str	r3, [r7, #12]
 80a3b7a:	68fb      	ldr	r3, [r7, #12]
 80a3b7c:	4a13      	ldr	r2, [pc, #76]	; (80a3bcc <USB_CoreReset+0x64>)
 80a3b7e:	4293      	cmp	r3, r2
 80a3b80:	d901      	bls.n	80a3b86 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80a3b82:	2303      	movs	r3, #3
 80a3b84:	e01b      	b.n	80a3bbe <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80a3b86:	687b      	ldr	r3, [r7, #4]
 80a3b88:	691b      	ldr	r3, [r3, #16]
 80a3b8a:	2b00      	cmp	r3, #0
 80a3b8c:	daf2      	bge.n	80a3b74 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80a3b8e:	2300      	movs	r3, #0
 80a3b90:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80a3b92:	687b      	ldr	r3, [r7, #4]
 80a3b94:	691b      	ldr	r3, [r3, #16]
 80a3b96:	f043 0201 	orr.w	r2, r3, #1
 80a3b9a:	687b      	ldr	r3, [r7, #4]
 80a3b9c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80a3b9e:	68fb      	ldr	r3, [r7, #12]
 80a3ba0:	3301      	adds	r3, #1
 80a3ba2:	60fb      	str	r3, [r7, #12]
 80a3ba4:	68fb      	ldr	r3, [r7, #12]
 80a3ba6:	4a09      	ldr	r2, [pc, #36]	; (80a3bcc <USB_CoreReset+0x64>)
 80a3ba8:	4293      	cmp	r3, r2
 80a3baa:	d901      	bls.n	80a3bb0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80a3bac:	2303      	movs	r3, #3
 80a3bae:	e006      	b.n	80a3bbe <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80a3bb0:	687b      	ldr	r3, [r7, #4]
 80a3bb2:	691b      	ldr	r3, [r3, #16]
 80a3bb4:	f003 0301 	and.w	r3, r3, #1
 80a3bb8:	2b01      	cmp	r3, #1
 80a3bba:	d0f0      	beq.n	80a3b9e <USB_CoreReset+0x36>

  return HAL_OK;
 80a3bbc:	2300      	movs	r3, #0
}
 80a3bbe:	4618      	mov	r0, r3
 80a3bc0:	3714      	adds	r7, #20
 80a3bc2:	46bd      	mov	sp, r7
 80a3bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80a3bc8:	4770      	bx	lr
 80a3bca:	bf00      	nop
 80a3bcc:	00030d40 	.word	0x00030d40

080a3bd0 <__errno>:
 80a3bd0:	4b01      	ldr	r3, [pc, #4]	; (80a3bd8 <__errno+0x8>)
 80a3bd2:	6818      	ldr	r0, [r3, #0]
 80a3bd4:	4770      	bx	lr
 80a3bd6:	bf00      	nop
 80a3bd8:	2000000c 	.word	0x2000000c

080a3bdc <__libc_init_array>:
 80a3bdc:	b570      	push	{r4, r5, r6, lr}
 80a3bde:	4e0d      	ldr	r6, [pc, #52]	; (80a3c14 <__libc_init_array+0x38>)
 80a3be0:	4c0d      	ldr	r4, [pc, #52]	; (80a3c18 <__libc_init_array+0x3c>)
 80a3be2:	1ba4      	subs	r4, r4, r6
 80a3be4:	10a4      	asrs	r4, r4, #2
 80a3be6:	2500      	movs	r5, #0
 80a3be8:	42a5      	cmp	r5, r4
 80a3bea:	d109      	bne.n	80a3c00 <__libc_init_array+0x24>
 80a3bec:	4e0b      	ldr	r6, [pc, #44]	; (80a3c1c <__libc_init_array+0x40>)
 80a3bee:	4c0c      	ldr	r4, [pc, #48]	; (80a3c20 <__libc_init_array+0x44>)
 80a3bf0:	f000 ff04 	bl	80a49fc <_init>
 80a3bf4:	1ba4      	subs	r4, r4, r6
 80a3bf6:	10a4      	asrs	r4, r4, #2
 80a3bf8:	2500      	movs	r5, #0
 80a3bfa:	42a5      	cmp	r5, r4
 80a3bfc:	d105      	bne.n	80a3c0a <__libc_init_array+0x2e>
 80a3bfe:	bd70      	pop	{r4, r5, r6, pc}
 80a3c00:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80a3c04:	4798      	blx	r3
 80a3c06:	3501      	adds	r5, #1
 80a3c08:	e7ee      	b.n	80a3be8 <__libc_init_array+0xc>
 80a3c0a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80a3c0e:	4798      	blx	r3
 80a3c10:	3501      	adds	r5, #1
 80a3c12:	e7f2      	b.n	80a3bfa <__libc_init_array+0x1e>
 80a3c14:	080a4af4 	.word	0x080a4af4
 80a3c18:	080a4af4 	.word	0x080a4af4
 80a3c1c:	080a4af4 	.word	0x080a4af4
 80a3c20:	080a4af8 	.word	0x080a4af8

080a3c24 <memset>:
 80a3c24:	4402      	add	r2, r0
 80a3c26:	4603      	mov	r3, r0
 80a3c28:	4293      	cmp	r3, r2
 80a3c2a:	d100      	bne.n	80a3c2e <memset+0xa>
 80a3c2c:	4770      	bx	lr
 80a3c2e:	f803 1b01 	strb.w	r1, [r3], #1
 80a3c32:	e7f9      	b.n	80a3c28 <memset+0x4>

080a3c34 <iprintf>:
 80a3c34:	b40f      	push	{r0, r1, r2, r3}
 80a3c36:	4b0a      	ldr	r3, [pc, #40]	; (80a3c60 <iprintf+0x2c>)
 80a3c38:	b513      	push	{r0, r1, r4, lr}
 80a3c3a:	681c      	ldr	r4, [r3, #0]
 80a3c3c:	b124      	cbz	r4, 80a3c48 <iprintf+0x14>
 80a3c3e:	69a3      	ldr	r3, [r4, #24]
 80a3c40:	b913      	cbnz	r3, 80a3c48 <iprintf+0x14>
 80a3c42:	4620      	mov	r0, r4
 80a3c44:	f000 f84e 	bl	80a3ce4 <__sinit>
 80a3c48:	ab05      	add	r3, sp, #20
 80a3c4a:	9a04      	ldr	r2, [sp, #16]
 80a3c4c:	68a1      	ldr	r1, [r4, #8]
 80a3c4e:	9301      	str	r3, [sp, #4]
 80a3c50:	4620      	mov	r0, r4
 80a3c52:	f000 f955 	bl	80a3f00 <_vfiprintf_r>
 80a3c56:	b002      	add	sp, #8
 80a3c58:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80a3c5c:	b004      	add	sp, #16
 80a3c5e:	4770      	bx	lr
 80a3c60:	2000000c 	.word	0x2000000c

080a3c64 <std>:
 80a3c64:	2300      	movs	r3, #0
 80a3c66:	b510      	push	{r4, lr}
 80a3c68:	4604      	mov	r4, r0
 80a3c6a:	e9c0 3300 	strd	r3, r3, [r0]
 80a3c6e:	6083      	str	r3, [r0, #8]
 80a3c70:	8181      	strh	r1, [r0, #12]
 80a3c72:	6643      	str	r3, [r0, #100]	; 0x64
 80a3c74:	81c2      	strh	r2, [r0, #14]
 80a3c76:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80a3c7a:	6183      	str	r3, [r0, #24]
 80a3c7c:	4619      	mov	r1, r3
 80a3c7e:	2208      	movs	r2, #8
 80a3c80:	305c      	adds	r0, #92	; 0x5c
 80a3c82:	f7ff ffcf 	bl	80a3c24 <memset>
 80a3c86:	4b05      	ldr	r3, [pc, #20]	; (80a3c9c <std+0x38>)
 80a3c88:	6263      	str	r3, [r4, #36]	; 0x24
 80a3c8a:	4b05      	ldr	r3, [pc, #20]	; (80a3ca0 <std+0x3c>)
 80a3c8c:	62a3      	str	r3, [r4, #40]	; 0x28
 80a3c8e:	4b05      	ldr	r3, [pc, #20]	; (80a3ca4 <std+0x40>)
 80a3c90:	62e3      	str	r3, [r4, #44]	; 0x2c
 80a3c92:	4b05      	ldr	r3, [pc, #20]	; (80a3ca8 <std+0x44>)
 80a3c94:	6224      	str	r4, [r4, #32]
 80a3c96:	6323      	str	r3, [r4, #48]	; 0x30
 80a3c98:	bd10      	pop	{r4, pc}
 80a3c9a:	bf00      	nop
 80a3c9c:	080a445d 	.word	0x080a445d
 80a3ca0:	080a447f 	.word	0x080a447f
 80a3ca4:	080a44b7 	.word	0x080a44b7
 80a3ca8:	080a44db 	.word	0x080a44db

080a3cac <_cleanup_r>:
 80a3cac:	4901      	ldr	r1, [pc, #4]	; (80a3cb4 <_cleanup_r+0x8>)
 80a3cae:	f000 b885 	b.w	80a3dbc <_fwalk_reent>
 80a3cb2:	bf00      	nop
 80a3cb4:	080a47b5 	.word	0x080a47b5

080a3cb8 <__sfmoreglue>:
 80a3cb8:	b570      	push	{r4, r5, r6, lr}
 80a3cba:	1e4a      	subs	r2, r1, #1
 80a3cbc:	2568      	movs	r5, #104	; 0x68
 80a3cbe:	4355      	muls	r5, r2
 80a3cc0:	460e      	mov	r6, r1
 80a3cc2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80a3cc6:	f000 f897 	bl	80a3df8 <_malloc_r>
 80a3cca:	4604      	mov	r4, r0
 80a3ccc:	b140      	cbz	r0, 80a3ce0 <__sfmoreglue+0x28>
 80a3cce:	2100      	movs	r1, #0
 80a3cd0:	e9c0 1600 	strd	r1, r6, [r0]
 80a3cd4:	300c      	adds	r0, #12
 80a3cd6:	60a0      	str	r0, [r4, #8]
 80a3cd8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80a3cdc:	f7ff ffa2 	bl	80a3c24 <memset>
 80a3ce0:	4620      	mov	r0, r4
 80a3ce2:	bd70      	pop	{r4, r5, r6, pc}

080a3ce4 <__sinit>:
 80a3ce4:	6983      	ldr	r3, [r0, #24]
 80a3ce6:	b510      	push	{r4, lr}
 80a3ce8:	4604      	mov	r4, r0
 80a3cea:	bb33      	cbnz	r3, 80a3d3a <__sinit+0x56>
 80a3cec:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 80a3cf0:	6503      	str	r3, [r0, #80]	; 0x50
 80a3cf2:	4b12      	ldr	r3, [pc, #72]	; (80a3d3c <__sinit+0x58>)
 80a3cf4:	4a12      	ldr	r2, [pc, #72]	; (80a3d40 <__sinit+0x5c>)
 80a3cf6:	681b      	ldr	r3, [r3, #0]
 80a3cf8:	6282      	str	r2, [r0, #40]	; 0x28
 80a3cfa:	4298      	cmp	r0, r3
 80a3cfc:	bf04      	itt	eq
 80a3cfe:	2301      	moveq	r3, #1
 80a3d00:	6183      	streq	r3, [r0, #24]
 80a3d02:	f000 f81f 	bl	80a3d44 <__sfp>
 80a3d06:	6060      	str	r0, [r4, #4]
 80a3d08:	4620      	mov	r0, r4
 80a3d0a:	f000 f81b 	bl	80a3d44 <__sfp>
 80a3d0e:	60a0      	str	r0, [r4, #8]
 80a3d10:	4620      	mov	r0, r4
 80a3d12:	f000 f817 	bl	80a3d44 <__sfp>
 80a3d16:	2200      	movs	r2, #0
 80a3d18:	60e0      	str	r0, [r4, #12]
 80a3d1a:	2104      	movs	r1, #4
 80a3d1c:	6860      	ldr	r0, [r4, #4]
 80a3d1e:	f7ff ffa1 	bl	80a3c64 <std>
 80a3d22:	2201      	movs	r2, #1
 80a3d24:	2109      	movs	r1, #9
 80a3d26:	68a0      	ldr	r0, [r4, #8]
 80a3d28:	f7ff ff9c 	bl	80a3c64 <std>
 80a3d2c:	2202      	movs	r2, #2
 80a3d2e:	2112      	movs	r1, #18
 80a3d30:	68e0      	ldr	r0, [r4, #12]
 80a3d32:	f7ff ff97 	bl	80a3c64 <std>
 80a3d36:	2301      	movs	r3, #1
 80a3d38:	61a3      	str	r3, [r4, #24]
 80a3d3a:	bd10      	pop	{r4, pc}
 80a3d3c:	080a4a54 	.word	0x080a4a54
 80a3d40:	080a3cad 	.word	0x080a3cad

080a3d44 <__sfp>:
 80a3d44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a3d46:	4b1b      	ldr	r3, [pc, #108]	; (80a3db4 <__sfp+0x70>)
 80a3d48:	681e      	ldr	r6, [r3, #0]
 80a3d4a:	69b3      	ldr	r3, [r6, #24]
 80a3d4c:	4607      	mov	r7, r0
 80a3d4e:	b913      	cbnz	r3, 80a3d56 <__sfp+0x12>
 80a3d50:	4630      	mov	r0, r6
 80a3d52:	f7ff ffc7 	bl	80a3ce4 <__sinit>
 80a3d56:	3648      	adds	r6, #72	; 0x48
 80a3d58:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80a3d5c:	3b01      	subs	r3, #1
 80a3d5e:	d503      	bpl.n	80a3d68 <__sfp+0x24>
 80a3d60:	6833      	ldr	r3, [r6, #0]
 80a3d62:	b133      	cbz	r3, 80a3d72 <__sfp+0x2e>
 80a3d64:	6836      	ldr	r6, [r6, #0]
 80a3d66:	e7f7      	b.n	80a3d58 <__sfp+0x14>
 80a3d68:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80a3d6c:	b16d      	cbz	r5, 80a3d8a <__sfp+0x46>
 80a3d6e:	3468      	adds	r4, #104	; 0x68
 80a3d70:	e7f4      	b.n	80a3d5c <__sfp+0x18>
 80a3d72:	2104      	movs	r1, #4
 80a3d74:	4638      	mov	r0, r7
 80a3d76:	f7ff ff9f 	bl	80a3cb8 <__sfmoreglue>
 80a3d7a:	6030      	str	r0, [r6, #0]
 80a3d7c:	2800      	cmp	r0, #0
 80a3d7e:	d1f1      	bne.n	80a3d64 <__sfp+0x20>
 80a3d80:	230c      	movs	r3, #12
 80a3d82:	603b      	str	r3, [r7, #0]
 80a3d84:	4604      	mov	r4, r0
 80a3d86:	4620      	mov	r0, r4
 80a3d88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80a3d8a:	4b0b      	ldr	r3, [pc, #44]	; (80a3db8 <__sfp+0x74>)
 80a3d8c:	6665      	str	r5, [r4, #100]	; 0x64
 80a3d8e:	e9c4 5500 	strd	r5, r5, [r4]
 80a3d92:	60a5      	str	r5, [r4, #8]
 80a3d94:	e9c4 3503 	strd	r3, r5, [r4, #12]
 80a3d98:	e9c4 5505 	strd	r5, r5, [r4, #20]
 80a3d9c:	2208      	movs	r2, #8
 80a3d9e:	4629      	mov	r1, r5
 80a3da0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80a3da4:	f7ff ff3e 	bl	80a3c24 <memset>
 80a3da8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80a3dac:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80a3db0:	e7e9      	b.n	80a3d86 <__sfp+0x42>
 80a3db2:	bf00      	nop
 80a3db4:	080a4a54 	.word	0x080a4a54
 80a3db8:	ffff0001 	.word	0xffff0001

080a3dbc <_fwalk_reent>:
 80a3dbc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80a3dc0:	4680      	mov	r8, r0
 80a3dc2:	4689      	mov	r9, r1
 80a3dc4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80a3dc8:	2600      	movs	r6, #0
 80a3dca:	b914      	cbnz	r4, 80a3dd2 <_fwalk_reent+0x16>
 80a3dcc:	4630      	mov	r0, r6
 80a3dce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80a3dd2:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 80a3dd6:	3f01      	subs	r7, #1
 80a3dd8:	d501      	bpl.n	80a3dde <_fwalk_reent+0x22>
 80a3dda:	6824      	ldr	r4, [r4, #0]
 80a3ddc:	e7f5      	b.n	80a3dca <_fwalk_reent+0xe>
 80a3dde:	89ab      	ldrh	r3, [r5, #12]
 80a3de0:	2b01      	cmp	r3, #1
 80a3de2:	d907      	bls.n	80a3df4 <_fwalk_reent+0x38>
 80a3de4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80a3de8:	3301      	adds	r3, #1
 80a3dea:	d003      	beq.n	80a3df4 <_fwalk_reent+0x38>
 80a3dec:	4629      	mov	r1, r5
 80a3dee:	4640      	mov	r0, r8
 80a3df0:	47c8      	blx	r9
 80a3df2:	4306      	orrs	r6, r0
 80a3df4:	3568      	adds	r5, #104	; 0x68
 80a3df6:	e7ee      	b.n	80a3dd6 <_fwalk_reent+0x1a>

080a3df8 <_malloc_r>:
 80a3df8:	b570      	push	{r4, r5, r6, lr}
 80a3dfa:	1ccd      	adds	r5, r1, #3
 80a3dfc:	f025 0503 	bic.w	r5, r5, #3
 80a3e00:	3508      	adds	r5, #8
 80a3e02:	2d0c      	cmp	r5, #12
 80a3e04:	bf38      	it	cc
 80a3e06:	250c      	movcc	r5, #12
 80a3e08:	2d00      	cmp	r5, #0
 80a3e0a:	4606      	mov	r6, r0
 80a3e0c:	db01      	blt.n	80a3e12 <_malloc_r+0x1a>
 80a3e0e:	42a9      	cmp	r1, r5
 80a3e10:	d903      	bls.n	80a3e1a <_malloc_r+0x22>
 80a3e12:	230c      	movs	r3, #12
 80a3e14:	6033      	str	r3, [r6, #0]
 80a3e16:	2000      	movs	r0, #0
 80a3e18:	bd70      	pop	{r4, r5, r6, pc}
 80a3e1a:	f000 fd6b 	bl	80a48f4 <__malloc_lock>
 80a3e1e:	4a21      	ldr	r2, [pc, #132]	; (80a3ea4 <_malloc_r+0xac>)
 80a3e20:	6814      	ldr	r4, [r2, #0]
 80a3e22:	4621      	mov	r1, r4
 80a3e24:	b991      	cbnz	r1, 80a3e4c <_malloc_r+0x54>
 80a3e26:	4c20      	ldr	r4, [pc, #128]	; (80a3ea8 <_malloc_r+0xb0>)
 80a3e28:	6823      	ldr	r3, [r4, #0]
 80a3e2a:	b91b      	cbnz	r3, 80a3e34 <_malloc_r+0x3c>
 80a3e2c:	4630      	mov	r0, r6
 80a3e2e:	f000 fb05 	bl	80a443c <_sbrk_r>
 80a3e32:	6020      	str	r0, [r4, #0]
 80a3e34:	4629      	mov	r1, r5
 80a3e36:	4630      	mov	r0, r6
 80a3e38:	f000 fb00 	bl	80a443c <_sbrk_r>
 80a3e3c:	1c43      	adds	r3, r0, #1
 80a3e3e:	d124      	bne.n	80a3e8a <_malloc_r+0x92>
 80a3e40:	230c      	movs	r3, #12
 80a3e42:	6033      	str	r3, [r6, #0]
 80a3e44:	4630      	mov	r0, r6
 80a3e46:	f000 fd56 	bl	80a48f6 <__malloc_unlock>
 80a3e4a:	e7e4      	b.n	80a3e16 <_malloc_r+0x1e>
 80a3e4c:	680b      	ldr	r3, [r1, #0]
 80a3e4e:	1b5b      	subs	r3, r3, r5
 80a3e50:	d418      	bmi.n	80a3e84 <_malloc_r+0x8c>
 80a3e52:	2b0b      	cmp	r3, #11
 80a3e54:	d90f      	bls.n	80a3e76 <_malloc_r+0x7e>
 80a3e56:	600b      	str	r3, [r1, #0]
 80a3e58:	50cd      	str	r5, [r1, r3]
 80a3e5a:	18cc      	adds	r4, r1, r3
 80a3e5c:	4630      	mov	r0, r6
 80a3e5e:	f000 fd4a 	bl	80a48f6 <__malloc_unlock>
 80a3e62:	f104 000b 	add.w	r0, r4, #11
 80a3e66:	1d23      	adds	r3, r4, #4
 80a3e68:	f020 0007 	bic.w	r0, r0, #7
 80a3e6c:	1ac3      	subs	r3, r0, r3
 80a3e6e:	d0d3      	beq.n	80a3e18 <_malloc_r+0x20>
 80a3e70:	425a      	negs	r2, r3
 80a3e72:	50e2      	str	r2, [r4, r3]
 80a3e74:	e7d0      	b.n	80a3e18 <_malloc_r+0x20>
 80a3e76:	428c      	cmp	r4, r1
 80a3e78:	684b      	ldr	r3, [r1, #4]
 80a3e7a:	bf16      	itet	ne
 80a3e7c:	6063      	strne	r3, [r4, #4]
 80a3e7e:	6013      	streq	r3, [r2, #0]
 80a3e80:	460c      	movne	r4, r1
 80a3e82:	e7eb      	b.n	80a3e5c <_malloc_r+0x64>
 80a3e84:	460c      	mov	r4, r1
 80a3e86:	6849      	ldr	r1, [r1, #4]
 80a3e88:	e7cc      	b.n	80a3e24 <_malloc_r+0x2c>
 80a3e8a:	1cc4      	adds	r4, r0, #3
 80a3e8c:	f024 0403 	bic.w	r4, r4, #3
 80a3e90:	42a0      	cmp	r0, r4
 80a3e92:	d005      	beq.n	80a3ea0 <_malloc_r+0xa8>
 80a3e94:	1a21      	subs	r1, r4, r0
 80a3e96:	4630      	mov	r0, r6
 80a3e98:	f000 fad0 	bl	80a443c <_sbrk_r>
 80a3e9c:	3001      	adds	r0, #1
 80a3e9e:	d0cf      	beq.n	80a3e40 <_malloc_r+0x48>
 80a3ea0:	6025      	str	r5, [r4, #0]
 80a3ea2:	e7db      	b.n	80a3e5c <_malloc_r+0x64>
 80a3ea4:	20000090 	.word	0x20000090
 80a3ea8:	20000094 	.word	0x20000094

080a3eac <__sfputc_r>:
 80a3eac:	6893      	ldr	r3, [r2, #8]
 80a3eae:	3b01      	subs	r3, #1
 80a3eb0:	2b00      	cmp	r3, #0
 80a3eb2:	b410      	push	{r4}
 80a3eb4:	6093      	str	r3, [r2, #8]
 80a3eb6:	da08      	bge.n	80a3eca <__sfputc_r+0x1e>
 80a3eb8:	6994      	ldr	r4, [r2, #24]
 80a3eba:	42a3      	cmp	r3, r4
 80a3ebc:	db01      	blt.n	80a3ec2 <__sfputc_r+0x16>
 80a3ebe:	290a      	cmp	r1, #10
 80a3ec0:	d103      	bne.n	80a3eca <__sfputc_r+0x1e>
 80a3ec2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80a3ec6:	f000 bb0d 	b.w	80a44e4 <__swbuf_r>
 80a3eca:	6813      	ldr	r3, [r2, #0]
 80a3ecc:	1c58      	adds	r0, r3, #1
 80a3ece:	6010      	str	r0, [r2, #0]
 80a3ed0:	7019      	strb	r1, [r3, #0]
 80a3ed2:	4608      	mov	r0, r1
 80a3ed4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80a3ed8:	4770      	bx	lr

080a3eda <__sfputs_r>:
 80a3eda:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a3edc:	4606      	mov	r6, r0
 80a3ede:	460f      	mov	r7, r1
 80a3ee0:	4614      	mov	r4, r2
 80a3ee2:	18d5      	adds	r5, r2, r3
 80a3ee4:	42ac      	cmp	r4, r5
 80a3ee6:	d101      	bne.n	80a3eec <__sfputs_r+0x12>
 80a3ee8:	2000      	movs	r0, #0
 80a3eea:	e007      	b.n	80a3efc <__sfputs_r+0x22>
 80a3eec:	463a      	mov	r2, r7
 80a3eee:	f814 1b01 	ldrb.w	r1, [r4], #1
 80a3ef2:	4630      	mov	r0, r6
 80a3ef4:	f7ff ffda 	bl	80a3eac <__sfputc_r>
 80a3ef8:	1c43      	adds	r3, r0, #1
 80a3efa:	d1f3      	bne.n	80a3ee4 <__sfputs_r+0xa>
 80a3efc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080a3f00 <_vfiprintf_r>:
 80a3f00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a3f04:	460c      	mov	r4, r1
 80a3f06:	b09d      	sub	sp, #116	; 0x74
 80a3f08:	4617      	mov	r7, r2
 80a3f0a:	461d      	mov	r5, r3
 80a3f0c:	4606      	mov	r6, r0
 80a3f0e:	b118      	cbz	r0, 80a3f18 <_vfiprintf_r+0x18>
 80a3f10:	6983      	ldr	r3, [r0, #24]
 80a3f12:	b90b      	cbnz	r3, 80a3f18 <_vfiprintf_r+0x18>
 80a3f14:	f7ff fee6 	bl	80a3ce4 <__sinit>
 80a3f18:	4b7c      	ldr	r3, [pc, #496]	; (80a410c <_vfiprintf_r+0x20c>)
 80a3f1a:	429c      	cmp	r4, r3
 80a3f1c:	d158      	bne.n	80a3fd0 <_vfiprintf_r+0xd0>
 80a3f1e:	6874      	ldr	r4, [r6, #4]
 80a3f20:	89a3      	ldrh	r3, [r4, #12]
 80a3f22:	0718      	lsls	r0, r3, #28
 80a3f24:	d55e      	bpl.n	80a3fe4 <_vfiprintf_r+0xe4>
 80a3f26:	6923      	ldr	r3, [r4, #16]
 80a3f28:	2b00      	cmp	r3, #0
 80a3f2a:	d05b      	beq.n	80a3fe4 <_vfiprintf_r+0xe4>
 80a3f2c:	2300      	movs	r3, #0
 80a3f2e:	9309      	str	r3, [sp, #36]	; 0x24
 80a3f30:	2320      	movs	r3, #32
 80a3f32:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80a3f36:	2330      	movs	r3, #48	; 0x30
 80a3f38:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80a3f3c:	9503      	str	r5, [sp, #12]
 80a3f3e:	f04f 0b01 	mov.w	fp, #1
 80a3f42:	46b8      	mov	r8, r7
 80a3f44:	4645      	mov	r5, r8
 80a3f46:	f815 3b01 	ldrb.w	r3, [r5], #1
 80a3f4a:	b10b      	cbz	r3, 80a3f50 <_vfiprintf_r+0x50>
 80a3f4c:	2b25      	cmp	r3, #37	; 0x25
 80a3f4e:	d154      	bne.n	80a3ffa <_vfiprintf_r+0xfa>
 80a3f50:	ebb8 0a07 	subs.w	sl, r8, r7
 80a3f54:	d00b      	beq.n	80a3f6e <_vfiprintf_r+0x6e>
 80a3f56:	4653      	mov	r3, sl
 80a3f58:	463a      	mov	r2, r7
 80a3f5a:	4621      	mov	r1, r4
 80a3f5c:	4630      	mov	r0, r6
 80a3f5e:	f7ff ffbc 	bl	80a3eda <__sfputs_r>
 80a3f62:	3001      	adds	r0, #1
 80a3f64:	f000 80c2 	beq.w	80a40ec <_vfiprintf_r+0x1ec>
 80a3f68:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80a3f6a:	4453      	add	r3, sl
 80a3f6c:	9309      	str	r3, [sp, #36]	; 0x24
 80a3f6e:	f898 3000 	ldrb.w	r3, [r8]
 80a3f72:	2b00      	cmp	r3, #0
 80a3f74:	f000 80ba 	beq.w	80a40ec <_vfiprintf_r+0x1ec>
 80a3f78:	2300      	movs	r3, #0
 80a3f7a:	f04f 32ff 	mov.w	r2, #4294967295
 80a3f7e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80a3f82:	9304      	str	r3, [sp, #16]
 80a3f84:	9307      	str	r3, [sp, #28]
 80a3f86:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80a3f8a:	931a      	str	r3, [sp, #104]	; 0x68
 80a3f8c:	46a8      	mov	r8, r5
 80a3f8e:	2205      	movs	r2, #5
 80a3f90:	f818 1b01 	ldrb.w	r1, [r8], #1
 80a3f94:	485e      	ldr	r0, [pc, #376]	; (80a4110 <_vfiprintf_r+0x210>)
 80a3f96:	f7fc fb2b 	bl	80a05f0 <memchr>
 80a3f9a:	9b04      	ldr	r3, [sp, #16]
 80a3f9c:	bb78      	cbnz	r0, 80a3ffe <_vfiprintf_r+0xfe>
 80a3f9e:	06d9      	lsls	r1, r3, #27
 80a3fa0:	bf44      	itt	mi
 80a3fa2:	2220      	movmi	r2, #32
 80a3fa4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80a3fa8:	071a      	lsls	r2, r3, #28
 80a3faa:	bf44      	itt	mi
 80a3fac:	222b      	movmi	r2, #43	; 0x2b
 80a3fae:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80a3fb2:	782a      	ldrb	r2, [r5, #0]
 80a3fb4:	2a2a      	cmp	r2, #42	; 0x2a
 80a3fb6:	d02a      	beq.n	80a400e <_vfiprintf_r+0x10e>
 80a3fb8:	9a07      	ldr	r2, [sp, #28]
 80a3fba:	46a8      	mov	r8, r5
 80a3fbc:	2000      	movs	r0, #0
 80a3fbe:	250a      	movs	r5, #10
 80a3fc0:	4641      	mov	r1, r8
 80a3fc2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80a3fc6:	3b30      	subs	r3, #48	; 0x30
 80a3fc8:	2b09      	cmp	r3, #9
 80a3fca:	d969      	bls.n	80a40a0 <_vfiprintf_r+0x1a0>
 80a3fcc:	b360      	cbz	r0, 80a4028 <_vfiprintf_r+0x128>
 80a3fce:	e024      	b.n	80a401a <_vfiprintf_r+0x11a>
 80a3fd0:	4b50      	ldr	r3, [pc, #320]	; (80a4114 <_vfiprintf_r+0x214>)
 80a3fd2:	429c      	cmp	r4, r3
 80a3fd4:	d101      	bne.n	80a3fda <_vfiprintf_r+0xda>
 80a3fd6:	68b4      	ldr	r4, [r6, #8]
 80a3fd8:	e7a2      	b.n	80a3f20 <_vfiprintf_r+0x20>
 80a3fda:	4b4f      	ldr	r3, [pc, #316]	; (80a4118 <_vfiprintf_r+0x218>)
 80a3fdc:	429c      	cmp	r4, r3
 80a3fde:	bf08      	it	eq
 80a3fe0:	68f4      	ldreq	r4, [r6, #12]
 80a3fe2:	e79d      	b.n	80a3f20 <_vfiprintf_r+0x20>
 80a3fe4:	4621      	mov	r1, r4
 80a3fe6:	4630      	mov	r0, r6
 80a3fe8:	f000 fae0 	bl	80a45ac <__swsetup_r>
 80a3fec:	2800      	cmp	r0, #0
 80a3fee:	d09d      	beq.n	80a3f2c <_vfiprintf_r+0x2c>
 80a3ff0:	f04f 30ff 	mov.w	r0, #4294967295
 80a3ff4:	b01d      	add	sp, #116	; 0x74
 80a3ff6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a3ffa:	46a8      	mov	r8, r5
 80a3ffc:	e7a2      	b.n	80a3f44 <_vfiprintf_r+0x44>
 80a3ffe:	4a44      	ldr	r2, [pc, #272]	; (80a4110 <_vfiprintf_r+0x210>)
 80a4000:	1a80      	subs	r0, r0, r2
 80a4002:	fa0b f000 	lsl.w	r0, fp, r0
 80a4006:	4318      	orrs	r0, r3
 80a4008:	9004      	str	r0, [sp, #16]
 80a400a:	4645      	mov	r5, r8
 80a400c:	e7be      	b.n	80a3f8c <_vfiprintf_r+0x8c>
 80a400e:	9a03      	ldr	r2, [sp, #12]
 80a4010:	1d11      	adds	r1, r2, #4
 80a4012:	6812      	ldr	r2, [r2, #0]
 80a4014:	9103      	str	r1, [sp, #12]
 80a4016:	2a00      	cmp	r2, #0
 80a4018:	db01      	blt.n	80a401e <_vfiprintf_r+0x11e>
 80a401a:	9207      	str	r2, [sp, #28]
 80a401c:	e004      	b.n	80a4028 <_vfiprintf_r+0x128>
 80a401e:	4252      	negs	r2, r2
 80a4020:	f043 0302 	orr.w	r3, r3, #2
 80a4024:	9207      	str	r2, [sp, #28]
 80a4026:	9304      	str	r3, [sp, #16]
 80a4028:	f898 3000 	ldrb.w	r3, [r8]
 80a402c:	2b2e      	cmp	r3, #46	; 0x2e
 80a402e:	d10e      	bne.n	80a404e <_vfiprintf_r+0x14e>
 80a4030:	f898 3001 	ldrb.w	r3, [r8, #1]
 80a4034:	2b2a      	cmp	r3, #42	; 0x2a
 80a4036:	d138      	bne.n	80a40aa <_vfiprintf_r+0x1aa>
 80a4038:	9b03      	ldr	r3, [sp, #12]
 80a403a:	1d1a      	adds	r2, r3, #4
 80a403c:	681b      	ldr	r3, [r3, #0]
 80a403e:	9203      	str	r2, [sp, #12]
 80a4040:	2b00      	cmp	r3, #0
 80a4042:	bfb8      	it	lt
 80a4044:	f04f 33ff 	movlt.w	r3, #4294967295
 80a4048:	f108 0802 	add.w	r8, r8, #2
 80a404c:	9305      	str	r3, [sp, #20]
 80a404e:	4d33      	ldr	r5, [pc, #204]	; (80a411c <_vfiprintf_r+0x21c>)
 80a4050:	f898 1000 	ldrb.w	r1, [r8]
 80a4054:	2203      	movs	r2, #3
 80a4056:	4628      	mov	r0, r5
 80a4058:	f7fc faca 	bl	80a05f0 <memchr>
 80a405c:	b140      	cbz	r0, 80a4070 <_vfiprintf_r+0x170>
 80a405e:	2340      	movs	r3, #64	; 0x40
 80a4060:	1b40      	subs	r0, r0, r5
 80a4062:	fa03 f000 	lsl.w	r0, r3, r0
 80a4066:	9b04      	ldr	r3, [sp, #16]
 80a4068:	4303      	orrs	r3, r0
 80a406a:	f108 0801 	add.w	r8, r8, #1
 80a406e:	9304      	str	r3, [sp, #16]
 80a4070:	f898 1000 	ldrb.w	r1, [r8]
 80a4074:	482a      	ldr	r0, [pc, #168]	; (80a4120 <_vfiprintf_r+0x220>)
 80a4076:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80a407a:	2206      	movs	r2, #6
 80a407c:	f108 0701 	add.w	r7, r8, #1
 80a4080:	f7fc fab6 	bl	80a05f0 <memchr>
 80a4084:	2800      	cmp	r0, #0
 80a4086:	d037      	beq.n	80a40f8 <_vfiprintf_r+0x1f8>
 80a4088:	4b26      	ldr	r3, [pc, #152]	; (80a4124 <_vfiprintf_r+0x224>)
 80a408a:	bb1b      	cbnz	r3, 80a40d4 <_vfiprintf_r+0x1d4>
 80a408c:	9b03      	ldr	r3, [sp, #12]
 80a408e:	3307      	adds	r3, #7
 80a4090:	f023 0307 	bic.w	r3, r3, #7
 80a4094:	3308      	adds	r3, #8
 80a4096:	9303      	str	r3, [sp, #12]
 80a4098:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80a409a:	444b      	add	r3, r9
 80a409c:	9309      	str	r3, [sp, #36]	; 0x24
 80a409e:	e750      	b.n	80a3f42 <_vfiprintf_r+0x42>
 80a40a0:	fb05 3202 	mla	r2, r5, r2, r3
 80a40a4:	2001      	movs	r0, #1
 80a40a6:	4688      	mov	r8, r1
 80a40a8:	e78a      	b.n	80a3fc0 <_vfiprintf_r+0xc0>
 80a40aa:	2300      	movs	r3, #0
 80a40ac:	f108 0801 	add.w	r8, r8, #1
 80a40b0:	9305      	str	r3, [sp, #20]
 80a40b2:	4619      	mov	r1, r3
 80a40b4:	250a      	movs	r5, #10
 80a40b6:	4640      	mov	r0, r8
 80a40b8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80a40bc:	3a30      	subs	r2, #48	; 0x30
 80a40be:	2a09      	cmp	r2, #9
 80a40c0:	d903      	bls.n	80a40ca <_vfiprintf_r+0x1ca>
 80a40c2:	2b00      	cmp	r3, #0
 80a40c4:	d0c3      	beq.n	80a404e <_vfiprintf_r+0x14e>
 80a40c6:	9105      	str	r1, [sp, #20]
 80a40c8:	e7c1      	b.n	80a404e <_vfiprintf_r+0x14e>
 80a40ca:	fb05 2101 	mla	r1, r5, r1, r2
 80a40ce:	2301      	movs	r3, #1
 80a40d0:	4680      	mov	r8, r0
 80a40d2:	e7f0      	b.n	80a40b6 <_vfiprintf_r+0x1b6>
 80a40d4:	ab03      	add	r3, sp, #12
 80a40d6:	9300      	str	r3, [sp, #0]
 80a40d8:	4622      	mov	r2, r4
 80a40da:	4b13      	ldr	r3, [pc, #76]	; (80a4128 <_vfiprintf_r+0x228>)
 80a40dc:	a904      	add	r1, sp, #16
 80a40de:	4630      	mov	r0, r6
 80a40e0:	f3af 8000 	nop.w
 80a40e4:	f1b0 3fff 	cmp.w	r0, #4294967295
 80a40e8:	4681      	mov	r9, r0
 80a40ea:	d1d5      	bne.n	80a4098 <_vfiprintf_r+0x198>
 80a40ec:	89a3      	ldrh	r3, [r4, #12]
 80a40ee:	065b      	lsls	r3, r3, #25
 80a40f0:	f53f af7e 	bmi.w	80a3ff0 <_vfiprintf_r+0xf0>
 80a40f4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80a40f6:	e77d      	b.n	80a3ff4 <_vfiprintf_r+0xf4>
 80a40f8:	ab03      	add	r3, sp, #12
 80a40fa:	9300      	str	r3, [sp, #0]
 80a40fc:	4622      	mov	r2, r4
 80a40fe:	4b0a      	ldr	r3, [pc, #40]	; (80a4128 <_vfiprintf_r+0x228>)
 80a4100:	a904      	add	r1, sp, #16
 80a4102:	4630      	mov	r0, r6
 80a4104:	f000 f888 	bl	80a4218 <_printf_i>
 80a4108:	e7ec      	b.n	80a40e4 <_vfiprintf_r+0x1e4>
 80a410a:	bf00      	nop
 80a410c:	080a4a78 	.word	0x080a4a78
 80a4110:	080a4ab8 	.word	0x080a4ab8
 80a4114:	080a4a98 	.word	0x080a4a98
 80a4118:	080a4a58 	.word	0x080a4a58
 80a411c:	080a4abe 	.word	0x080a4abe
 80a4120:	080a4ac2 	.word	0x080a4ac2
 80a4124:	00000000 	.word	0x00000000
 80a4128:	080a3edb 	.word	0x080a3edb

080a412c <_printf_common>:
 80a412c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80a4130:	4691      	mov	r9, r2
 80a4132:	461f      	mov	r7, r3
 80a4134:	688a      	ldr	r2, [r1, #8]
 80a4136:	690b      	ldr	r3, [r1, #16]
 80a4138:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80a413c:	4293      	cmp	r3, r2
 80a413e:	bfb8      	it	lt
 80a4140:	4613      	movlt	r3, r2
 80a4142:	f8c9 3000 	str.w	r3, [r9]
 80a4146:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80a414a:	4606      	mov	r6, r0
 80a414c:	460c      	mov	r4, r1
 80a414e:	b112      	cbz	r2, 80a4156 <_printf_common+0x2a>
 80a4150:	3301      	adds	r3, #1
 80a4152:	f8c9 3000 	str.w	r3, [r9]
 80a4156:	6823      	ldr	r3, [r4, #0]
 80a4158:	0699      	lsls	r1, r3, #26
 80a415a:	bf42      	ittt	mi
 80a415c:	f8d9 3000 	ldrmi.w	r3, [r9]
 80a4160:	3302      	addmi	r3, #2
 80a4162:	f8c9 3000 	strmi.w	r3, [r9]
 80a4166:	6825      	ldr	r5, [r4, #0]
 80a4168:	f015 0506 	ands.w	r5, r5, #6
 80a416c:	d107      	bne.n	80a417e <_printf_common+0x52>
 80a416e:	f104 0a19 	add.w	sl, r4, #25
 80a4172:	68e3      	ldr	r3, [r4, #12]
 80a4174:	f8d9 2000 	ldr.w	r2, [r9]
 80a4178:	1a9b      	subs	r3, r3, r2
 80a417a:	42ab      	cmp	r3, r5
 80a417c:	dc28      	bgt.n	80a41d0 <_printf_common+0xa4>
 80a417e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80a4182:	6822      	ldr	r2, [r4, #0]
 80a4184:	3300      	adds	r3, #0
 80a4186:	bf18      	it	ne
 80a4188:	2301      	movne	r3, #1
 80a418a:	0692      	lsls	r2, r2, #26
 80a418c:	d42d      	bmi.n	80a41ea <_printf_common+0xbe>
 80a418e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80a4192:	4639      	mov	r1, r7
 80a4194:	4630      	mov	r0, r6
 80a4196:	47c0      	blx	r8
 80a4198:	3001      	adds	r0, #1
 80a419a:	d020      	beq.n	80a41de <_printf_common+0xb2>
 80a419c:	6823      	ldr	r3, [r4, #0]
 80a419e:	68e5      	ldr	r5, [r4, #12]
 80a41a0:	f8d9 2000 	ldr.w	r2, [r9]
 80a41a4:	f003 0306 	and.w	r3, r3, #6
 80a41a8:	2b04      	cmp	r3, #4
 80a41aa:	bf08      	it	eq
 80a41ac:	1aad      	subeq	r5, r5, r2
 80a41ae:	68a3      	ldr	r3, [r4, #8]
 80a41b0:	6922      	ldr	r2, [r4, #16]
 80a41b2:	bf0c      	ite	eq
 80a41b4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80a41b8:	2500      	movne	r5, #0
 80a41ba:	4293      	cmp	r3, r2
 80a41bc:	bfc4      	itt	gt
 80a41be:	1a9b      	subgt	r3, r3, r2
 80a41c0:	18ed      	addgt	r5, r5, r3
 80a41c2:	f04f 0900 	mov.w	r9, #0
 80a41c6:	341a      	adds	r4, #26
 80a41c8:	454d      	cmp	r5, r9
 80a41ca:	d11a      	bne.n	80a4202 <_printf_common+0xd6>
 80a41cc:	2000      	movs	r0, #0
 80a41ce:	e008      	b.n	80a41e2 <_printf_common+0xb6>
 80a41d0:	2301      	movs	r3, #1
 80a41d2:	4652      	mov	r2, sl
 80a41d4:	4639      	mov	r1, r7
 80a41d6:	4630      	mov	r0, r6
 80a41d8:	47c0      	blx	r8
 80a41da:	3001      	adds	r0, #1
 80a41dc:	d103      	bne.n	80a41e6 <_printf_common+0xba>
 80a41de:	f04f 30ff 	mov.w	r0, #4294967295
 80a41e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80a41e6:	3501      	adds	r5, #1
 80a41e8:	e7c3      	b.n	80a4172 <_printf_common+0x46>
 80a41ea:	18e1      	adds	r1, r4, r3
 80a41ec:	1c5a      	adds	r2, r3, #1
 80a41ee:	2030      	movs	r0, #48	; 0x30
 80a41f0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80a41f4:	4422      	add	r2, r4
 80a41f6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80a41fa:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80a41fe:	3302      	adds	r3, #2
 80a4200:	e7c5      	b.n	80a418e <_printf_common+0x62>
 80a4202:	2301      	movs	r3, #1
 80a4204:	4622      	mov	r2, r4
 80a4206:	4639      	mov	r1, r7
 80a4208:	4630      	mov	r0, r6
 80a420a:	47c0      	blx	r8
 80a420c:	3001      	adds	r0, #1
 80a420e:	d0e6      	beq.n	80a41de <_printf_common+0xb2>
 80a4210:	f109 0901 	add.w	r9, r9, #1
 80a4214:	e7d8      	b.n	80a41c8 <_printf_common+0x9c>
	...

080a4218 <_printf_i>:
 80a4218:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80a421c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80a4220:	460c      	mov	r4, r1
 80a4222:	7e09      	ldrb	r1, [r1, #24]
 80a4224:	b085      	sub	sp, #20
 80a4226:	296e      	cmp	r1, #110	; 0x6e
 80a4228:	4617      	mov	r7, r2
 80a422a:	4606      	mov	r6, r0
 80a422c:	4698      	mov	r8, r3
 80a422e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80a4230:	f000 80b3 	beq.w	80a439a <_printf_i+0x182>
 80a4234:	d822      	bhi.n	80a427c <_printf_i+0x64>
 80a4236:	2963      	cmp	r1, #99	; 0x63
 80a4238:	d036      	beq.n	80a42a8 <_printf_i+0x90>
 80a423a:	d80a      	bhi.n	80a4252 <_printf_i+0x3a>
 80a423c:	2900      	cmp	r1, #0
 80a423e:	f000 80b9 	beq.w	80a43b4 <_printf_i+0x19c>
 80a4242:	2958      	cmp	r1, #88	; 0x58
 80a4244:	f000 8083 	beq.w	80a434e <_printf_i+0x136>
 80a4248:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80a424c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80a4250:	e032      	b.n	80a42b8 <_printf_i+0xa0>
 80a4252:	2964      	cmp	r1, #100	; 0x64
 80a4254:	d001      	beq.n	80a425a <_printf_i+0x42>
 80a4256:	2969      	cmp	r1, #105	; 0x69
 80a4258:	d1f6      	bne.n	80a4248 <_printf_i+0x30>
 80a425a:	6820      	ldr	r0, [r4, #0]
 80a425c:	6813      	ldr	r3, [r2, #0]
 80a425e:	0605      	lsls	r5, r0, #24
 80a4260:	f103 0104 	add.w	r1, r3, #4
 80a4264:	d52a      	bpl.n	80a42bc <_printf_i+0xa4>
 80a4266:	681b      	ldr	r3, [r3, #0]
 80a4268:	6011      	str	r1, [r2, #0]
 80a426a:	2b00      	cmp	r3, #0
 80a426c:	da03      	bge.n	80a4276 <_printf_i+0x5e>
 80a426e:	222d      	movs	r2, #45	; 0x2d
 80a4270:	425b      	negs	r3, r3
 80a4272:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80a4276:	486f      	ldr	r0, [pc, #444]	; (80a4434 <_printf_i+0x21c>)
 80a4278:	220a      	movs	r2, #10
 80a427a:	e039      	b.n	80a42f0 <_printf_i+0xd8>
 80a427c:	2973      	cmp	r1, #115	; 0x73
 80a427e:	f000 809d 	beq.w	80a43bc <_printf_i+0x1a4>
 80a4282:	d808      	bhi.n	80a4296 <_printf_i+0x7e>
 80a4284:	296f      	cmp	r1, #111	; 0x6f
 80a4286:	d020      	beq.n	80a42ca <_printf_i+0xb2>
 80a4288:	2970      	cmp	r1, #112	; 0x70
 80a428a:	d1dd      	bne.n	80a4248 <_printf_i+0x30>
 80a428c:	6823      	ldr	r3, [r4, #0]
 80a428e:	f043 0320 	orr.w	r3, r3, #32
 80a4292:	6023      	str	r3, [r4, #0]
 80a4294:	e003      	b.n	80a429e <_printf_i+0x86>
 80a4296:	2975      	cmp	r1, #117	; 0x75
 80a4298:	d017      	beq.n	80a42ca <_printf_i+0xb2>
 80a429a:	2978      	cmp	r1, #120	; 0x78
 80a429c:	d1d4      	bne.n	80a4248 <_printf_i+0x30>
 80a429e:	2378      	movs	r3, #120	; 0x78
 80a42a0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80a42a4:	4864      	ldr	r0, [pc, #400]	; (80a4438 <_printf_i+0x220>)
 80a42a6:	e055      	b.n	80a4354 <_printf_i+0x13c>
 80a42a8:	6813      	ldr	r3, [r2, #0]
 80a42aa:	1d19      	adds	r1, r3, #4
 80a42ac:	681b      	ldr	r3, [r3, #0]
 80a42ae:	6011      	str	r1, [r2, #0]
 80a42b0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80a42b4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80a42b8:	2301      	movs	r3, #1
 80a42ba:	e08c      	b.n	80a43d6 <_printf_i+0x1be>
 80a42bc:	681b      	ldr	r3, [r3, #0]
 80a42be:	6011      	str	r1, [r2, #0]
 80a42c0:	f010 0f40 	tst.w	r0, #64	; 0x40
 80a42c4:	bf18      	it	ne
 80a42c6:	b21b      	sxthne	r3, r3
 80a42c8:	e7cf      	b.n	80a426a <_printf_i+0x52>
 80a42ca:	6813      	ldr	r3, [r2, #0]
 80a42cc:	6825      	ldr	r5, [r4, #0]
 80a42ce:	1d18      	adds	r0, r3, #4
 80a42d0:	6010      	str	r0, [r2, #0]
 80a42d2:	0628      	lsls	r0, r5, #24
 80a42d4:	d501      	bpl.n	80a42da <_printf_i+0xc2>
 80a42d6:	681b      	ldr	r3, [r3, #0]
 80a42d8:	e002      	b.n	80a42e0 <_printf_i+0xc8>
 80a42da:	0668      	lsls	r0, r5, #25
 80a42dc:	d5fb      	bpl.n	80a42d6 <_printf_i+0xbe>
 80a42de:	881b      	ldrh	r3, [r3, #0]
 80a42e0:	4854      	ldr	r0, [pc, #336]	; (80a4434 <_printf_i+0x21c>)
 80a42e2:	296f      	cmp	r1, #111	; 0x6f
 80a42e4:	bf14      	ite	ne
 80a42e6:	220a      	movne	r2, #10
 80a42e8:	2208      	moveq	r2, #8
 80a42ea:	2100      	movs	r1, #0
 80a42ec:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80a42f0:	6865      	ldr	r5, [r4, #4]
 80a42f2:	60a5      	str	r5, [r4, #8]
 80a42f4:	2d00      	cmp	r5, #0
 80a42f6:	f2c0 8095 	blt.w	80a4424 <_printf_i+0x20c>
 80a42fa:	6821      	ldr	r1, [r4, #0]
 80a42fc:	f021 0104 	bic.w	r1, r1, #4
 80a4300:	6021      	str	r1, [r4, #0]
 80a4302:	2b00      	cmp	r3, #0
 80a4304:	d13d      	bne.n	80a4382 <_printf_i+0x16a>
 80a4306:	2d00      	cmp	r5, #0
 80a4308:	f040 808e 	bne.w	80a4428 <_printf_i+0x210>
 80a430c:	4665      	mov	r5, ip
 80a430e:	2a08      	cmp	r2, #8
 80a4310:	d10b      	bne.n	80a432a <_printf_i+0x112>
 80a4312:	6823      	ldr	r3, [r4, #0]
 80a4314:	07db      	lsls	r3, r3, #31
 80a4316:	d508      	bpl.n	80a432a <_printf_i+0x112>
 80a4318:	6923      	ldr	r3, [r4, #16]
 80a431a:	6862      	ldr	r2, [r4, #4]
 80a431c:	429a      	cmp	r2, r3
 80a431e:	bfde      	ittt	le
 80a4320:	2330      	movle	r3, #48	; 0x30
 80a4322:	f805 3c01 	strble.w	r3, [r5, #-1]
 80a4326:	f105 35ff 	addle.w	r5, r5, #4294967295
 80a432a:	ebac 0305 	sub.w	r3, ip, r5
 80a432e:	6123      	str	r3, [r4, #16]
 80a4330:	f8cd 8000 	str.w	r8, [sp]
 80a4334:	463b      	mov	r3, r7
 80a4336:	aa03      	add	r2, sp, #12
 80a4338:	4621      	mov	r1, r4
 80a433a:	4630      	mov	r0, r6
 80a433c:	f7ff fef6 	bl	80a412c <_printf_common>
 80a4340:	3001      	adds	r0, #1
 80a4342:	d14d      	bne.n	80a43e0 <_printf_i+0x1c8>
 80a4344:	f04f 30ff 	mov.w	r0, #4294967295
 80a4348:	b005      	add	sp, #20
 80a434a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80a434e:	4839      	ldr	r0, [pc, #228]	; (80a4434 <_printf_i+0x21c>)
 80a4350:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80a4354:	6813      	ldr	r3, [r2, #0]
 80a4356:	6821      	ldr	r1, [r4, #0]
 80a4358:	1d1d      	adds	r5, r3, #4
 80a435a:	681b      	ldr	r3, [r3, #0]
 80a435c:	6015      	str	r5, [r2, #0]
 80a435e:	060a      	lsls	r2, r1, #24
 80a4360:	d50b      	bpl.n	80a437a <_printf_i+0x162>
 80a4362:	07ca      	lsls	r2, r1, #31
 80a4364:	bf44      	itt	mi
 80a4366:	f041 0120 	orrmi.w	r1, r1, #32
 80a436a:	6021      	strmi	r1, [r4, #0]
 80a436c:	b91b      	cbnz	r3, 80a4376 <_printf_i+0x15e>
 80a436e:	6822      	ldr	r2, [r4, #0]
 80a4370:	f022 0220 	bic.w	r2, r2, #32
 80a4374:	6022      	str	r2, [r4, #0]
 80a4376:	2210      	movs	r2, #16
 80a4378:	e7b7      	b.n	80a42ea <_printf_i+0xd2>
 80a437a:	064d      	lsls	r5, r1, #25
 80a437c:	bf48      	it	mi
 80a437e:	b29b      	uxthmi	r3, r3
 80a4380:	e7ef      	b.n	80a4362 <_printf_i+0x14a>
 80a4382:	4665      	mov	r5, ip
 80a4384:	fbb3 f1f2 	udiv	r1, r3, r2
 80a4388:	fb02 3311 	mls	r3, r2, r1, r3
 80a438c:	5cc3      	ldrb	r3, [r0, r3]
 80a438e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80a4392:	460b      	mov	r3, r1
 80a4394:	2900      	cmp	r1, #0
 80a4396:	d1f5      	bne.n	80a4384 <_printf_i+0x16c>
 80a4398:	e7b9      	b.n	80a430e <_printf_i+0xf6>
 80a439a:	6813      	ldr	r3, [r2, #0]
 80a439c:	6825      	ldr	r5, [r4, #0]
 80a439e:	6961      	ldr	r1, [r4, #20]
 80a43a0:	1d18      	adds	r0, r3, #4
 80a43a2:	6010      	str	r0, [r2, #0]
 80a43a4:	0628      	lsls	r0, r5, #24
 80a43a6:	681b      	ldr	r3, [r3, #0]
 80a43a8:	d501      	bpl.n	80a43ae <_printf_i+0x196>
 80a43aa:	6019      	str	r1, [r3, #0]
 80a43ac:	e002      	b.n	80a43b4 <_printf_i+0x19c>
 80a43ae:	066a      	lsls	r2, r5, #25
 80a43b0:	d5fb      	bpl.n	80a43aa <_printf_i+0x192>
 80a43b2:	8019      	strh	r1, [r3, #0]
 80a43b4:	2300      	movs	r3, #0
 80a43b6:	6123      	str	r3, [r4, #16]
 80a43b8:	4665      	mov	r5, ip
 80a43ba:	e7b9      	b.n	80a4330 <_printf_i+0x118>
 80a43bc:	6813      	ldr	r3, [r2, #0]
 80a43be:	1d19      	adds	r1, r3, #4
 80a43c0:	6011      	str	r1, [r2, #0]
 80a43c2:	681d      	ldr	r5, [r3, #0]
 80a43c4:	6862      	ldr	r2, [r4, #4]
 80a43c6:	2100      	movs	r1, #0
 80a43c8:	4628      	mov	r0, r5
 80a43ca:	f7fc f911 	bl	80a05f0 <memchr>
 80a43ce:	b108      	cbz	r0, 80a43d4 <_printf_i+0x1bc>
 80a43d0:	1b40      	subs	r0, r0, r5
 80a43d2:	6060      	str	r0, [r4, #4]
 80a43d4:	6863      	ldr	r3, [r4, #4]
 80a43d6:	6123      	str	r3, [r4, #16]
 80a43d8:	2300      	movs	r3, #0
 80a43da:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80a43de:	e7a7      	b.n	80a4330 <_printf_i+0x118>
 80a43e0:	6923      	ldr	r3, [r4, #16]
 80a43e2:	462a      	mov	r2, r5
 80a43e4:	4639      	mov	r1, r7
 80a43e6:	4630      	mov	r0, r6
 80a43e8:	47c0      	blx	r8
 80a43ea:	3001      	adds	r0, #1
 80a43ec:	d0aa      	beq.n	80a4344 <_printf_i+0x12c>
 80a43ee:	6823      	ldr	r3, [r4, #0]
 80a43f0:	079b      	lsls	r3, r3, #30
 80a43f2:	d413      	bmi.n	80a441c <_printf_i+0x204>
 80a43f4:	68e0      	ldr	r0, [r4, #12]
 80a43f6:	9b03      	ldr	r3, [sp, #12]
 80a43f8:	4298      	cmp	r0, r3
 80a43fa:	bfb8      	it	lt
 80a43fc:	4618      	movlt	r0, r3
 80a43fe:	e7a3      	b.n	80a4348 <_printf_i+0x130>
 80a4400:	2301      	movs	r3, #1
 80a4402:	464a      	mov	r2, r9
 80a4404:	4639      	mov	r1, r7
 80a4406:	4630      	mov	r0, r6
 80a4408:	47c0      	blx	r8
 80a440a:	3001      	adds	r0, #1
 80a440c:	d09a      	beq.n	80a4344 <_printf_i+0x12c>
 80a440e:	3501      	adds	r5, #1
 80a4410:	68e3      	ldr	r3, [r4, #12]
 80a4412:	9a03      	ldr	r2, [sp, #12]
 80a4414:	1a9b      	subs	r3, r3, r2
 80a4416:	42ab      	cmp	r3, r5
 80a4418:	dcf2      	bgt.n	80a4400 <_printf_i+0x1e8>
 80a441a:	e7eb      	b.n	80a43f4 <_printf_i+0x1dc>
 80a441c:	2500      	movs	r5, #0
 80a441e:	f104 0919 	add.w	r9, r4, #25
 80a4422:	e7f5      	b.n	80a4410 <_printf_i+0x1f8>
 80a4424:	2b00      	cmp	r3, #0
 80a4426:	d1ac      	bne.n	80a4382 <_printf_i+0x16a>
 80a4428:	7803      	ldrb	r3, [r0, #0]
 80a442a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80a442e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80a4432:	e76c      	b.n	80a430e <_printf_i+0xf6>
 80a4434:	080a4ac9 	.word	0x080a4ac9
 80a4438:	080a4ada 	.word	0x080a4ada

080a443c <_sbrk_r>:
 80a443c:	b538      	push	{r3, r4, r5, lr}
 80a443e:	4c06      	ldr	r4, [pc, #24]	; (80a4458 <_sbrk_r+0x1c>)
 80a4440:	2300      	movs	r3, #0
 80a4442:	4605      	mov	r5, r0
 80a4444:	4608      	mov	r0, r1
 80a4446:	6023      	str	r3, [r4, #0]
 80a4448:	f7fc feca 	bl	80a11e0 <_sbrk>
 80a444c:	1c43      	adds	r3, r0, #1
 80a444e:	d102      	bne.n	80a4456 <_sbrk_r+0x1a>
 80a4450:	6823      	ldr	r3, [r4, #0]
 80a4452:	b103      	cbz	r3, 80a4456 <_sbrk_r+0x1a>
 80a4454:	602b      	str	r3, [r5, #0]
 80a4456:	bd38      	pop	{r3, r4, r5, pc}
 80a4458:	2000052c 	.word	0x2000052c

080a445c <__sread>:
 80a445c:	b510      	push	{r4, lr}
 80a445e:	460c      	mov	r4, r1
 80a4460:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80a4464:	f000 fa96 	bl	80a4994 <_read_r>
 80a4468:	2800      	cmp	r0, #0
 80a446a:	bfab      	itete	ge
 80a446c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80a446e:	89a3      	ldrhlt	r3, [r4, #12]
 80a4470:	181b      	addge	r3, r3, r0
 80a4472:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80a4476:	bfac      	ite	ge
 80a4478:	6563      	strge	r3, [r4, #84]	; 0x54
 80a447a:	81a3      	strhlt	r3, [r4, #12]
 80a447c:	bd10      	pop	{r4, pc}

080a447e <__swrite>:
 80a447e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a4482:	461f      	mov	r7, r3
 80a4484:	898b      	ldrh	r3, [r1, #12]
 80a4486:	05db      	lsls	r3, r3, #23
 80a4488:	4605      	mov	r5, r0
 80a448a:	460c      	mov	r4, r1
 80a448c:	4616      	mov	r6, r2
 80a448e:	d505      	bpl.n	80a449c <__swrite+0x1e>
 80a4490:	2302      	movs	r3, #2
 80a4492:	2200      	movs	r2, #0
 80a4494:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80a4498:	f000 f9b6 	bl	80a4808 <_lseek_r>
 80a449c:	89a3      	ldrh	r3, [r4, #12]
 80a449e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80a44a2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80a44a6:	81a3      	strh	r3, [r4, #12]
 80a44a8:	4632      	mov	r2, r6
 80a44aa:	463b      	mov	r3, r7
 80a44ac:	4628      	mov	r0, r5
 80a44ae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80a44b2:	f000 b869 	b.w	80a4588 <_write_r>

080a44b6 <__sseek>:
 80a44b6:	b510      	push	{r4, lr}
 80a44b8:	460c      	mov	r4, r1
 80a44ba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80a44be:	f000 f9a3 	bl	80a4808 <_lseek_r>
 80a44c2:	1c43      	adds	r3, r0, #1
 80a44c4:	89a3      	ldrh	r3, [r4, #12]
 80a44c6:	bf15      	itete	ne
 80a44c8:	6560      	strne	r0, [r4, #84]	; 0x54
 80a44ca:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80a44ce:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80a44d2:	81a3      	strheq	r3, [r4, #12]
 80a44d4:	bf18      	it	ne
 80a44d6:	81a3      	strhne	r3, [r4, #12]
 80a44d8:	bd10      	pop	{r4, pc}

080a44da <__sclose>:
 80a44da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80a44de:	f000 b8d3 	b.w	80a4688 <_close_r>
	...

080a44e4 <__swbuf_r>:
 80a44e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a44e6:	460e      	mov	r6, r1
 80a44e8:	4614      	mov	r4, r2
 80a44ea:	4605      	mov	r5, r0
 80a44ec:	b118      	cbz	r0, 80a44f6 <__swbuf_r+0x12>
 80a44ee:	6983      	ldr	r3, [r0, #24]
 80a44f0:	b90b      	cbnz	r3, 80a44f6 <__swbuf_r+0x12>
 80a44f2:	f7ff fbf7 	bl	80a3ce4 <__sinit>
 80a44f6:	4b21      	ldr	r3, [pc, #132]	; (80a457c <__swbuf_r+0x98>)
 80a44f8:	429c      	cmp	r4, r3
 80a44fa:	d12a      	bne.n	80a4552 <__swbuf_r+0x6e>
 80a44fc:	686c      	ldr	r4, [r5, #4]
 80a44fe:	69a3      	ldr	r3, [r4, #24]
 80a4500:	60a3      	str	r3, [r4, #8]
 80a4502:	89a3      	ldrh	r3, [r4, #12]
 80a4504:	071a      	lsls	r2, r3, #28
 80a4506:	d52e      	bpl.n	80a4566 <__swbuf_r+0x82>
 80a4508:	6923      	ldr	r3, [r4, #16]
 80a450a:	b363      	cbz	r3, 80a4566 <__swbuf_r+0x82>
 80a450c:	6923      	ldr	r3, [r4, #16]
 80a450e:	6820      	ldr	r0, [r4, #0]
 80a4510:	1ac0      	subs	r0, r0, r3
 80a4512:	6963      	ldr	r3, [r4, #20]
 80a4514:	b2f6      	uxtb	r6, r6
 80a4516:	4283      	cmp	r3, r0
 80a4518:	4637      	mov	r7, r6
 80a451a:	dc04      	bgt.n	80a4526 <__swbuf_r+0x42>
 80a451c:	4621      	mov	r1, r4
 80a451e:	4628      	mov	r0, r5
 80a4520:	f000 f948 	bl	80a47b4 <_fflush_r>
 80a4524:	bb28      	cbnz	r0, 80a4572 <__swbuf_r+0x8e>
 80a4526:	68a3      	ldr	r3, [r4, #8]
 80a4528:	3b01      	subs	r3, #1
 80a452a:	60a3      	str	r3, [r4, #8]
 80a452c:	6823      	ldr	r3, [r4, #0]
 80a452e:	1c5a      	adds	r2, r3, #1
 80a4530:	6022      	str	r2, [r4, #0]
 80a4532:	701e      	strb	r6, [r3, #0]
 80a4534:	6963      	ldr	r3, [r4, #20]
 80a4536:	3001      	adds	r0, #1
 80a4538:	4283      	cmp	r3, r0
 80a453a:	d004      	beq.n	80a4546 <__swbuf_r+0x62>
 80a453c:	89a3      	ldrh	r3, [r4, #12]
 80a453e:	07db      	lsls	r3, r3, #31
 80a4540:	d519      	bpl.n	80a4576 <__swbuf_r+0x92>
 80a4542:	2e0a      	cmp	r6, #10
 80a4544:	d117      	bne.n	80a4576 <__swbuf_r+0x92>
 80a4546:	4621      	mov	r1, r4
 80a4548:	4628      	mov	r0, r5
 80a454a:	f000 f933 	bl	80a47b4 <_fflush_r>
 80a454e:	b190      	cbz	r0, 80a4576 <__swbuf_r+0x92>
 80a4550:	e00f      	b.n	80a4572 <__swbuf_r+0x8e>
 80a4552:	4b0b      	ldr	r3, [pc, #44]	; (80a4580 <__swbuf_r+0x9c>)
 80a4554:	429c      	cmp	r4, r3
 80a4556:	d101      	bne.n	80a455c <__swbuf_r+0x78>
 80a4558:	68ac      	ldr	r4, [r5, #8]
 80a455a:	e7d0      	b.n	80a44fe <__swbuf_r+0x1a>
 80a455c:	4b09      	ldr	r3, [pc, #36]	; (80a4584 <__swbuf_r+0xa0>)
 80a455e:	429c      	cmp	r4, r3
 80a4560:	bf08      	it	eq
 80a4562:	68ec      	ldreq	r4, [r5, #12]
 80a4564:	e7cb      	b.n	80a44fe <__swbuf_r+0x1a>
 80a4566:	4621      	mov	r1, r4
 80a4568:	4628      	mov	r0, r5
 80a456a:	f000 f81f 	bl	80a45ac <__swsetup_r>
 80a456e:	2800      	cmp	r0, #0
 80a4570:	d0cc      	beq.n	80a450c <__swbuf_r+0x28>
 80a4572:	f04f 37ff 	mov.w	r7, #4294967295
 80a4576:	4638      	mov	r0, r7
 80a4578:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80a457a:	bf00      	nop
 80a457c:	080a4a78 	.word	0x080a4a78
 80a4580:	080a4a98 	.word	0x080a4a98
 80a4584:	080a4a58 	.word	0x080a4a58

080a4588 <_write_r>:
 80a4588:	b538      	push	{r3, r4, r5, lr}
 80a458a:	4c07      	ldr	r4, [pc, #28]	; (80a45a8 <_write_r+0x20>)
 80a458c:	4605      	mov	r5, r0
 80a458e:	4608      	mov	r0, r1
 80a4590:	4611      	mov	r1, r2
 80a4592:	2200      	movs	r2, #0
 80a4594:	6022      	str	r2, [r4, #0]
 80a4596:	461a      	mov	r2, r3
 80a4598:	f7fc fdd1 	bl	80a113e <_write>
 80a459c:	1c43      	adds	r3, r0, #1
 80a459e:	d102      	bne.n	80a45a6 <_write_r+0x1e>
 80a45a0:	6823      	ldr	r3, [r4, #0]
 80a45a2:	b103      	cbz	r3, 80a45a6 <_write_r+0x1e>
 80a45a4:	602b      	str	r3, [r5, #0]
 80a45a6:	bd38      	pop	{r3, r4, r5, pc}
 80a45a8:	2000052c 	.word	0x2000052c

080a45ac <__swsetup_r>:
 80a45ac:	4b32      	ldr	r3, [pc, #200]	; (80a4678 <__swsetup_r+0xcc>)
 80a45ae:	b570      	push	{r4, r5, r6, lr}
 80a45b0:	681d      	ldr	r5, [r3, #0]
 80a45b2:	4606      	mov	r6, r0
 80a45b4:	460c      	mov	r4, r1
 80a45b6:	b125      	cbz	r5, 80a45c2 <__swsetup_r+0x16>
 80a45b8:	69ab      	ldr	r3, [r5, #24]
 80a45ba:	b913      	cbnz	r3, 80a45c2 <__swsetup_r+0x16>
 80a45bc:	4628      	mov	r0, r5
 80a45be:	f7ff fb91 	bl	80a3ce4 <__sinit>
 80a45c2:	4b2e      	ldr	r3, [pc, #184]	; (80a467c <__swsetup_r+0xd0>)
 80a45c4:	429c      	cmp	r4, r3
 80a45c6:	d10f      	bne.n	80a45e8 <__swsetup_r+0x3c>
 80a45c8:	686c      	ldr	r4, [r5, #4]
 80a45ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80a45ce:	b29a      	uxth	r2, r3
 80a45d0:	0715      	lsls	r5, r2, #28
 80a45d2:	d42c      	bmi.n	80a462e <__swsetup_r+0x82>
 80a45d4:	06d0      	lsls	r0, r2, #27
 80a45d6:	d411      	bmi.n	80a45fc <__swsetup_r+0x50>
 80a45d8:	2209      	movs	r2, #9
 80a45da:	6032      	str	r2, [r6, #0]
 80a45dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80a45e0:	81a3      	strh	r3, [r4, #12]
 80a45e2:	f04f 30ff 	mov.w	r0, #4294967295
 80a45e6:	e03e      	b.n	80a4666 <__swsetup_r+0xba>
 80a45e8:	4b25      	ldr	r3, [pc, #148]	; (80a4680 <__swsetup_r+0xd4>)
 80a45ea:	429c      	cmp	r4, r3
 80a45ec:	d101      	bne.n	80a45f2 <__swsetup_r+0x46>
 80a45ee:	68ac      	ldr	r4, [r5, #8]
 80a45f0:	e7eb      	b.n	80a45ca <__swsetup_r+0x1e>
 80a45f2:	4b24      	ldr	r3, [pc, #144]	; (80a4684 <__swsetup_r+0xd8>)
 80a45f4:	429c      	cmp	r4, r3
 80a45f6:	bf08      	it	eq
 80a45f8:	68ec      	ldreq	r4, [r5, #12]
 80a45fa:	e7e6      	b.n	80a45ca <__swsetup_r+0x1e>
 80a45fc:	0751      	lsls	r1, r2, #29
 80a45fe:	d512      	bpl.n	80a4626 <__swsetup_r+0x7a>
 80a4600:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80a4602:	b141      	cbz	r1, 80a4616 <__swsetup_r+0x6a>
 80a4604:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80a4608:	4299      	cmp	r1, r3
 80a460a:	d002      	beq.n	80a4612 <__swsetup_r+0x66>
 80a460c:	4630      	mov	r0, r6
 80a460e:	f000 f973 	bl	80a48f8 <_free_r>
 80a4612:	2300      	movs	r3, #0
 80a4614:	6363      	str	r3, [r4, #52]	; 0x34
 80a4616:	89a3      	ldrh	r3, [r4, #12]
 80a4618:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80a461c:	81a3      	strh	r3, [r4, #12]
 80a461e:	2300      	movs	r3, #0
 80a4620:	6063      	str	r3, [r4, #4]
 80a4622:	6923      	ldr	r3, [r4, #16]
 80a4624:	6023      	str	r3, [r4, #0]
 80a4626:	89a3      	ldrh	r3, [r4, #12]
 80a4628:	f043 0308 	orr.w	r3, r3, #8
 80a462c:	81a3      	strh	r3, [r4, #12]
 80a462e:	6923      	ldr	r3, [r4, #16]
 80a4630:	b94b      	cbnz	r3, 80a4646 <__swsetup_r+0x9a>
 80a4632:	89a3      	ldrh	r3, [r4, #12]
 80a4634:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80a4638:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80a463c:	d003      	beq.n	80a4646 <__swsetup_r+0x9a>
 80a463e:	4621      	mov	r1, r4
 80a4640:	4630      	mov	r0, r6
 80a4642:	f000 f917 	bl	80a4874 <__smakebuf_r>
 80a4646:	89a2      	ldrh	r2, [r4, #12]
 80a4648:	f012 0301 	ands.w	r3, r2, #1
 80a464c:	d00c      	beq.n	80a4668 <__swsetup_r+0xbc>
 80a464e:	2300      	movs	r3, #0
 80a4650:	60a3      	str	r3, [r4, #8]
 80a4652:	6963      	ldr	r3, [r4, #20]
 80a4654:	425b      	negs	r3, r3
 80a4656:	61a3      	str	r3, [r4, #24]
 80a4658:	6923      	ldr	r3, [r4, #16]
 80a465a:	b953      	cbnz	r3, 80a4672 <__swsetup_r+0xc6>
 80a465c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80a4660:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 80a4664:	d1ba      	bne.n	80a45dc <__swsetup_r+0x30>
 80a4666:	bd70      	pop	{r4, r5, r6, pc}
 80a4668:	0792      	lsls	r2, r2, #30
 80a466a:	bf58      	it	pl
 80a466c:	6963      	ldrpl	r3, [r4, #20]
 80a466e:	60a3      	str	r3, [r4, #8]
 80a4670:	e7f2      	b.n	80a4658 <__swsetup_r+0xac>
 80a4672:	2000      	movs	r0, #0
 80a4674:	e7f7      	b.n	80a4666 <__swsetup_r+0xba>
 80a4676:	bf00      	nop
 80a4678:	2000000c 	.word	0x2000000c
 80a467c:	080a4a78 	.word	0x080a4a78
 80a4680:	080a4a98 	.word	0x080a4a98
 80a4684:	080a4a58 	.word	0x080a4a58

080a4688 <_close_r>:
 80a4688:	b538      	push	{r3, r4, r5, lr}
 80a468a:	4c06      	ldr	r4, [pc, #24]	; (80a46a4 <_close_r+0x1c>)
 80a468c:	2300      	movs	r3, #0
 80a468e:	4605      	mov	r5, r0
 80a4690:	4608      	mov	r0, r1
 80a4692:	6023      	str	r3, [r4, #0]
 80a4694:	f7fc fd6f 	bl	80a1176 <_close>
 80a4698:	1c43      	adds	r3, r0, #1
 80a469a:	d102      	bne.n	80a46a2 <_close_r+0x1a>
 80a469c:	6823      	ldr	r3, [r4, #0]
 80a469e:	b103      	cbz	r3, 80a46a2 <_close_r+0x1a>
 80a46a0:	602b      	str	r3, [r5, #0]
 80a46a2:	bd38      	pop	{r3, r4, r5, pc}
 80a46a4:	2000052c 	.word	0x2000052c

080a46a8 <__sflush_r>:
 80a46a8:	898a      	ldrh	r2, [r1, #12]
 80a46aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a46ae:	4605      	mov	r5, r0
 80a46b0:	0710      	lsls	r0, r2, #28
 80a46b2:	460c      	mov	r4, r1
 80a46b4:	d458      	bmi.n	80a4768 <__sflush_r+0xc0>
 80a46b6:	684b      	ldr	r3, [r1, #4]
 80a46b8:	2b00      	cmp	r3, #0
 80a46ba:	dc05      	bgt.n	80a46c8 <__sflush_r+0x20>
 80a46bc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80a46be:	2b00      	cmp	r3, #0
 80a46c0:	dc02      	bgt.n	80a46c8 <__sflush_r+0x20>
 80a46c2:	2000      	movs	r0, #0
 80a46c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a46c8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80a46ca:	2e00      	cmp	r6, #0
 80a46cc:	d0f9      	beq.n	80a46c2 <__sflush_r+0x1a>
 80a46ce:	2300      	movs	r3, #0
 80a46d0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80a46d4:	682f      	ldr	r7, [r5, #0]
 80a46d6:	6a21      	ldr	r1, [r4, #32]
 80a46d8:	602b      	str	r3, [r5, #0]
 80a46da:	d032      	beq.n	80a4742 <__sflush_r+0x9a>
 80a46dc:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80a46de:	89a3      	ldrh	r3, [r4, #12]
 80a46e0:	075a      	lsls	r2, r3, #29
 80a46e2:	d505      	bpl.n	80a46f0 <__sflush_r+0x48>
 80a46e4:	6863      	ldr	r3, [r4, #4]
 80a46e6:	1ac0      	subs	r0, r0, r3
 80a46e8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80a46ea:	b10b      	cbz	r3, 80a46f0 <__sflush_r+0x48>
 80a46ec:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80a46ee:	1ac0      	subs	r0, r0, r3
 80a46f0:	2300      	movs	r3, #0
 80a46f2:	4602      	mov	r2, r0
 80a46f4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80a46f6:	6a21      	ldr	r1, [r4, #32]
 80a46f8:	4628      	mov	r0, r5
 80a46fa:	47b0      	blx	r6
 80a46fc:	1c43      	adds	r3, r0, #1
 80a46fe:	89a3      	ldrh	r3, [r4, #12]
 80a4700:	d106      	bne.n	80a4710 <__sflush_r+0x68>
 80a4702:	6829      	ldr	r1, [r5, #0]
 80a4704:	291d      	cmp	r1, #29
 80a4706:	d848      	bhi.n	80a479a <__sflush_r+0xf2>
 80a4708:	4a29      	ldr	r2, [pc, #164]	; (80a47b0 <__sflush_r+0x108>)
 80a470a:	40ca      	lsrs	r2, r1
 80a470c:	07d6      	lsls	r6, r2, #31
 80a470e:	d544      	bpl.n	80a479a <__sflush_r+0xf2>
 80a4710:	2200      	movs	r2, #0
 80a4712:	6062      	str	r2, [r4, #4]
 80a4714:	04d9      	lsls	r1, r3, #19
 80a4716:	6922      	ldr	r2, [r4, #16]
 80a4718:	6022      	str	r2, [r4, #0]
 80a471a:	d504      	bpl.n	80a4726 <__sflush_r+0x7e>
 80a471c:	1c42      	adds	r2, r0, #1
 80a471e:	d101      	bne.n	80a4724 <__sflush_r+0x7c>
 80a4720:	682b      	ldr	r3, [r5, #0]
 80a4722:	b903      	cbnz	r3, 80a4726 <__sflush_r+0x7e>
 80a4724:	6560      	str	r0, [r4, #84]	; 0x54
 80a4726:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80a4728:	602f      	str	r7, [r5, #0]
 80a472a:	2900      	cmp	r1, #0
 80a472c:	d0c9      	beq.n	80a46c2 <__sflush_r+0x1a>
 80a472e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80a4732:	4299      	cmp	r1, r3
 80a4734:	d002      	beq.n	80a473c <__sflush_r+0x94>
 80a4736:	4628      	mov	r0, r5
 80a4738:	f000 f8de 	bl	80a48f8 <_free_r>
 80a473c:	2000      	movs	r0, #0
 80a473e:	6360      	str	r0, [r4, #52]	; 0x34
 80a4740:	e7c0      	b.n	80a46c4 <__sflush_r+0x1c>
 80a4742:	2301      	movs	r3, #1
 80a4744:	4628      	mov	r0, r5
 80a4746:	47b0      	blx	r6
 80a4748:	1c41      	adds	r1, r0, #1
 80a474a:	d1c8      	bne.n	80a46de <__sflush_r+0x36>
 80a474c:	682b      	ldr	r3, [r5, #0]
 80a474e:	2b00      	cmp	r3, #0
 80a4750:	d0c5      	beq.n	80a46de <__sflush_r+0x36>
 80a4752:	2b1d      	cmp	r3, #29
 80a4754:	d001      	beq.n	80a475a <__sflush_r+0xb2>
 80a4756:	2b16      	cmp	r3, #22
 80a4758:	d101      	bne.n	80a475e <__sflush_r+0xb6>
 80a475a:	602f      	str	r7, [r5, #0]
 80a475c:	e7b1      	b.n	80a46c2 <__sflush_r+0x1a>
 80a475e:	89a3      	ldrh	r3, [r4, #12]
 80a4760:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80a4764:	81a3      	strh	r3, [r4, #12]
 80a4766:	e7ad      	b.n	80a46c4 <__sflush_r+0x1c>
 80a4768:	690f      	ldr	r7, [r1, #16]
 80a476a:	2f00      	cmp	r7, #0
 80a476c:	d0a9      	beq.n	80a46c2 <__sflush_r+0x1a>
 80a476e:	0793      	lsls	r3, r2, #30
 80a4770:	680e      	ldr	r6, [r1, #0]
 80a4772:	bf08      	it	eq
 80a4774:	694b      	ldreq	r3, [r1, #20]
 80a4776:	600f      	str	r7, [r1, #0]
 80a4778:	bf18      	it	ne
 80a477a:	2300      	movne	r3, #0
 80a477c:	eba6 0807 	sub.w	r8, r6, r7
 80a4780:	608b      	str	r3, [r1, #8]
 80a4782:	f1b8 0f00 	cmp.w	r8, #0
 80a4786:	dd9c      	ble.n	80a46c2 <__sflush_r+0x1a>
 80a4788:	4643      	mov	r3, r8
 80a478a:	463a      	mov	r2, r7
 80a478c:	6a21      	ldr	r1, [r4, #32]
 80a478e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80a4790:	4628      	mov	r0, r5
 80a4792:	47b0      	blx	r6
 80a4794:	2800      	cmp	r0, #0
 80a4796:	dc06      	bgt.n	80a47a6 <__sflush_r+0xfe>
 80a4798:	89a3      	ldrh	r3, [r4, #12]
 80a479a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80a479e:	81a3      	strh	r3, [r4, #12]
 80a47a0:	f04f 30ff 	mov.w	r0, #4294967295
 80a47a4:	e78e      	b.n	80a46c4 <__sflush_r+0x1c>
 80a47a6:	4407      	add	r7, r0
 80a47a8:	eba8 0800 	sub.w	r8, r8, r0
 80a47ac:	e7e9      	b.n	80a4782 <__sflush_r+0xda>
 80a47ae:	bf00      	nop
 80a47b0:	20400001 	.word	0x20400001

080a47b4 <_fflush_r>:
 80a47b4:	b538      	push	{r3, r4, r5, lr}
 80a47b6:	690b      	ldr	r3, [r1, #16]
 80a47b8:	4605      	mov	r5, r0
 80a47ba:	460c      	mov	r4, r1
 80a47bc:	b1db      	cbz	r3, 80a47f6 <_fflush_r+0x42>
 80a47be:	b118      	cbz	r0, 80a47c8 <_fflush_r+0x14>
 80a47c0:	6983      	ldr	r3, [r0, #24]
 80a47c2:	b90b      	cbnz	r3, 80a47c8 <_fflush_r+0x14>
 80a47c4:	f7ff fa8e 	bl	80a3ce4 <__sinit>
 80a47c8:	4b0c      	ldr	r3, [pc, #48]	; (80a47fc <_fflush_r+0x48>)
 80a47ca:	429c      	cmp	r4, r3
 80a47cc:	d109      	bne.n	80a47e2 <_fflush_r+0x2e>
 80a47ce:	686c      	ldr	r4, [r5, #4]
 80a47d0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80a47d4:	b17b      	cbz	r3, 80a47f6 <_fflush_r+0x42>
 80a47d6:	4621      	mov	r1, r4
 80a47d8:	4628      	mov	r0, r5
 80a47da:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80a47de:	f7ff bf63 	b.w	80a46a8 <__sflush_r>
 80a47e2:	4b07      	ldr	r3, [pc, #28]	; (80a4800 <_fflush_r+0x4c>)
 80a47e4:	429c      	cmp	r4, r3
 80a47e6:	d101      	bne.n	80a47ec <_fflush_r+0x38>
 80a47e8:	68ac      	ldr	r4, [r5, #8]
 80a47ea:	e7f1      	b.n	80a47d0 <_fflush_r+0x1c>
 80a47ec:	4b05      	ldr	r3, [pc, #20]	; (80a4804 <_fflush_r+0x50>)
 80a47ee:	429c      	cmp	r4, r3
 80a47f0:	bf08      	it	eq
 80a47f2:	68ec      	ldreq	r4, [r5, #12]
 80a47f4:	e7ec      	b.n	80a47d0 <_fflush_r+0x1c>
 80a47f6:	2000      	movs	r0, #0
 80a47f8:	bd38      	pop	{r3, r4, r5, pc}
 80a47fa:	bf00      	nop
 80a47fc:	080a4a78 	.word	0x080a4a78
 80a4800:	080a4a98 	.word	0x080a4a98
 80a4804:	080a4a58 	.word	0x080a4a58

080a4808 <_lseek_r>:
 80a4808:	b538      	push	{r3, r4, r5, lr}
 80a480a:	4c07      	ldr	r4, [pc, #28]	; (80a4828 <_lseek_r+0x20>)
 80a480c:	4605      	mov	r5, r0
 80a480e:	4608      	mov	r0, r1
 80a4810:	4611      	mov	r1, r2
 80a4812:	2200      	movs	r2, #0
 80a4814:	6022      	str	r2, [r4, #0]
 80a4816:	461a      	mov	r2, r3
 80a4818:	f7fc fcd4 	bl	80a11c4 <_lseek>
 80a481c:	1c43      	adds	r3, r0, #1
 80a481e:	d102      	bne.n	80a4826 <_lseek_r+0x1e>
 80a4820:	6823      	ldr	r3, [r4, #0]
 80a4822:	b103      	cbz	r3, 80a4826 <_lseek_r+0x1e>
 80a4824:	602b      	str	r3, [r5, #0]
 80a4826:	bd38      	pop	{r3, r4, r5, pc}
 80a4828:	2000052c 	.word	0x2000052c

080a482c <__swhatbuf_r>:
 80a482c:	b570      	push	{r4, r5, r6, lr}
 80a482e:	460e      	mov	r6, r1
 80a4830:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80a4834:	2900      	cmp	r1, #0
 80a4836:	b096      	sub	sp, #88	; 0x58
 80a4838:	4614      	mov	r4, r2
 80a483a:	461d      	mov	r5, r3
 80a483c:	da07      	bge.n	80a484e <__swhatbuf_r+0x22>
 80a483e:	2300      	movs	r3, #0
 80a4840:	602b      	str	r3, [r5, #0]
 80a4842:	89b3      	ldrh	r3, [r6, #12]
 80a4844:	061a      	lsls	r2, r3, #24
 80a4846:	d410      	bmi.n	80a486a <__swhatbuf_r+0x3e>
 80a4848:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80a484c:	e00e      	b.n	80a486c <__swhatbuf_r+0x40>
 80a484e:	466a      	mov	r2, sp
 80a4850:	f000 f8b2 	bl	80a49b8 <_fstat_r>
 80a4854:	2800      	cmp	r0, #0
 80a4856:	dbf2      	blt.n	80a483e <__swhatbuf_r+0x12>
 80a4858:	9a01      	ldr	r2, [sp, #4]
 80a485a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80a485e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80a4862:	425a      	negs	r2, r3
 80a4864:	415a      	adcs	r2, r3
 80a4866:	602a      	str	r2, [r5, #0]
 80a4868:	e7ee      	b.n	80a4848 <__swhatbuf_r+0x1c>
 80a486a:	2340      	movs	r3, #64	; 0x40
 80a486c:	2000      	movs	r0, #0
 80a486e:	6023      	str	r3, [r4, #0]
 80a4870:	b016      	add	sp, #88	; 0x58
 80a4872:	bd70      	pop	{r4, r5, r6, pc}

080a4874 <__smakebuf_r>:
 80a4874:	898b      	ldrh	r3, [r1, #12]
 80a4876:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80a4878:	079d      	lsls	r5, r3, #30
 80a487a:	4606      	mov	r6, r0
 80a487c:	460c      	mov	r4, r1
 80a487e:	d507      	bpl.n	80a4890 <__smakebuf_r+0x1c>
 80a4880:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80a4884:	6023      	str	r3, [r4, #0]
 80a4886:	6123      	str	r3, [r4, #16]
 80a4888:	2301      	movs	r3, #1
 80a488a:	6163      	str	r3, [r4, #20]
 80a488c:	b002      	add	sp, #8
 80a488e:	bd70      	pop	{r4, r5, r6, pc}
 80a4890:	ab01      	add	r3, sp, #4
 80a4892:	466a      	mov	r2, sp
 80a4894:	f7ff ffca 	bl	80a482c <__swhatbuf_r>
 80a4898:	9900      	ldr	r1, [sp, #0]
 80a489a:	4605      	mov	r5, r0
 80a489c:	4630      	mov	r0, r6
 80a489e:	f7ff faab 	bl	80a3df8 <_malloc_r>
 80a48a2:	b948      	cbnz	r0, 80a48b8 <__smakebuf_r+0x44>
 80a48a4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80a48a8:	059a      	lsls	r2, r3, #22
 80a48aa:	d4ef      	bmi.n	80a488c <__smakebuf_r+0x18>
 80a48ac:	f023 0303 	bic.w	r3, r3, #3
 80a48b0:	f043 0302 	orr.w	r3, r3, #2
 80a48b4:	81a3      	strh	r3, [r4, #12]
 80a48b6:	e7e3      	b.n	80a4880 <__smakebuf_r+0xc>
 80a48b8:	4b0d      	ldr	r3, [pc, #52]	; (80a48f0 <__smakebuf_r+0x7c>)
 80a48ba:	62b3      	str	r3, [r6, #40]	; 0x28
 80a48bc:	89a3      	ldrh	r3, [r4, #12]
 80a48be:	6020      	str	r0, [r4, #0]
 80a48c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80a48c4:	81a3      	strh	r3, [r4, #12]
 80a48c6:	9b00      	ldr	r3, [sp, #0]
 80a48c8:	6163      	str	r3, [r4, #20]
 80a48ca:	9b01      	ldr	r3, [sp, #4]
 80a48cc:	6120      	str	r0, [r4, #16]
 80a48ce:	b15b      	cbz	r3, 80a48e8 <__smakebuf_r+0x74>
 80a48d0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80a48d4:	4630      	mov	r0, r6
 80a48d6:	f000 f881 	bl	80a49dc <_isatty_r>
 80a48da:	b128      	cbz	r0, 80a48e8 <__smakebuf_r+0x74>
 80a48dc:	89a3      	ldrh	r3, [r4, #12]
 80a48de:	f023 0303 	bic.w	r3, r3, #3
 80a48e2:	f043 0301 	orr.w	r3, r3, #1
 80a48e6:	81a3      	strh	r3, [r4, #12]
 80a48e8:	89a3      	ldrh	r3, [r4, #12]
 80a48ea:	431d      	orrs	r5, r3
 80a48ec:	81a5      	strh	r5, [r4, #12]
 80a48ee:	e7cd      	b.n	80a488c <__smakebuf_r+0x18>
 80a48f0:	080a3cad 	.word	0x080a3cad

080a48f4 <__malloc_lock>:
 80a48f4:	4770      	bx	lr

080a48f6 <__malloc_unlock>:
 80a48f6:	4770      	bx	lr

080a48f8 <_free_r>:
 80a48f8:	b538      	push	{r3, r4, r5, lr}
 80a48fa:	4605      	mov	r5, r0
 80a48fc:	2900      	cmp	r1, #0
 80a48fe:	d045      	beq.n	80a498c <_free_r+0x94>
 80a4900:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80a4904:	1f0c      	subs	r4, r1, #4
 80a4906:	2b00      	cmp	r3, #0
 80a4908:	bfb8      	it	lt
 80a490a:	18e4      	addlt	r4, r4, r3
 80a490c:	f7ff fff2 	bl	80a48f4 <__malloc_lock>
 80a4910:	4a1f      	ldr	r2, [pc, #124]	; (80a4990 <_free_r+0x98>)
 80a4912:	6813      	ldr	r3, [r2, #0]
 80a4914:	4610      	mov	r0, r2
 80a4916:	b933      	cbnz	r3, 80a4926 <_free_r+0x2e>
 80a4918:	6063      	str	r3, [r4, #4]
 80a491a:	6014      	str	r4, [r2, #0]
 80a491c:	4628      	mov	r0, r5
 80a491e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80a4922:	f7ff bfe8 	b.w	80a48f6 <__malloc_unlock>
 80a4926:	42a3      	cmp	r3, r4
 80a4928:	d90c      	bls.n	80a4944 <_free_r+0x4c>
 80a492a:	6821      	ldr	r1, [r4, #0]
 80a492c:	1862      	adds	r2, r4, r1
 80a492e:	4293      	cmp	r3, r2
 80a4930:	bf04      	itt	eq
 80a4932:	681a      	ldreq	r2, [r3, #0]
 80a4934:	685b      	ldreq	r3, [r3, #4]
 80a4936:	6063      	str	r3, [r4, #4]
 80a4938:	bf04      	itt	eq
 80a493a:	1852      	addeq	r2, r2, r1
 80a493c:	6022      	streq	r2, [r4, #0]
 80a493e:	6004      	str	r4, [r0, #0]
 80a4940:	e7ec      	b.n	80a491c <_free_r+0x24>
 80a4942:	4613      	mov	r3, r2
 80a4944:	685a      	ldr	r2, [r3, #4]
 80a4946:	b10a      	cbz	r2, 80a494c <_free_r+0x54>
 80a4948:	42a2      	cmp	r2, r4
 80a494a:	d9fa      	bls.n	80a4942 <_free_r+0x4a>
 80a494c:	6819      	ldr	r1, [r3, #0]
 80a494e:	1858      	adds	r0, r3, r1
 80a4950:	42a0      	cmp	r0, r4
 80a4952:	d10b      	bne.n	80a496c <_free_r+0x74>
 80a4954:	6820      	ldr	r0, [r4, #0]
 80a4956:	4401      	add	r1, r0
 80a4958:	1858      	adds	r0, r3, r1
 80a495a:	4282      	cmp	r2, r0
 80a495c:	6019      	str	r1, [r3, #0]
 80a495e:	d1dd      	bne.n	80a491c <_free_r+0x24>
 80a4960:	6810      	ldr	r0, [r2, #0]
 80a4962:	6852      	ldr	r2, [r2, #4]
 80a4964:	605a      	str	r2, [r3, #4]
 80a4966:	4401      	add	r1, r0
 80a4968:	6019      	str	r1, [r3, #0]
 80a496a:	e7d7      	b.n	80a491c <_free_r+0x24>
 80a496c:	d902      	bls.n	80a4974 <_free_r+0x7c>
 80a496e:	230c      	movs	r3, #12
 80a4970:	602b      	str	r3, [r5, #0]
 80a4972:	e7d3      	b.n	80a491c <_free_r+0x24>
 80a4974:	6820      	ldr	r0, [r4, #0]
 80a4976:	1821      	adds	r1, r4, r0
 80a4978:	428a      	cmp	r2, r1
 80a497a:	bf04      	itt	eq
 80a497c:	6811      	ldreq	r1, [r2, #0]
 80a497e:	6852      	ldreq	r2, [r2, #4]
 80a4980:	6062      	str	r2, [r4, #4]
 80a4982:	bf04      	itt	eq
 80a4984:	1809      	addeq	r1, r1, r0
 80a4986:	6021      	streq	r1, [r4, #0]
 80a4988:	605c      	str	r4, [r3, #4]
 80a498a:	e7c7      	b.n	80a491c <_free_r+0x24>
 80a498c:	bd38      	pop	{r3, r4, r5, pc}
 80a498e:	bf00      	nop
 80a4990:	20000090 	.word	0x20000090

080a4994 <_read_r>:
 80a4994:	b538      	push	{r3, r4, r5, lr}
 80a4996:	4c07      	ldr	r4, [pc, #28]	; (80a49b4 <_read_r+0x20>)
 80a4998:	4605      	mov	r5, r0
 80a499a:	4608      	mov	r0, r1
 80a499c:	4611      	mov	r1, r2
 80a499e:	2200      	movs	r2, #0
 80a49a0:	6022      	str	r2, [r4, #0]
 80a49a2:	461a      	mov	r2, r3
 80a49a4:	f7fc fbae 	bl	80a1104 <_read>
 80a49a8:	1c43      	adds	r3, r0, #1
 80a49aa:	d102      	bne.n	80a49b2 <_read_r+0x1e>
 80a49ac:	6823      	ldr	r3, [r4, #0]
 80a49ae:	b103      	cbz	r3, 80a49b2 <_read_r+0x1e>
 80a49b0:	602b      	str	r3, [r5, #0]
 80a49b2:	bd38      	pop	{r3, r4, r5, pc}
 80a49b4:	2000052c 	.word	0x2000052c

080a49b8 <_fstat_r>:
 80a49b8:	b538      	push	{r3, r4, r5, lr}
 80a49ba:	4c07      	ldr	r4, [pc, #28]	; (80a49d8 <_fstat_r+0x20>)
 80a49bc:	2300      	movs	r3, #0
 80a49be:	4605      	mov	r5, r0
 80a49c0:	4608      	mov	r0, r1
 80a49c2:	4611      	mov	r1, r2
 80a49c4:	6023      	str	r3, [r4, #0]
 80a49c6:	f7fc fbe2 	bl	80a118e <_fstat>
 80a49ca:	1c43      	adds	r3, r0, #1
 80a49cc:	d102      	bne.n	80a49d4 <_fstat_r+0x1c>
 80a49ce:	6823      	ldr	r3, [r4, #0]
 80a49d0:	b103      	cbz	r3, 80a49d4 <_fstat_r+0x1c>
 80a49d2:	602b      	str	r3, [r5, #0]
 80a49d4:	bd38      	pop	{r3, r4, r5, pc}
 80a49d6:	bf00      	nop
 80a49d8:	2000052c 	.word	0x2000052c

080a49dc <_isatty_r>:
 80a49dc:	b538      	push	{r3, r4, r5, lr}
 80a49de:	4c06      	ldr	r4, [pc, #24]	; (80a49f8 <_isatty_r+0x1c>)
 80a49e0:	2300      	movs	r3, #0
 80a49e2:	4605      	mov	r5, r0
 80a49e4:	4608      	mov	r0, r1
 80a49e6:	6023      	str	r3, [r4, #0]
 80a49e8:	f7fc fbe1 	bl	80a11ae <_isatty>
 80a49ec:	1c43      	adds	r3, r0, #1
 80a49ee:	d102      	bne.n	80a49f6 <_isatty_r+0x1a>
 80a49f0:	6823      	ldr	r3, [r4, #0]
 80a49f2:	b103      	cbz	r3, 80a49f6 <_isatty_r+0x1a>
 80a49f4:	602b      	str	r3, [r5, #0]
 80a49f6:	bd38      	pop	{r3, r4, r5, pc}
 80a49f8:	2000052c 	.word	0x2000052c

080a49fc <_init>:
 80a49fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a49fe:	bf00      	nop
 80a4a00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80a4a02:	bc08      	pop	{r3}
 80a4a04:	469e      	mov	lr, r3
 80a4a06:	4770      	bx	lr

080a4a08 <_fini>:
 80a4a08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a4a0a:	bf00      	nop
 80a4a0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80a4a0e:	bc08      	pop	{r3}
 80a4a10:	469e      	mov	lr, r3
 80a4a12:	4770      	bx	lr
